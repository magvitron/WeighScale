

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jul 29 23:50:29 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44  0000                     
    45                           ; Version 1.45
    46                           ; Generated 16/11/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4550 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	nvBANK0
    81  0000E5                     __pnvBANK0:
    82                           	opt stack 0
    83  0000E5                     _page:
    84                           	opt stack 0
    85  0000E5                     	ds	1
    86  0000                     _PIR2bits	set	4001
    87  0000                     _EECON2	set	4007
    88  0000                     _INTCONbits	set	4082
    89  0000                     _EECON1bits	set	4006
    90  0000                     _EEDATA	set	4008
    91  0000                     _EEADR	set	4009
    92  0000                     _TXREG	set	4013
    93  0000                     _TXSTAbits	set	4012
    94  0000                     _RCSTA	set	4011
    95  0000                     _TXSTA	set	4012
    96  0000                     _SPBRG	set	4015
    97  0000                     _TRISCbits	set	3988
    98  0000                     _LATA	set	3977
    99  0000                     _TRISA	set	3986
   100  0000                     _TRISBbits	set	3987
   101  0000                     _CCP2CON	set	4026
   102  0000                     _CCP1CON	set	4029
   103  0000                     _UCON	set	3949
   104  0000                     _CVRCON	set	4021
   105  0000                     _CMCON	set	4020
   106  0000                     _ADCON1	set	4033
   107  0000                     _PORTAbits	set	3968
   108  0000                     _LATAbits	set	3977
   109  0000                     _TRISAbits	set	3986
   110  0000                     _PORTBbits	set	3969
   111  0000                     _OSCCON	set	4051
   112  0000                     _TRISB	set	3987
   113  0000                     _LATD2	set	31842
   114  0000                     _LATD0	set	31840
   115  0000                     _TRISD2	set	31914
   116  0000                     _TRISD0	set	31912
   117  0000                     _TRISA0	set	31888
   118                           
   119                           	psect	smallconst
   120  000800                     __psmallconst:
   121                           	opt stack 0
   122  000800  00                 	db	0
   123  000801                     STR_10:
   124  000801  50                 	db	80	;'P'
   125  000802  75                 	db	117	;'u'
   126  000803  74                 	db	116	;'t'
   127  000804  20                 	db	32
   128  000805  74                 	db	116	;'t'
   129  000806  68                 	db	104	;'h'
   130  000807  65                 	db	101	;'e'
   131  000808  20                 	db	32
   132  000809  77                 	db	119	;'w'
   133  00080A  65                 	db	101	;'e'
   134  00080B  69                 	db	105	;'i'
   135  00080C  67                 	db	103	;'g'
   136  00080D  68                 	db	104	;'h'
   137  00080E  74                 	db	116	;'t'
   138  00080F  20                 	db	32
   139  000810  26                 	db	38
   140  000811  20                 	db	32
   141  000812  77                 	db	119	;'w'
   142  000813  61                 	db	97	;'a'
   143  000814  69                 	db	105	;'i'
   144  000815  74                 	db	116	;'t'
   145  000816  00                 	db	0
   146  000817                     STR_11:
   147  000817  44                 	db	68	;'D'
   148  000818  65                 	db	101	;'e'
   149  000819  74                 	db	116	;'t'
   150  00081A  65                 	db	101	;'e'
   151  00081B  63                 	db	99	;'c'
   152  00081C  74                 	db	116	;'t'
   153  00081D  65                 	db	101	;'e'
   154  00081E  64                 	db	100	;'d'
   155  00081F  20                 	db	32
   156  000820  77                 	db	119	;'w'
   157  000821  65                 	db	101	;'e'
   158  000822  69                 	db	105	;'i'
   159  000823  67                 	db	103	;'g'
   160  000824  68                 	db	104	;'h'
   161  000825  74                 	db	116	;'t'
   162  000826  2E                 	db	46
   163  000827  2E                 	db	46
   164  000828  00                 	db	0
   165  000829                     STR_9:
   166  000829  50                 	db	80	;'P'
   167  00082A  75                 	db	117	;'u'
   168  00082B  74                 	db	116	;'t'
   169  00082C  20                 	db	32
   170  00082D  33                 	db	51	;'3'
   171  00082E  30                 	db	48	;'0'
   172  00082F  30                 	db	48	;'0'
   173  000830  67                 	db	103	;'g'
   174  000831  6D                 	db	109	;'m'
   175  000832  20                 	db	32
   176  000833  77                 	db	119	;'w'
   177  000834  65                 	db	101	;'e'
   178  000835  69                 	db	105	;'i'
   179  000836  67                 	db	103	;'g'
   180  000837  68                 	db	104	;'h'
   181  000838  74                 	db	116	;'t'
   182  000839  00                 	db	0
   183  00083A                     STR_12:
   184  00083A  52                 	db	82	;'R'
   185  00083B  65                 	db	101	;'e'
   186  00083C  63                 	db	99	;'c'
   187  00083D  61                 	db	97	;'a'
   188  00083E  6C                 	db	108	;'l'
   189  00083F  69                 	db	105	;'i'
   190  000840  62                 	db	98	;'b'
   191  000841  72                 	db	114	;'r'
   192  000842  61                 	db	97	;'a'
   193  000843  74                 	db	116	;'t'
   194  000844  69                 	db	105	;'i'
   195  000845  6E                 	db	110	;'n'
   196  000846  67                 	db	103	;'g'
   197  000847  2E                 	db	46
   198  000848  2E                 	db	46
   199  000849  00                 	db	0
   200  00084A                     STR_7:
   201  00084A  43                 	db	67	;'C'
   202  00084B  61                 	db	97	;'a'
   203  00084C  6C                 	db	108	;'l'
   204  00084D  69                 	db	105	;'i'
   205  00084E  62                 	db	98	;'b'
   206  00084F  72                 	db	114	;'r'
   207  000850  61                 	db	97	;'a'
   208  000851  74                 	db	116	;'t'
   209  000852  69                 	db	105	;'i'
   210  000853  6E                 	db	110	;'n'
   211  000854  67                 	db	103	;'g'
   212  000855  2E                 	db	46
   213  000856  2E                 	db	46
   214  000857  2E                 	db	46
   215  000858  00                 	db	0
   216  000859                     STR_2:
   217  000859  4A                 	db	74	;'J'
   218  00085A  75                 	db	117	;'u'
   219  00085B  6C                 	db	108	;'l'
   220  00085C  20                 	db	32
   221  00085D  32                 	db	50	;'2'
   222  00085E  39                 	db	57	;'9'
   223  00085F  20                 	db	32
   224  000860  32                 	db	50	;'2'
   225  000861  30                 	db	48	;'0'
   226  000862  31                 	db	49	;'1'
   227  000863  38                 	db	56	;'8'
   228  000864  00                 	db	0
   229  000865                     STR_14:
   230  000865  57                 	db	87	;'W'
   231  000866  65                 	db	101	;'e'
   232  000867  69                 	db	105	;'i'
   233  000868  67                 	db	103	;'g'
   234  000869  68                 	db	104	;'h'
   235  00086A  20                 	db	32
   236  00086B  53                 	db	83	;'S'
   237  00086C  63                 	db	99	;'c'
   238  00086D  61                 	db	97	;'a'
   239  00086E  6C                 	db	108	;'l'
   240  00086F  65                 	db	101	;'e'
   241  000870  00                 	db	0
   242  000871                     STR_8:
   243  000871  43                 	db	67	;'C'
   244  000872  61                 	db	97	;'a'
   245  000873  6C                 	db	108	;'l'
   246  000874  69                 	db	105	;'i'
   247  000875  62                 	db	98	;'b'
   248  000876  72                 	db	114	;'r'
   249  000877  61                 	db	97	;'a'
   250  000878  74                 	db	116	;'t'
   251  000879  69                 	db	105	;'i'
   252  00087A  6E                 	db	110	;'n'
   253  00087B  67                 	db	103	;'g'
   254  00087C  00                 	db	0
   255  00087D                     STR_3:
   256  00087D  73                 	db	115	;'s'
   257  00087E  61                 	db	97	;'a'
   258  00087F  6D                 	db	109	;'m'
   259  000880  70                 	db	112	;'p'
   260  000881  6C                 	db	108	;'l'
   261  000882  65                 	db	101	;'e'
   262  000883  3A                 	db	58	;':'
   263  000884  20                 	db	32
   264  000885  00                 	db	0
   265  000886                     STR_1:
   266  000886  32                 	db	50	;'2'
   267  000887  33                 	db	51	;'3'
   268  000888  3A                 	db	58	;':'
   269  000889  35                 	db	53	;'5'
   270  00088A  30                 	db	48	;'0'
   271  00088B  3A                 	db	58	;':'
   272  00088C  32                 	db	50	;'2'
   273  00088D  36                 	db	54	;'6'
   274  00088E  00                 	db	0
   275  00088F                     STR_4:
   276  00088F  76                 	db	118	;'v'
   277  000890  61                 	db	97	;'a'
   278  000891  6C                 	db	108	;'l'
   279  000892  3A                 	db	58	;':'
   280  000893  20                 	db	32
   281  000894  00                 	db	0
   282  000895                     STR_5:
   283  000895  20                 	db	32
   284  000896  20                 	db	32
   285  000897  67                 	db	103	;'g'
   286  000898  6D                 	db	109	;'m'
   287  000899  00                 	db	0
   288  0000                     
   289                           ; #config settings
   290  00089A  00                 	db	0	; dummy byte at the end
   291  0000                     
   292                           	psect	cinit
   293  001E00                     __pcinit:
   294                           	opt stack 0
   295  001E00                     start_initialization:
   296                           	opt stack 0
   297  001E00                     __initialization:
   298                           	opt stack 0
   299                           
   300                           ; Clear objects allocated to BANK0 (115 bytes)
   301  001E00  EE00  F060         	lfsr	0,__pbssBANK0
   302  001E04  0E73               	movlw	115
   303  001E06                     clear_0:
   304  001E06  6AEE               	clrf	postinc0,c
   305  001E08  06E8               	decf	wreg,f,c
   306  001E0A  E1FD               	bnz	clear_0
   307                           
   308                           ; Clear objects allocated to COMRAM (4 bytes)
   309  001E0C  6A5F               	clrf	(__pbssCOMRAM+3)& (0+255),c
   310  001E0E  6A5E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   311  001E10  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   312  001E12  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   313  001E14                     end_of_initialization:
   314                           	opt stack 0
   315  001E14                     __end_of__initialization:
   316                           	opt stack 0
   317  001E14  0E00               	movlw	low (__Lmediumconst shr (0+16))
   318  001E16  6EF8               	movwf	tblptru,c
   319  001E18  0100               	movlb	0
   320  001E1A  EF5E  F006         	goto	_main	;jump to C main() function
   321                           tblptru	equ	0xFF8
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           
   325                           	psect	bssCOMRAM
   326  00005C                     __pbssCOMRAM:
   327                           	opt stack 0
   328  00005C                     _b2:
   329                           	opt stack 0
   330  00005C                     	ds	1
   331  00005D                     _b1:
   332                           	opt stack 0
   333  00005D                     	ds	1
   334  00005E                     _b0:
   335                           	opt stack 0
   336  00005E                     	ds	1
   337  00005F                     _b:
   338                           	opt stack 0
   339  00005F                     	ds	1
   340                           tblptru	equ	0xFF8
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           
   344                           	psect	bssBANK0
   345  000060                     __pbssBANK0:
   346                           	opt stack 0
   347  000060                     _tx_buf:
   348                           	opt stack 0
   349  000060                     	ds	10
   350  00006A                     _count:
   351                           	opt stack 0
   352  00006A                     	ds	4
   353  00006E                     _sample:
   354                           	opt stack 0
   355  00006E                     	ds	4
   356  000072                     _adc_val:
   357                           	opt stack 0
   358  000072                     	ds	4
   359  000076                     _ones:
   360                           	opt stack 0
   361  000076                     	ds	4
   362  00007A                     _ten:
   363                           	opt stack 0
   364  00007A                     	ds	4
   365  00007E                     _hundred:
   366                           	opt stack 0
   367  00007E                     	ds	4
   368  000082                     _thousand:
   369                           	opt stack 0
   370  000082                     	ds	4
   371  000086                     _i:
   372                           	opt stack 0
   373  000086                     	ds	4
   374  00008A                     _constt3:
   375                           	opt stack 0
   376  00008A                     	ds	4
   377  00008E                     _rezult3:
   378                           	opt stack 0
   379  00008E                     	ds	4
   380  000092                     _rezult2:
   381                           	opt stack 0
   382  000092                     	ds	4
   383  000096                     _calib:
   384                           	opt stack 0
   385  000096                     	ds	4
   386  00009A                     _rezz:
   387                           	opt stack 0
   388  00009A                     	ds	4
   389  00009E                     _rez:
   390                           	opt stack 0
   391  00009E                     	ds	4
   392  0000A2                     _rez4:
   393                           	opt stack 0
   394  0000A2                     	ds	4
   395  0000A6                     _rez3:
   396                           	opt stack 0
   397  0000A6                     	ds	4
   398  0000AA                     _rez2:
   399                           	opt stack 0
   400  0000AA                     	ds	4
   401  0000AE                     _rez1:
   402                           	opt stack 0
   403  0000AE                     	ds	4
   404  0000B2                     _charr:
   405                           	opt stack 0
   406  0000B2                     	ds	4
   407  0000B6                     _val:
   408                           	opt stack 0
   409  0000B6                     	ds	3
   410  0000B9                     _adc:
   411                           	opt stack 0
   412  0000B9                     	ds	1
   413  0000BA                     _cci:
   414                           	opt stack 0
   415  0000BA                     	ds	1
   416  0000BB                     _cct:
   417                           	opt stack 0
   418  0000BB                     	ds	1
   419  0000BC                     _gainst:
   420                           	opt stack 0
   421  0000BC                     	ds	1
   422  0000BD                     _ack2:
   423                           	opt stack 0
   424  0000BD                     	ds	1
   425  0000BE                     _ack1:
   426                           	opt stack 0
   427  0000BE                     	ds	1
   428  0000BF                     _rdy:
   429                           	opt stack 0
   430  0000BF                     	ds	1
   431  0000C0                     _b17:
   432                           	opt stack 0
   433  0000C0                     	ds	1
   434  0000C1                     _b16:
   435                           	opt stack 0
   436  0000C1                     	ds	1
   437  0000C2                     _b15:
   438                           	opt stack 0
   439  0000C2                     	ds	1
   440  0000C3                     _b14:
   441                           	opt stack 0
   442  0000C3                     	ds	1
   443  0000C4                     _b13:
   444                           	opt stack 0
   445  0000C4                     	ds	1
   446  0000C5                     _b12:
   447                           	opt stack 0
   448  0000C5                     	ds	1
   449  0000C6                     _b11:
   450                           	opt stack 0
   451  0000C6                     	ds	1
   452  0000C7                     _b10:
   453                           	opt stack 0
   454  0000C7                     	ds	1
   455  0000C8                     _b9:
   456                           	opt stack 0
   457  0000C8                     	ds	1
   458  0000C9                     _b8:
   459                           	opt stack 0
   460  0000C9                     	ds	1
   461  0000CA                     _b7:
   462                           	opt stack 0
   463  0000CA                     	ds	1
   464  0000CB                     _b6:
   465                           	opt stack 0
   466  0000CB                     	ds	1
   467  0000CC                     _b5:
   468                           	opt stack 0
   469  0000CC                     	ds	1
   470  0000CD                     _b4:
   471                           	opt stack 0
   472  0000CD                     	ds	1
   473  0000CE                     _b3:
   474                           	opt stack 0
   475  0000CE                     	ds	1
   476  0000CF                     _temp_val:
   477                           	opt stack 0
   478  0000CF                     	ds	4
   479                           tblptru	equ	0xFF8
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           
   483                           	psect	cstackBANK0
   484  0000D3                     __pcstackBANK0:
   485                           	opt stack 0
   486  0000D3                     main@cnt:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x0
   490  0000D3                     	ds	2
   491  0000D5                     main@buff:
   492                           	opt stack 0
   493                           
   494                           ; 10 bytes @ 0x2
   495  0000D5                     	ds	10
   496  0000DF                     main@weight:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0xC
   500  0000DF                     	ds	2
   501  0000E1                     main@address:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0xE
   505  0000E1                     	ds	4
   506                           tblptru	equ	0xFF8
   507                           postinc0	equ	0xFEE
   508                           wreg	equ	0xFE8
   509                           
   510                           	psect	cstackCOMRAM
   511  000001                     __pcstackCOMRAM:
   512                           	opt stack 0
   513  000001                     ?___ftpack:
   514                           	opt stack 0
   515  000001                     ?_ReadCount:
   516                           	opt stack 0
   517  000001                     ?___aldiv:
   518                           	opt stack 0
   519  000001                     ?___almod:
   520                           	opt stack 0
   521  000001                     MSdelay@val:
   522                           	opt stack 0
   523  000001                     delay@d:
   524                           	opt stack 0
   525  000001                     EEPROM_Write@address:
   526                           	opt stack 0
   527  000001                     EEPROM_Read@address:
   528                           	opt stack 0
   529  000001                     ___ftpack@arg:
   530                           	opt stack 0
   531  000001                     ___aldiv@dividend:
   532                           	opt stack 0
   533  000001                     ___almod@dividend:
   534                           	opt stack 0
   535                           
   536                           ; 4 bytes @ 0x0
   537  000001                     	ds	2
   538  000003                     ??_delay:
   539  000003                     ?_EEPROMReadlong:
   540                           	opt stack 0
   541  000003                     EEPROM_Write@data:
   542                           	opt stack 0
   543  000003                     MSdelay@i:
   544                           	opt stack 0
   545  000003                     EEPROMReadlong@address:
   546                           	opt stack 0
   547                           
   548                           ; 4 bytes @ 0x2
   549  000003                     	ds	1
   550  000004                     ___ftpack@exp:
   551                           	opt stack 0
   552  000004                     delay@i:
   553                           	opt stack 0
   554  000004                     EEPROMWritelong@address:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x3
   558  000004                     	ds	1
   559  000005                     ReadCount@i:
   560                           	opt stack 0
   561  000005                     ___ftpack@sign:
   562                           	opt stack 0
   563  000005                     MSdelay@j:
   564                           	opt stack 0
   565  000005                     ___aldiv@divisor:
   566                           	opt stack 0
   567  000005                     ___almod@divisor:
   568                           	opt stack 0
   569                           
   570                           ; 4 bytes @ 0x4
   571  000005                     	ds	1
   572  000006                     ??___ftpack:
   573  000006                     txr@temp:
   574                           	opt stack 0
   575  000006                     ReadCount@Count:
   576                           	opt stack 0
   577  000006                     EEPROMWritelong@value:
   578                           	opt stack 0
   579                           
   580                           ; 4 bytes @ 0x5
   581  000006                     	ds	1
   582  000007                     ??_EEPROMReadlong:
   583  000007                     ??_LCD_Command:
   584  000007                     LCD_Char@dat:
   585                           	opt stack 0
   586  000007                     send_string@str:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x6
   590  000007                     	ds	1
   591  000008                     LCD_Command@data:
   592                           	opt stack 0
   593  000008                     LCD_print@str:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x7
   597  000008                     	ds	1
   598  000009                     ??_send_string:
   599  000009                     ?___altoft:
   600                           	opt stack 0
   601  000009                     ?___awtoft:
   602                           	opt stack 0
   603  000009                     LCD_Command@cmd:
   604                           	opt stack 0
   605  000009                     ___aldiv@counter:
   606                           	opt stack 0
   607  000009                     ___almod@counter:
   608                           	opt stack 0
   609  000009                     ___awtoft@c:
   610                           	opt stack 0
   611  000009                     ___altoft@c:
   612                           	opt stack 0
   613                           
   614                           ; 4 bytes @ 0x8
   615  000009                     	ds	1
   616  00000A                     ??_LCD_print:
   617  00000A                     EEPROMWritelong@four:
   618                           	opt stack 0
   619  00000A                     ___aldiv@sign:
   620                           	opt stack 0
   621  00000A                     ___almod@sign:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x9
   625  00000A                     	ds	1
   626  00000B                     EEPROMWritelong@three:
   627                           	opt stack 0
   628  00000B                     send_string@sndstr_cnt:
   629                           	opt stack 0
   630  00000B                     ___aldiv@quotient:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0xA
   634  00000B                     	ds	1
   635  00000C                     EEPROMWritelong@two:
   636                           	opt stack 0
   637  00000C                     ___awtoft@sign:
   638                           	opt stack 0
   639  00000C                     LCD_print@sndstr_cnt:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0xB
   643  00000C                     	ds	1
   644  00000D                     ??___altoft:
   645  00000D                     EEPROMWritelong@one:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0xC
   649  00000D                     	ds	2
   650  00000F                     intToAscci@num:
   651                           	opt stack 0
   652                           
   653                           ; 4 bytes @ 0xE
   654  00000F                     	ds	2
   655  000011                     ___altoft@exp:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x10
   659  000011                     	ds	1
   660  000012                     ___altoft@sign:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x11
   664  000012                     	ds	1
   665  000013                     ?___ftdiv:
   666                           	opt stack 0
   667  000013                     intToAscci@str:
   668                           	opt stack 0
   669  000013                     ___ftdiv@f1:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x12
   673  000013                     	ds	2
   674  000015                     intToAscci@rem:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x14
   678  000015                     	ds	1
   679  000016                     ___ftdiv@f2:
   680                           	opt stack 0
   681                           
   682                           ; 3 bytes @ 0x15
   683  000016                     	ds	1
   684  000017                     intToAscci@tempCount:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x16
   688  000017                     	ds	2
   689  000019                     ??___ftdiv:
   690  000019                     intToAscci@temp_num:
   691                           	opt stack 0
   692                           
   693                           ; 4 bytes @ 0x18
   694  000019                     	ds	3
   695  00001C                     ___ftdiv@cntr:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x1B
   699  00001C                     	ds	1
   700  00001D                     intToAscci@counter:
   701                           	opt stack 0
   702  00001D                     ___ftdiv@f3:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x1C
   706  00001D                     	ds	3
   707  000020                     ___ftdiv@exp:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x1F
   711  000020                     	ds	1
   712  000021                     ___ftdiv@sign:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x20
   716  000021                     	ds	1
   717  000022                     ?___ftmul:
   718                           	opt stack 0
   719  000022                     ___ftmul@f1:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x21
   723  000022                     	ds	1
   724  000023                     EEPROMReadlong@four:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x22
   728  000023                     	ds	2
   729  000025                     ___ftmul@f2:
   730                           	opt stack 0
   731                           
   732                           ; 3 bytes @ 0x24
   733  000025                     	ds	2
   734  000027                     EEPROMReadlong@three:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0x26
   738  000027                     	ds	1
   739  000028                     ??___ftmul:
   740                           
   741                           ; 1 bytes @ 0x27
   742  000028                     	ds	3
   743  00002B                     ___ftmul@exp:
   744                           	opt stack 0
   745  00002B                     EEPROMReadlong@two:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x2A
   749  00002B                     	ds	1
   750  00002C                     ___ftmul@f3_as_product:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0x2B
   754  00002C                     	ds	3
   755  00002F                     ___ftmul@cntr:
   756                           	opt stack 0
   757  00002F                     EEPROMReadlong@one:
   758                           	opt stack 0
   759                           
   760                           ; 4 bytes @ 0x2E
   761  00002F                     	ds	1
   762  000030                     ___ftmul@sign:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x2F
   766  000030                     	ds	1
   767  000031                     ?___ftneg:
   768                           	opt stack 0
   769  000031                     ___ftneg@f1:
   770                           	opt stack 0
   771                           
   772                           ; 3 bytes @ 0x30
   773  000031                     	ds	2
   774  000033                     ??_calibrate:
   775                           
   776                           ; 1 bytes @ 0x32
   777  000033                     	ds	1
   778  000034                     ?___ftadd:
   779                           	opt stack 0
   780  000034                     ___ftadd@f1:
   781                           	opt stack 0
   782                           
   783                           ; 3 bytes @ 0x33
   784  000034                     	ds	3
   785  000037                     ___ftadd@f2:
   786                           	opt stack 0
   787                           
   788                           ; 3 bytes @ 0x36
   789  000037                     	ds	3
   790  00003A                     ??___ftadd:
   791                           
   792                           ; 1 bytes @ 0x39
   793  00003A                     	ds	1
   794  00003B                     calibrate@buff:
   795                           	opt stack 0
   796                           
   797                           ; 10 bytes @ 0x3A
   798  00003B                     	ds	2
   799  00003D                     ___ftadd@sign:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x3C
   803  00003D                     	ds	1
   804  00003E                     ___ftadd@exp2:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x3D
   808  00003E                     	ds	1
   809  00003F                     ___ftadd@exp1:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x3E
   813  00003F                     	ds	1
   814  000040                     ?___fttol:
   815                           	opt stack 0
   816  000040                     ___fttol@f1:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x3F
   820  000040                     	ds	4
   821  000044                     ??___fttol:
   822                           
   823                           ; 1 bytes @ 0x43
   824  000044                     	ds	1
   825  000045                     calibrate@temp_val_local:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x44
   829  000045                     	ds	4
   830  000049                     ___fttol@sign1:
   831                           	opt stack 0
   832  000049                     calibrate@i:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x48
   836  000049                     	ds	1
   837  00004A                     ___fttol@lval:
   838                           	opt stack 0
   839                           
   840                           ; 4 bytes @ 0x49
   841  00004A                     	ds	1
   842  00004B                     calibrate@i_424:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x4A
   846  00004B                     	ds	2
   847  00004D                     calibrate@address:
   848                           	opt stack 0
   849                           
   850                           ; 4 bytes @ 0x4C
   851  00004D                     	ds	1
   852  00004E                     ___fttol@exp1:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x4D
   856  00004E                     	ds	1
   857  00004F                     USART_Init@baud_rate:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x4E
   861  00004F                     	ds	2
   862  000051                     USART_Init@temp:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0x50
   866  000051                     	ds	3
   867  000054                     ??_main:
   868                           
   869                           ; 1 bytes @ 0x53
   870  000054                     	ds	8
   871                           tblptru	equ	0xFF8
   872                           postinc0	equ	0xFEE
   873                           wreg	equ	0xFE8
   874                           
   875 ;;
   876 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   877 ;;
   878 ;; *************** function _main *****************
   879 ;; Defined at:
   880 ;;		line 131 in file "main.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;		None
   883 ;; Auto vars:     Size  Location     Type
   884 ;;  buff           10    2[BANK0 ] unsigned char [10]
   885 ;;  buff1          10    0        unsigned char [10]
   886 ;;  address         4   14[BANK0 ] long 
   887 ;;  weight          2   12[BANK0 ] int 
   888 ;;  cnt             2    0[BANK0 ] int 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  1    wreg      void 
   891 ;; Registers used:
   892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   898 ;;      Params:         0       0       0       0       0       0       0       0       0
   899 ;;      Locals:         0      18       0       0       0       0       0       0       0
   900 ;;      Temps:          8       0       0       0       0       0       0       0       0
   901 ;;      Totals:         8      18       0       0       0       0       0       0       0
   902 ;;Total ram usage:       26 bytes
   903 ;; Hardware stack levels required when called:    4
   904 ;; This function calls:
   905 ;;		_EEPROMReadlong
   906 ;;		_LCD_Clear
   907 ;;		_LCD_Command
   908 ;;		_LCD_print
   909 ;;		_MSdelay
   910 ;;		_ReadCount
   911 ;;		_USART_Init
   912 ;;		_USART_newline
   913 ;;		___altoft
   914 ;;		___ftadd
   915 ;;		___ftdiv
   916 ;;		___ftmul
   917 ;;		___ftneg
   918 ;;		___fttol
   919 ;;		_calibrate
   920 ;;		_init
   921 ;;		_intToAscci
   922 ;;		_send_string
   923 ;; This function is called by:
   924 ;;		Startup code after reset
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           	psect	text0
   929  000CBC                     __ptext0:
   930                           	opt stack 0
   931  000CBC                     _main:
   932                           	opt stack 27
   933                           
   934                           ;main.c: 132: char buff[10];
   935                           ;main.c: 133: long address = 0;
   936                           
   937                           ;incstack = 0
   938  000CBC  0E00               	movlw	0
   939  000CBE  0100               	movlb	0	; () banked
   940  000CC0  6FE1               	movwf	main@address& (0+255),b
   941  000CC2  0E00               	movlw	0
   942  000CC4  6FE2               	movwf	(main@address+1)& (0+255),b
   943  000CC6  0E00               	movlw	0
   944  000CC8  6FE3               	movwf	(main@address+2)& (0+255),b
   945  000CCA  0E00               	movlw	0
   946  000CCC  6FE4               	movwf	(main@address+3)& (0+255),b
   947                           
   948                           ;main.c: 134: int weight = 0;
   949  000CCE  0E00               	movlw	0
   950  000CD0  6FE0               	movwf	(main@weight+1)& (0+255),b
   951  000CD2  0E00               	movlw	0
   952  000CD4  6FDF               	movwf	main@weight& (0+255),b
   953                           
   954                           ;main.c: 135: int cnt = 0;
   955  000CD6  0E00               	movlw	0
   956  000CD8  6FD4               	movwf	(main@cnt+1)& (0+255),b
   957  000CDA  0E00               	movlw	0
   958  000CDC  6FD3               	movwf	main@cnt& (0+255),b
   959                           
   960                           ;main.c: 136: char buff1[10];
   961                           ;main.c: 138: TRISB = 0;
   962  000CDE  0E00               	movlw	0
   963  000CE0  6E93               	movwf	3987,c	;volatile
   964                           
   965                           ;main.c: 139: OSCCON = 0x72;
   966  000CE2  0E72               	movlw	114
   967  000CE4  6ED3               	movwf	4051,c	;volatile
   968                           
   969                           ; BSR set to: 0
   970                           ;main.c: 142: init();
   971  000CE6  ECCC  F00D         	call	_init	;wreg free
   972                           
   973                           ;main.c: 143: MSdelay(3);
   974  000CEA  0E00               	movlw	0
   975  000CEC  6E02               	movwf	MSdelay@val+1,c
   976  000CEE  0E03               	movlw	3
   977  000CF0  6E01               	movwf	MSdelay@val,c
   978  000CF2  EC5B  F00E         	call	_MSdelay	;wreg free
   979                           
   980                           ;main.c: 144: USART_Init(9600);
   981  000CF6  0E25               	movlw	37
   982  000CF8  6E50               	movwf	USART_Init@baud_rate+1,c
   983  000CFA  0E80               	movlw	128
   984  000CFC  6E4F               	movwf	USART_Init@baud_rate,c
   985  000CFE  EC21  F00D         	call	_USART_Init	;wreg free
   986                           
   987                           ;main.c: 145: USART_newline();
   988  000D02  EC25  F00F         	call	_USART_newline	;wreg free
   989                           
   990                           ;main.c: 146: send_string("23:50:26");
   991  000D06  0E86               	movlw	low STR_1
   992  000D08  6E07               	movwf	send_string@str,c
   993  000D0A  0E08               	movlw	high STR_1
   994  000D0C  6E08               	movwf	send_string@str+1,c
   995  000D0E  EC5A  F00D         	call	_send_string	;wreg free
   996                           
   997                           ;main.c: 147: USART_newline();
   998  000D12  EC25  F00F         	call	_USART_newline	;wreg free
   999                           
  1000                           ;main.c: 148: send_string ("Jul 29 2018");
  1001  000D16  0E59               	movlw	low STR_2
  1002  000D18  6E07               	movwf	send_string@str,c
  1003  000D1A  0E08               	movlw	high STR_2
  1004  000D1C  6E08               	movwf	send_string@str+1,c
  1005  000D1E  EC5A  F00D         	call	_send_string	;wreg free
  1006                           
  1007                           ;main.c: 149: USART_newline();
  1008  000D22  EC25  F00F         	call	_USART_newline	;wreg free
  1009                           
  1010                           ;main.c: 151: address = 0;
  1011  000D26  0E00               	movlw	0
  1012  000D28  0100               	movlb	0	; () banked
  1013  000D2A  6FE1               	movwf	main@address& (0+255),b
  1014  000D2C  0E00               	movlw	0
  1015  000D2E  6FE2               	movwf	(main@address+1)& (0+255),b
  1016  000D30  0E00               	movlw	0
  1017  000D32  6FE3               	movwf	(main@address+2)& (0+255),b
  1018  000D34  0E00               	movlw	0
  1019  000D36  6FE4               	movwf	(main@address+3)& (0+255),b
  1020                           
  1021                           ; BSR set to: 0
  1022                           ;main.c: 152: sample = EEPROMReadlong(address);
  1023  000D38  C0E1  F003         	movff	main@address,EEPROMReadlong@address
  1024  000D3C  C0E2  F004         	movff	main@address+1,EEPROMReadlong@address+1
  1025  000D40  C0E3  F005         	movff	main@address+2,EEPROMReadlong@address+2
  1026  000D44  C0E4  F006         	movff	main@address+3,EEPROMReadlong@address+3
  1027  000D48  EC97  F009         	call	_EEPROMReadlong	;wreg free
  1028  000D4C  C003  F06E         	movff	?_EEPROMReadlong,_sample
  1029  000D50  C004  F06F         	movff	?_EEPROMReadlong+1,_sample+1
  1030  000D54  C005  F070         	movff	?_EEPROMReadlong+2,_sample+2
  1031  000D58  C006  F071         	movff	?_EEPROMReadlong+3,_sample+3
  1032                           
  1033                           ;main.c: 153: address += 4;
  1034  000D5C  0E04               	movlw	4
  1035  000D5E  0100               	movlb	0	; () banked
  1036  000D60  27E1               	addwf	main@address& (0+255),f,b
  1037  000D62  0E00               	movlw	0
  1038  000D64  23E2               	addwfc	(main@address+1)& (0+255),f,b
  1039  000D66  23E3               	addwfc	(main@address+2)& (0+255),f,b
  1040  000D68  23E4               	addwfc	(main@address+3)& (0+255),f,b
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;main.c: 154: temp_val = EEPROMReadlong(address);
  1044  000D6A  C0E1  F003         	movff	main@address,EEPROMReadlong@address
  1045  000D6E  C0E2  F004         	movff	main@address+1,EEPROMReadlong@address+1
  1046  000D72  C0E3  F005         	movff	main@address+2,EEPROMReadlong@address+2
  1047  000D76  C0E4  F006         	movff	main@address+3,EEPROMReadlong@address+3
  1048  000D7A  EC97  F009         	call	_EEPROMReadlong	;wreg free
  1049  000D7E  C003  F0CF         	movff	?_EEPROMReadlong,_temp_val
  1050  000D82  C004  F0D0         	movff	?_EEPROMReadlong+1,_temp_val+1
  1051  000D86  C005  F0D1         	movff	?_EEPROMReadlong+2,_temp_val+2
  1052  000D8A  C006  F0D2         	movff	?_EEPROMReadlong+3,_temp_val+3
  1053                           
  1054                           ;main.c: 155: val = -1 * (temp_val);
  1055  000D8E  C0CF  F054         	movff	_temp_val,??_main
  1056  000D92  C0D0  F055         	movff	_temp_val+1,??_main+1
  1057  000D96  C0D1  F056         	movff	_temp_val+2,??_main+2
  1058  000D9A  C0D2  F057         	movff	_temp_val+3,??_main+3
  1059  000D9E  1E54               	comf	??_main,f,c
  1060  000DA0  1E55               	comf	??_main+1,f,c
  1061  000DA2  1E56               	comf	??_main+2,f,c
  1062  000DA4  1E57               	comf	??_main+3,f,c
  1063  000DA6  2A54               	incf	??_main,f,c
  1064  000DA8  0E00               	movlw	0
  1065  000DAA  2255               	addwfc	??_main+1,f,c
  1066  000DAC  2256               	addwfc	??_main+2,f,c
  1067  000DAE  2257               	addwfc	??_main+3,f,c
  1068  000DB0  C054  F009         	movff	??_main,___altoft@c
  1069  000DB4  C055  F00A         	movff	??_main+1,___altoft@c+1
  1070  000DB8  C056  F00B         	movff	??_main+2,___altoft@c+2
  1071  000DBC  C057  F00C         	movff	??_main+3,___altoft@c+3
  1072  000DC0  ECE5  F00C         	call	___altoft	;wreg free
  1073  000DC4  C009  F0B6         	movff	?___altoft,_val
  1074  000DC8  C00A  F0B7         	movff	?___altoft+1,_val+1
  1075  000DCC  C00B  F0B8         	movff	?___altoft+2,_val+2
  1076                           
  1077                           ;main.c: 156: val = val / 300.0;
  1078  000DD0  C0B6  F013         	movff	_val,___ftdiv@f1
  1079  000DD4  C0B7  F014         	movff	_val+1,___ftdiv@f1+1
  1080  000DD8  C0B8  F015         	movff	_val+2,___ftdiv@f1+2
  1081  000DDC  0E00               	movlw	0
  1082  000DDE  6E16               	movwf	___ftdiv@f2,c
  1083  000DE0  0E96               	movlw	150
  1084  000DE2  6E17               	movwf	___ftdiv@f2+1,c
  1085  000DE4  0E43               	movlw	67
  1086  000DE6  6E18               	movwf	___ftdiv@f2+2,c
  1087  000DE8  EC20  F00B         	call	___ftdiv	;wreg free
  1088  000DEC  C013  F0B6         	movff	?___ftdiv,_val
  1089  000DF0  C014  F0B7         	movff	?___ftdiv+1,_val+1
  1090  000DF4  C015  F0B8         	movff	?___ftdiv+2,_val+2
  1091                           
  1092                           ;main.c: 158: send_string("sample: ");
  1093  000DF8  0E7D               	movlw	low STR_3
  1094  000DFA  6E07               	movwf	send_string@str,c
  1095  000DFC  0E08               	movlw	high STR_3
  1096  000DFE  6E08               	movwf	send_string@str+1,c
  1097  000E00  EC5A  F00D         	call	_send_string	;wreg free
  1098                           
  1099                           ;main.c: 159: intToAscci(sample, buff);
  1100  000E04  C06E  F00F         	movff	_sample,intToAscci@num
  1101  000E08  C06F  F010         	movff	_sample+1,intToAscci@num+1
  1102  000E0C  C070  F011         	movff	_sample+2,intToAscci@num+2
  1103  000E10  C071  F012         	movff	_sample+3,intToAscci@num+3
  1104  000E14  0ED5               	movlw	low main@buff
  1105  000E16  6E13               	movwf	intToAscci@str,c
  1106  000E18  0E00               	movlw	high main@buff
  1107  000E1A  6E14               	movwf	intToAscci@str+1,c
  1108  000E1C  ECFC  F008         	call	_intToAscci	;wreg free
  1109                           
  1110                           ;main.c: 160: send_string(buff);
  1111  000E20  0ED5               	movlw	low main@buff
  1112  000E22  6E07               	movwf	send_string@str,c
  1113  000E24  0E00               	movlw	high main@buff
  1114  000E26  6E08               	movwf	send_string@str+1,c
  1115  000E28  EC5A  F00D         	call	_send_string	;wreg free
  1116                           
  1117                           ;main.c: 161: USART_newline();
  1118  000E2C  EC25  F00F         	call	_USART_newline	;wreg free
  1119                           
  1120                           ;main.c: 163: send_string("val: ");
  1121  000E30  0E8F               	movlw	low STR_4
  1122  000E32  6E07               	movwf	send_string@str,c
  1123  000E34  0E08               	movlw	high STR_4
  1124  000E36  6E08               	movwf	send_string@str+1,c
  1125  000E38  EC5A  F00D         	call	_send_string	;wreg free
  1126                           
  1127                           ;main.c: 164: intToAscci(temp_val, buff);
  1128  000E3C  C0CF  F00F         	movff	_temp_val,intToAscci@num
  1129  000E40  C0D0  F010         	movff	_temp_val+1,intToAscci@num+1
  1130  000E44  C0D1  F011         	movff	_temp_val+2,intToAscci@num+2
  1131  000E48  C0D2  F012         	movff	_temp_val+3,intToAscci@num+3
  1132  000E4C  0ED5               	movlw	low main@buff
  1133  000E4E  6E13               	movwf	intToAscci@str,c
  1134  000E50  0E00               	movlw	high main@buff
  1135  000E52  6E14               	movwf	intToAscci@str+1,c
  1136  000E54  ECFC  F008         	call	_intToAscci	;wreg free
  1137                           
  1138                           ;main.c: 165: send_string(buff);
  1139  000E58  0ED5               	movlw	low main@buff
  1140  000E5A  6E07               	movwf	send_string@str,c
  1141  000E5C  0E00               	movlw	high main@buff
  1142  000E5E  6E08               	movwf	send_string@str+1,c
  1143  000E60  EC5A  F00D         	call	_send_string	;wreg free
  1144                           
  1145                           ;main.c: 166: USART_newline();
  1146  000E64  EC25  F00F         	call	_USART_newline	;wreg free
  1147                           
  1148                           ;main.c: 168: if (sample == 0)
  1149  000E68  0100               	movlb	0	; () banked
  1150  000E6A  516E               	movf	_sample& (0+255),w,b
  1151  000E6C  116F               	iorwf	(_sample+1)& (0+255),w,b
  1152  000E6E  1170               	iorwf	(_sample+2)& (0+255),w,b
  1153  000E70  1171               	iorwf	(_sample+3)& (0+255),w,b
  1154  000E72  B4D8               	btfsc	status,2,c
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 169: {
  1158                           ;main.c: 171: calibrate();
  1159  000E74  EC4E  F004         	call	_calibrate	;wreg free
  1160                           
  1161                           ;main.c: 172: }
  1162                           ;main.c: 174: LCD_Clear();
  1163  000E78  EC1B  F00F         	call	_LCD_Clear	;wreg free
  1164  000E7C                     
  1165                           ;main.c: 177: {
  1166                           ;main.c: 179: if (PORTBbits.RB1 == 0)
  1167  000E7C  B281               	btfsc	3969,1,c	;volatile
  1168  000E7E  D01D               	goto	l161
  1169                           
  1170                           ;main.c: 180: {
  1171                           ;main.c: 182: val = 0;
  1172  000E80  0E00               	movlw	0
  1173  000E82  0100               	movlb	0	; () banked
  1174  000E84  6FB6               	movwf	_val& (0+255),b
  1175  000E86  0E00               	movlw	0
  1176  000E88  6FB7               	movwf	(_val+1)& (0+255),b
  1177  000E8A  0E00               	movlw	0
  1178  000E8C  6FB8               	movwf	(_val+2)& (0+255),b
  1179                           
  1180                           ;main.c: 183: sample = 0;
  1181  000E8E  0E00               	movlw	0
  1182  000E90  6F6E               	movwf	_sample& (0+255),b
  1183  000E92  0E00               	movlw	0
  1184  000E94  6F6F               	movwf	(_sample+1)& (0+255),b
  1185  000E96  0E00               	movlw	0
  1186  000E98  6F70               	movwf	(_sample+2)& (0+255),b
  1187  000E9A  0E00               	movlw	0
  1188  000E9C  6F71               	movwf	(_sample+3)& (0+255),b
  1189                           
  1190                           ;main.c: 184: weight = 0;
  1191  000E9E  0E00               	movlw	0
  1192  000EA0  6FE0               	movwf	(main@weight+1)& (0+255),b
  1193  000EA2  0E00               	movlw	0
  1194  000EA4  6FDF               	movwf	main@weight& (0+255),b
  1195                           
  1196                           ;main.c: 185: count = 0;
  1197  000EA6  0E00               	movlw	0
  1198  000EA8  6F6A               	movwf	_count& (0+255),b
  1199  000EAA  0E00               	movlw	0
  1200  000EAC  6F6B               	movwf	(_count+1)& (0+255),b
  1201  000EAE  0E00               	movlw	0
  1202  000EB0  6F6C               	movwf	(_count+2)& (0+255),b
  1203  000EB2  0E00               	movlw	0
  1204  000EB4  6F6D               	movwf	(_count+3)& (0+255),b
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;main.c: 187: calibrate();
  1208  000EB6  EC4E  F004         	call	_calibrate	;wreg free
  1209  000EBA                     l161:
  1210                           
  1211                           ;main.c: 188: }
  1212                           ;main.c: 191: count = (long)ReadCount();
  1213  000EBA  ECA6  F00C         	call	_ReadCount	;wreg free
  1214  000EBE  C001  F06A         	movff	?_ReadCount,_count
  1215  000EC2  C002  F06B         	movff	?_ReadCount+1,_count+1
  1216  000EC6  C003  F06C         	movff	?_ReadCount+2,_count+2
  1217  000ECA  C004  F06D         	movff	?_ReadCount+3,_count+3
  1218                           
  1219                           ;main.c: 192: weight = (((count - sample) / val) - 2 * ((count - sample) / val));
  1220  000ECE  0E00               	movlw	0
  1221  000ED0  6E25               	movwf	___ftmul@f2,c
  1222  000ED2  0E00               	movlw	0
  1223  000ED4  6E26               	movwf	___ftmul@f2+1,c
  1224  000ED6  0E40               	movlw	64
  1225  000ED8  6E27               	movwf	___ftmul@f2+2,c
  1226  000EDA  C0B6  F016         	movff	_val,___ftdiv@f2
  1227  000EDE  C0B7  F017         	movff	_val+1,___ftdiv@f2+1
  1228  000EE2  C0B8  F018         	movff	_val+2,___ftdiv@f2+2
  1229  000EE6  C06E  F054         	movff	_sample,??_main
  1230  000EEA  C06F  F055         	movff	_sample+1,??_main+1
  1231  000EEE  C070  F056         	movff	_sample+2,??_main+2
  1232  000EF2  C071  F057         	movff	_sample+3,??_main+3
  1233  000EF6  1E54               	comf	??_main,f,c
  1234  000EF8  1E55               	comf	??_main+1,f,c
  1235  000EFA  1E56               	comf	??_main+2,f,c
  1236  000EFC  1E57               	comf	??_main+3,f,c
  1237  000EFE  2A54               	incf	??_main,f,c
  1238  000F00  0E00               	movlw	0
  1239  000F02  2255               	addwfc	??_main+1,f,c
  1240  000F04  2256               	addwfc	??_main+2,f,c
  1241  000F06  2257               	addwfc	??_main+3,f,c
  1242  000F08  0100               	movlb	0	; () banked
  1243  000F0A  516A               	movf	_count& (0+255),w,b
  1244  000F0C  2454               	addwf	??_main,w,c
  1245  000F0E  6E09               	movwf	___altoft@c,c
  1246  000F10  516B               	movf	(_count+1)& (0+255),w,b
  1247  000F12  2055               	addwfc	??_main+1,w,c
  1248  000F14  6E0A               	movwf	___altoft@c+1,c
  1249  000F16  516C               	movf	(_count+2)& (0+255),w,b
  1250  000F18  2056               	addwfc	??_main+2,w,c
  1251  000F1A  6E0B               	movwf	___altoft@c+2,c
  1252  000F1C  516D               	movf	(_count+3)& (0+255),w,b
  1253  000F1E  2057               	addwfc	??_main+3,w,c
  1254  000F20  6E0C               	movwf	___altoft@c+3,c
  1255  000F22  ECE5  F00C         	call	___altoft	;wreg free
  1256  000F26  C009  F013         	movff	?___altoft,___ftdiv@f1
  1257  000F2A  C00A  F014         	movff	?___altoft+1,___ftdiv@f1+1
  1258  000F2E  C00B  F015         	movff	?___altoft+2,___ftdiv@f1+2
  1259  000F32  EC20  F00B         	call	___ftdiv	;wreg free
  1260  000F36  C013  F022         	movff	?___ftdiv,___ftmul@f1
  1261  000F3A  C014  F023         	movff	?___ftdiv+1,___ftmul@f1+1
  1262  000F3E  C015  F024         	movff	?___ftdiv+2,___ftmul@f1+2
  1263  000F42  ECA6  F00A         	call	___ftmul	;wreg free
  1264  000F46  C022  F031         	movff	?___ftmul,___ftneg@f1
  1265  000F4A  C023  F032         	movff	?___ftmul+1,___ftneg@f1+1
  1266  000F4E  C024  F033         	movff	?___ftmul+2,___ftneg@f1+2
  1267  000F52  ECEE  F00E         	call	___ftneg	;wreg free
  1268  000F56  C031  F037         	movff	?___ftneg,___ftadd@f2
  1269  000F5A  C032  F038         	movff	?___ftneg+1,___ftadd@f2+1
  1270  000F5E  C033  F039         	movff	?___ftneg+2,___ftadd@f2+2
  1271  000F62  C0B6  F016         	movff	_val,___ftdiv@f2
  1272  000F66  C0B7  F017         	movff	_val+1,___ftdiv@f2+1
  1273  000F6A  C0B8  F018         	movff	_val+2,___ftdiv@f2+2
  1274  000F6E  C06E  F058         	movff	_sample,??_main+4
  1275  000F72  C06F  F059         	movff	_sample+1,??_main+5
  1276  000F76  C070  F05A         	movff	_sample+2,??_main+6
  1277  000F7A  C071  F05B         	movff	_sample+3,??_main+7
  1278  000F7E  1E58               	comf	??_main+4,f,c
  1279  000F80  1E59               	comf	??_main+5,f,c
  1280  000F82  1E5A               	comf	??_main+6,f,c
  1281  000F84  1E5B               	comf	??_main+7,f,c
  1282  000F86  2A58               	incf	??_main+4,f,c
  1283  000F88  0E00               	movlw	0
  1284  000F8A  2259               	addwfc	??_main+5,f,c
  1285  000F8C  225A               	addwfc	??_main+6,f,c
  1286  000F8E  225B               	addwfc	??_main+7,f,c
  1287  000F90  0100               	movlb	0	; () banked
  1288  000F92  516A               	movf	_count& (0+255),w,b
  1289  000F94  2458               	addwf	??_main+4,w,c
  1290  000F96  6E09               	movwf	___altoft@c,c
  1291  000F98  516B               	movf	(_count+1)& (0+255),w,b
  1292  000F9A  2059               	addwfc	??_main+5,w,c
  1293  000F9C  6E0A               	movwf	___altoft@c+1,c
  1294  000F9E  516C               	movf	(_count+2)& (0+255),w,b
  1295  000FA0  205A               	addwfc	??_main+6,w,c
  1296  000FA2  6E0B               	movwf	___altoft@c+2,c
  1297  000FA4  516D               	movf	(_count+3)& (0+255),w,b
  1298  000FA6  205B               	addwfc	??_main+7,w,c
  1299  000FA8  6E0C               	movwf	___altoft@c+3,c
  1300  000FAA  ECE5  F00C         	call	___altoft	;wreg free
  1301  000FAE  C009  F013         	movff	?___altoft,___ftdiv@f1
  1302  000FB2  C00A  F014         	movff	?___altoft+1,___ftdiv@f1+1
  1303  000FB6  C00B  F015         	movff	?___altoft+2,___ftdiv@f1+2
  1304  000FBA  EC20  F00B         	call	___ftdiv	;wreg free
  1305  000FBE  C013  F034         	movff	?___ftdiv,___ftadd@f1
  1306  000FC2  C014  F035         	movff	?___ftdiv+1,___ftadd@f1+1
  1307  000FC6  C015  F036         	movff	?___ftdiv+2,___ftadd@f1+2
  1308  000FCA  EC26  F008         	call	___ftadd	;wreg free
  1309  000FCE  C034  F040         	movff	?___ftadd,___fttol@f1
  1310  000FD2  C035  F041         	movff	?___ftadd+1,___fttol@f1+1
  1311  000FD6  C036  F042         	movff	?___ftadd+2,___fttol@f1+2
  1312  000FDA  EC2C  F00A         	call	___fttol	;wreg free
  1313  000FDE  C040  F0DF         	movff	?___fttol,main@weight
  1314  000FE2  C041  F0E0         	movff	?___fttol+1,main@weight+1
  1315                           
  1316                           ;main.c: 195: intToAscci(weight, buff);
  1317  000FE6  C0DF  F00F         	movff	main@weight,intToAscci@num
  1318  000FEA  C0E0  F010         	movff	main@weight+1,intToAscci@num+1
  1319  000FEE  0E00               	movlw	0
  1320  000FF0  BE10               	btfsc	intToAscci@num+1,7,c
  1321  000FF2  0EFF               	movlw	-1
  1322  000FF4  6E11               	movwf	intToAscci@num+2,c
  1323  000FF6  6E12               	movwf	intToAscci@num+3,c
  1324  000FF8  0ED5               	movlw	low main@buff
  1325  000FFA  6E13               	movwf	intToAscci@str,c
  1326  000FFC  0E00               	movlw	high main@buff
  1327  000FFE  6E14               	movwf	intToAscci@str+1,c
  1328  001000  ECFC  F008         	call	_intToAscci	;wreg free
  1329                           
  1330                           ;main.c: 196: send_string(buff);
  1331  001004  0ED5               	movlw	low main@buff
  1332  001006  6E07               	movwf	send_string@str,c
  1333  001008  0E00               	movlw	high main@buff
  1334  00100A  6E08               	movwf	send_string@str+1,c
  1335  00100C  EC5A  F00D         	call	_send_string	;wreg free
  1336                           
  1337                           ;main.c: 197: send_string("  gm");
  1338  001010  0E95               	movlw	low STR_5
  1339  001012  6E07               	movwf	send_string@str,c
  1340  001014  0E08               	movlw	high STR_5
  1341  001016  6E08               	movwf	send_string@str+1,c
  1342  001018  EC5A  F00D         	call	_send_string	;wreg free
  1343                           
  1344                           ;main.c: 198: USART_newline();
  1345  00101C  EC25  F00F         	call	_USART_newline	;wreg free
  1346                           
  1347                           ;main.c: 200: LCD_Command(0x02);
  1348  001020  0E02               	movlw	2
  1349  001022  EC2D  F00E         	call	_LCD_Command
  1350                           
  1351                           ;main.c: 201: LCD_print(buff);
  1352  001026  0ED5               	movlw	low main@buff
  1353  001028  6E08               	movwf	LCD_print@str,c
  1354  00102A  0E00               	movlw	high main@buff
  1355  00102C  6E09               	movwf	LCD_print@str+1,c
  1356  00102E  EC93  F00D         	call	_LCD_print	;wreg free
  1357                           
  1358                           ;main.c: 202: LCD_print(" gm");
  1359  001032  0E96               	movlw	low (STR_5+1)
  1360  001034  6E08               	movwf	LCD_print@str,c
  1361  001036  0E08               	movlw	high (STR_5+1)
  1362  001038  6E09               	movwf	LCD_print@str+1,c
  1363  00103A  EC93  F00D         	call	_LCD_print	;wreg free
  1364                           
  1365                           ;main.c: 203: MSdelay(10);
  1366  00103E  0E00               	movlw	0
  1367  001040  6E02               	movwf	MSdelay@val+1,c
  1368  001042  0E0A               	movlw	10
  1369  001044  6E01               	movwf	MSdelay@val,c
  1370  001046  EC5B  F00E         	call	_MSdelay	;wreg free
  1371  00104A  D718               	goto	l160
  1372  00104C                     __end_of_main:
  1373                           	opt stack 0
  1374                           tblptru	equ	0xFF8
  1375                           postinc0	equ	0xFEE
  1376                           wreg	equ	0xFE8
  1377                           status	equ	0xFD8
  1378                           
  1379 ;; *************** function _init *****************
  1380 ;; Defined at:
  1381 ;;		line 328 in file "main.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;		None
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;		None
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  1    wreg      void 
  1388 ;; Registers used:
  1389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1395 ;;      Params:         0       0       0       0       0       0       0       0       0
  1396 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1397 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1398 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1399 ;;Total ram usage:        0 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    3
  1402 ;; This function calls:
  1403 ;;		_LCD_Init
  1404 ;;		_LCD_print
  1405 ;;		_MSdelay
  1406 ;;		_USART_Init
  1407 ;; This function is called by:
  1408 ;;		_main
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text1
  1413  001B98                     __ptext1:
  1414                           	opt stack 0
  1415  001B98                     _init:
  1416                           	opt stack 27
  1417                           
  1418                           ;main.c: 331: ADCON1 = 0b00001111;
  1419                           
  1420                           ;incstack = 0
  1421  001B98  0E0F               	movlw	15
  1422  001B9A  6EC1               	movwf	4033,c	;volatile
  1423                           
  1424                           ;main.c: 332: CMCON = 0b00000111;
  1425  001B9C  0E07               	movlw	7
  1426  001B9E  6EB4               	movwf	4020,c	;volatile
  1427                           
  1428                           ;main.c: 333: CVRCON = 0;
  1429  001BA0  0E00               	movlw	0
  1430  001BA2  6EB5               	movwf	4021,c	;volatile
  1431                           
  1432                           ;main.c: 334: UCON = 0;
  1433  001BA4  0E00               	movlw	0
  1434  001BA6  6E6D               	movwf	3949,c	;volatile
  1435                           
  1436                           ;main.c: 335: CCP1CON = 0;
  1437  001BA8  0E00               	movlw	0
  1438  001BAA  6EBD               	movwf	4029,c	;volatile
  1439                           
  1440                           ;main.c: 336: CCP2CON = 0;
  1441  001BAC  0E00               	movlw	0
  1442  001BAE  6EBA               	movwf	4026,c	;volatile
  1443                           
  1444                           ;main.c: 338: TRISBbits.TRISB1 = 1;
  1445  001BB0  8293               	bsf	3987,1,c	;volatile
  1446                           
  1447                           ;main.c: 339: TRISBbits.TRISB0 = 1;
  1448  001BB2  8093               	bsf	3987,0,c	;volatile
  1449                           
  1450                           ;main.c: 340: TRISBbits.TRISB2 = 1;
  1451  001BB4  8493               	bsf	3987,2,c	;volatile
  1452                           
  1453                           ;main.c: 341: calib = 0;
  1454  001BB6  0E00               	movlw	0
  1455  001BB8  0100               	movlb	0	; () banked
  1456  001BBA  6F96               	movwf	_calib& (0+255),b
  1457  001BBC  0E00               	movlw	0
  1458  001BBE  6F97               	movwf	(_calib+1)& (0+255),b
  1459  001BC0  0E00               	movlw	0
  1460  001BC2  6F98               	movwf	(_calib+2)& (0+255),b
  1461  001BC4  0E00               	movlw	0
  1462  001BC6  6F99               	movwf	(_calib+3)& (0+255),b
  1463                           
  1464                           ;main.c: 342: page = 1;
  1465  001BC8  0E01               	movlw	1
  1466  001BCA  6FE5               	movwf	_page& (0+255),b
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;main.c: 343: MSdelay(100);
  1470  001BCC  0E00               	movlw	0
  1471  001BCE  6E02               	movwf	MSdelay@val+1,c
  1472  001BD0  0E64               	movlw	100
  1473  001BD2  6E01               	movwf	MSdelay@val,c
  1474  001BD4  EC5B  F00E         	call	_MSdelay	;wreg free
  1475                           
  1476                           ;main.c: 345: USART_Init(9600);
  1477  001BD8  0E25               	movlw	37
  1478  001BDA  6E50               	movwf	USART_Init@baud_rate+1,c
  1479  001BDC  0E80               	movlw	128
  1480  001BDE  6E4F               	movwf	USART_Init@baud_rate,c
  1481  001BE0  EC21  F00D         	call	_USART_Init	;wreg free
  1482                           
  1483                           ;main.c: 346: TRISA0 = 1;
  1484  001BE4  8092               	bsf	3986,0,c	;volatile
  1485                           
  1486                           ;main.c: 347: TRISAbits.RA5 = 1;
  1487  001BE6  8A92               	bsf	3986,5,c	;volatile
  1488                           
  1489                           ;main.c: 348: TRISAbits.RA4 = 0;
  1490  001BE8  9892               	bcf	3986,4,c	;volatile
  1491                           
  1492                           ;main.c: 350: LCD_Init();
  1493  001BEA  ECB0  F00E         	call	_LCD_Init	;wreg free
  1494                           
  1495                           ;main.c: 351: LCD_print("Weigh Scale");
  1496  001BEE  0E65               	movlw	low STR_14
  1497  001BF0  6E08               	movwf	LCD_print@str,c
  1498  001BF2  0E08               	movlw	high STR_14
  1499  001BF4  6E09               	movwf	LCD_print@str+1,c
  1500  001BF6  EC93  F00D         	call	_LCD_print	;wreg free
  1501  001BFA  0012               	return		;funcret
  1502  001BFC                     __end_of_init:
  1503                           	opt stack 0
  1504                           tblptru	equ	0xFF8
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           status	equ	0xFD8
  1508                           
  1509 ;; *************** function _USART_Init *****************
  1510 ;; Defined at:
  1511 ;;		line 16 in file "USART.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  baud_rate       2   78[COMRAM] int 
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  temp            3   80[COMRAM] float 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      void 
  1518 ;; Registers used:
  1519 ;;		wreg, status,2, status,0, cstack
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1525 ;;      Params:         2       0       0       0       0       0       0       0       0
  1526 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1527 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1528 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1529 ;;Total ram usage:        5 bytes
  1530 ;; Hardware stack levels used:    1
  1531 ;; Hardware stack levels required when called:    2
  1532 ;; This function calls:
  1533 ;;		___awtoft
  1534 ;;		___ftadd
  1535 ;;		___ftdiv
  1536 ;;		___fttol
  1537 ;; This function is called by:
  1538 ;;		_main
  1539 ;;		_init
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text2
  1544  001A42                     __ptext2:
  1545                           	opt stack 0
  1546  001A42                     _USART_Init:
  1547                           	opt stack 27
  1548                           
  1549                           ;USART.c: 18: float temp;
  1550                           ;USART.c: 19: TRISCbits.TRISC6 = 0;
  1551                           
  1552                           ;incstack = 0
  1553  001A42  9C94               	bcf	3988,6,c	;volatile
  1554                           
  1555                           ;USART.c: 20: TRISCbits.TRISC7 = 1;
  1556  001A44  8E94               	bsf	3988,7,c	;volatile
  1557                           
  1558                           ;USART.c: 21: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  1559  001A46  C04F  F009         	movff	USART_Init@baud_rate,___awtoft@c
  1560  001A4A  C050  F00A         	movff	USART_Init@baud_rate+1,___awtoft@c+1
  1561  001A4E  EC78  F00E         	call	___awtoft	;wreg free
  1562  001A52  C009  F016         	movff	?___awtoft,___ftdiv@f2
  1563  001A56  C00A  F017         	movff	?___awtoft+1,___ftdiv@f2+1
  1564  001A5A  C00B  F018         	movff	?___awtoft+2,___ftdiv@f2+2
  1565  001A5E  0E24               	movlw	36
  1566  001A60  6E13               	movwf	___ftdiv@f1,c
  1567  001A62  0EF4               	movlw	244
  1568  001A64  6E14               	movwf	___ftdiv@f1+1,c
  1569  001A66  0E47               	movlw	71
  1570  001A68  6E15               	movwf	___ftdiv@f1+2,c
  1571  001A6A  EC20  F00B         	call	___ftdiv	;wreg free
  1572  001A6E  C013  F034         	movff	?___ftdiv,___ftadd@f1
  1573  001A72  C014  F035         	movff	?___ftdiv+1,___ftadd@f1+1
  1574  001A76  C015  F036         	movff	?___ftdiv+2,___ftadd@f1+2
  1575  001A7A  0E00               	movlw	0
  1576  001A7C  6E37               	movwf	___ftadd@f2,c
  1577  001A7E  0E80               	movlw	128
  1578  001A80  6E38               	movwf	___ftadd@f2+1,c
  1579  001A82  0EBF               	movlw	191
  1580  001A84  6E39               	movwf	___ftadd@f2+2,c
  1581  001A86  EC26  F008         	call	___ftadd	;wreg free
  1582  001A8A  C034  F051         	movff	?___ftadd,USART_Init@temp
  1583  001A8E  C035  F052         	movff	?___ftadd+1,USART_Init@temp+1
  1584  001A92  C036  F053         	movff	?___ftadd+2,USART_Init@temp+2
  1585                           
  1586                           ;USART.c: 22: SPBRG=(int)temp;
  1587  001A96  C051  F040         	movff	USART_Init@temp,___fttol@f1
  1588  001A9A  C052  F041         	movff	USART_Init@temp+1,___fttol@f1+1
  1589  001A9E  C053  F042         	movff	USART_Init@temp+2,___fttol@f1+2
  1590  001AA2  EC2C  F00A         	call	___fttol	;wreg free
  1591  001AA6  5040               	movf	?___fttol,w,c
  1592  001AA8  6EAF               	movwf	4015,c	;volatile
  1593                           
  1594                           ;USART.c: 23: TXSTA=0x20;
  1595  001AAA  0E20               	movlw	32
  1596  001AAC  6EAC               	movwf	4012,c	;volatile
  1597                           
  1598                           ;USART.c: 24: RCSTA=0x90;
  1599  001AAE  0E90               	movlw	144
  1600  001AB0  6EAB               	movwf	4011,c	;volatile
  1601  001AB2  0012               	return		;funcret
  1602  001AB4                     __end_of_USART_Init:
  1603                           	opt stack 0
  1604                           tblptru	equ	0xFF8
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           status	equ	0xFD8
  1608                           
  1609 ;; *************** function ___fttol *****************
  1610 ;; Defined at:
  1611 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  f1              3   63[COMRAM] float 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  lval            4   73[COMRAM] unsigned long 
  1616 ;;  exp1            1   77[COMRAM] unsigned char 
  1617 ;;  sign1           1   72[COMRAM] unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  4   63[COMRAM] long 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1627 ;;      Params:         4       0       0       0       0       0       0       0       0
  1628 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1629 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1630 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1631 ;;Total ram usage:       15 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; This function calls:
  1634 ;;		Nothing
  1635 ;; This function is called by:
  1636 ;;		_main
  1637 ;;		_USART_Init
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           	psect	text3
  1642  001458                     __ptext3:
  1643                           	opt stack 0
  1644  001458                     ___fttol:
  1645                           	opt stack 28
  1646                           
  1647                           ;incstack = 0
  1648  001458  C042  F044         	movff	___fttol@f1+2,??___fttol
  1649  00145C  6A45               	clrf	(??___fttol+1)& (0+255),c
  1650  00145E  6A46               	clrf	(??___fttol+2)& (0+255),c
  1651  001460  3441               	rlcf	___fttol@f1+1,w,c
  1652  001462  3644               	rlcf	??___fttol& (0+255),f,c
  1653  001464  E301               	bnc	u1441
  1654  001466  8045               	bsf	(??___fttol+1)& (0+255),0,c
  1655  001468                     u1441:
  1656  001468  5044               	movf	??___fttol,w,c
  1657  00146A  6E4E               	movwf	___fttol@exp1,c
  1658  00146C  504E               	movf	___fttol@exp1,w,c
  1659  00146E  A4D8               	btfss	status,2,c
  1660  001470  D009               	goto	l624
  1661  001472  0E00               	movlw	0
  1662  001474  6E40               	movwf	?___fttol,c
  1663  001476  0E00               	movlw	0
  1664  001478  6E41               	movwf	?___fttol+1,c
  1665  00147A  0E00               	movlw	0
  1666  00147C  6E42               	movwf	?___fttol+2,c
  1667  00147E  0E00               	movlw	0
  1668  001480  6E43               	movwf	?___fttol+3,c
  1669  001482  0012               	return	
  1670  001484                     l624:
  1671  001484  0E17               	movlw	23
  1672  001486  6E44               	movwf	??___fttol& (0+255),c
  1673  001488  C040  F045         	movff	___fttol@f1,??___fttol+1
  1674  00148C  C041  F046         	movff	___fttol@f1+1,??___fttol+2
  1675  001490  C042  F047         	movff	___fttol@f1+2,??___fttol+3
  1676  001494  2844               	incf	??___fttol,w,c
  1677  001496  6E48               	movwf	(??___fttol+4)& (0+255),c
  1678  001498  D004               	goto	u1460
  1679  00149A                     u1465:
  1680  00149A  90D8               	bcf	status,0,c
  1681  00149C  3247               	rrcf	??___fttol+3,f,c
  1682  00149E  3246               	rrcf	??___fttol+2,f,c
  1683  0014A0  3245               	rrcf	??___fttol+1,f,c
  1684  0014A2                     u1460:
  1685  0014A2  2E48               	decfsz	(??___fttol+4)& (0+255),f,c
  1686  0014A4  D7FA               	goto	u1465
  1687  0014A6  5045               	movf	??___fttol+1,w,c
  1688  0014A8  6E49               	movwf	___fttol@sign1,c
  1689  0014AA  8E41               	bsf	___fttol@f1+1,7,c
  1690  0014AC  0EFF               	movlw	255
  1691  0014AE  1640               	andwf	___fttol@f1,f,c
  1692  0014B0  0EFF               	movlw	255
  1693  0014B2  1641               	andwf	___fttol@f1+1,f,c
  1694  0014B4  0E00               	movlw	0
  1695  0014B6  1642               	andwf	___fttol@f1+2,f,c
  1696  0014B8  5040               	movf	___fttol@f1,w,c
  1697  0014BA  6E4A               	movwf	___fttol@lval,c
  1698  0014BC  5041               	movf	___fttol@f1+1,w,c
  1699  0014BE  6E4B               	movwf	___fttol@lval+1,c
  1700  0014C0  5042               	movf	___fttol@f1+2,w,c
  1701  0014C2  6E4C               	movwf	___fttol@lval+2,c
  1702  0014C4  6A4D               	clrf	___fttol@lval+3,c
  1703  0014C6  0E8E               	movlw	142
  1704  0014C8  5E4E               	subwf	___fttol@exp1,f,c
  1705  0014CA  AE4E               	btfss	___fttol@exp1,7,c
  1706  0014CC  D016               	goto	l626
  1707  0014CE  504E               	movf	___fttol@exp1,w,c
  1708  0014D0  0A80               	xorlw	128
  1709  0014D2  0F8F               	addlw	143
  1710  0014D4  B0D8               	btfsc	status,0,c
  1711  0014D6  D009               	goto	l627
  1712  0014D8  0E00               	movlw	0
  1713  0014DA  6E40               	movwf	?___fttol,c
  1714  0014DC  0E00               	movlw	0
  1715  0014DE  6E41               	movwf	?___fttol+1,c
  1716  0014E0  0E00               	movlw	0
  1717  0014E2  6E42               	movwf	?___fttol+2,c
  1718  0014E4  0E00               	movlw	0
  1719  0014E6  6E43               	movwf	?___fttol+3,c
  1720  0014E8  0012               	return	
  1721  0014EA                     l627:
  1722  0014EA  90D8               	bcf	status,0,c
  1723  0014EC  324D               	rrcf	___fttol@lval+3,f,c
  1724  0014EE  324C               	rrcf	___fttol@lval+2,f,c
  1725  0014F0  324B               	rrcf	___fttol@lval+1,f,c
  1726  0014F2  324A               	rrcf	___fttol@lval,f,c
  1727  0014F4  3E4E               	incfsz	___fttol@exp1,f,c
  1728  0014F6  D7F9               	goto	l627
  1729  0014F8  D015               	goto	u1500
  1730  0014FA                     l626:
  1731  0014FA  0E17               	movlw	23
  1732  0014FC  644E               	cpfsgt	___fttol@exp1,c
  1733  0014FE  D00F               	goto	l632
  1734  001500  0E00               	movlw	0
  1735  001502  6E40               	movwf	?___fttol,c
  1736  001504  0E00               	movlw	0
  1737  001506  6E41               	movwf	?___fttol+1,c
  1738  001508  0E00               	movlw	0
  1739  00150A  6E42               	movwf	?___fttol+2,c
  1740  00150C  0E00               	movlw	0
  1741  00150E  6E43               	movwf	?___fttol+3,c
  1742  001510  0012               	return	
  1743  001512  90D8               	bcf	status,0,c
  1744  001514  364A               	rlcf	___fttol@lval,f,c
  1745  001516  364B               	rlcf	___fttol@lval+1,f,c
  1746  001518  364C               	rlcf	___fttol@lval+2,f,c
  1747  00151A  364D               	rlcf	___fttol@lval+3,f,c
  1748  00151C  064E               	decf	___fttol@exp1,f,c
  1749  00151E                     l632:
  1750  00151E  504E               	movf	___fttol@exp1,w,c
  1751  001520  A4D8               	btfss	status,2,c
  1752  001522  D7F7               	goto	l633
  1753  001524                     u1500:
  1754  001524  5049               	movf	___fttol@sign1,w,c
  1755  001526  B4D8               	btfsc	status,2,c
  1756  001528  D008               	goto	l635
  1757  00152A  1E4D               	comf	___fttol@lval+3,f,c
  1758  00152C  1E4C               	comf	___fttol@lval+2,f,c
  1759  00152E  1E4B               	comf	___fttol@lval+1,f,c
  1760  001530  6C4A               	negf	___fttol@lval,c
  1761  001532  0E00               	movlw	0
  1762  001534  224B               	addwfc	___fttol@lval+1,f,c
  1763  001536  224C               	addwfc	___fttol@lval+2,f,c
  1764  001538  224D               	addwfc	___fttol@lval+3,f,c
  1765  00153A                     l635:
  1766  00153A  C04A  F040         	movff	___fttol@lval,?___fttol
  1767  00153E  C04B  F041         	movff	___fttol@lval+1,?___fttol+1
  1768  001542  C04C  F042         	movff	___fttol@lval+2,?___fttol+2
  1769  001546  C04D  F043         	movff	___fttol@lval+3,?___fttol+3
  1770  00154A  0012               	return	
  1771  00154C                     __end_of___fttol:
  1772                           	opt stack 0
  1773                           tblptru	equ	0xFF8
  1774                           postinc0	equ	0xFEE
  1775                           wreg	equ	0xFE8
  1776                           status	equ	0xFD8
  1777                           
  1778 ;; *************** function ___ftadd *****************
  1779 ;; Defined at:
  1780 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  f1              3   51[COMRAM] float 
  1783 ;;  f2              3   54[COMRAM] float 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  exp1            1   62[COMRAM] unsigned char 
  1786 ;;  exp2            1   61[COMRAM] unsigned char 
  1787 ;;  sign            1   60[COMRAM] unsigned char 
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  3   51[COMRAM] float 
  1790 ;; Registers used:
  1791 ;;		wreg, status,2, status,0, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1797 ;;      Params:         6       0       0       0       0       0       0       0       0
  1798 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1799 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1800 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1801 ;;Total ram usage:       12 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    1
  1804 ;; This function calls:
  1805 ;;		___ftpack
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;;		_USART_Init
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text4
  1813  00104C                     __ptext4:
  1814                           	opt stack 0
  1815  00104C                     ___ftadd:
  1816                           	opt stack 27
  1817                           
  1818                           ;incstack = 0
  1819  00104C  C036  F03A         	movff	___ftadd@f1+2,??___ftadd
  1820  001050  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  1821  001052  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  1822  001054  3435               	rlcf	___ftadd@f1+1,w,c
  1823  001056  363A               	rlcf	??___ftadd& (0+255),f,c
  1824  001058  E301               	bnc	u1171
  1825  00105A  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  1826  00105C                     u1171:
  1827  00105C  503A               	movf	??___ftadd,w,c
  1828  00105E  6E3F               	movwf	___ftadd@exp1,c
  1829  001060  C039  F03A         	movff	___ftadd@f2+2,??___ftadd
  1830  001064  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  1831  001066  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  1832  001068  3438               	rlcf	___ftadd@f2+1,w,c
  1833  00106A  363A               	rlcf	??___ftadd& (0+255),f,c
  1834  00106C  E301               	bnc	u1181
  1835  00106E  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  1836  001070                     u1181:
  1837  001070  503A               	movf	??___ftadd,w,c
  1838  001072  6E3E               	movwf	___ftadd@exp2,c
  1839  001074  503F               	movf	___ftadd@exp1,w,c
  1840  001076  B4D8               	btfsc	status,2,c
  1841  001078  D00B               	goto	u1210
  1842  00107A  503E               	movf	___ftadd@exp2,w,c
  1843  00107C  5C3F               	subwf	___ftadd@exp1,w,c
  1844  00107E  B0D8               	btfsc	status,0,c
  1845  001080  D00E               	goto	l555
  1846  001082  503F               	movf	___ftadd@exp1,w,c
  1847  001084  0800               	sublw	0
  1848  001086  243E               	addwf	___ftadd@exp2,w,c
  1849  001088  6E3A               	movwf	??___ftadd& (0+255),c
  1850  00108A  0E18               	movlw	24
  1851  00108C  643A               	cpfsgt	??___ftadd,c
  1852  00108E  D007               	goto	l555
  1853  001090                     u1210:
  1854  001090  C037  F034         	movff	___ftadd@f2,?___ftadd
  1855  001094  C038  F035         	movff	___ftadd@f2+1,?___ftadd+1
  1856  001098  C039  F036         	movff	___ftadd@f2+2,?___ftadd+2
  1857  00109C  0012               	return	
  1858  00109E                     l555:
  1859  00109E  503E               	movf	___ftadd@exp2,w,c
  1860  0010A0  B4D8               	btfsc	status,2,c
  1861  0010A2  D00B               	goto	u1240
  1862  0010A4  503F               	movf	___ftadd@exp1,w,c
  1863  0010A6  5C3E               	subwf	___ftadd@exp2,w,c
  1864  0010A8  B0D8               	btfsc	status,0,c
  1865  0010AA  D00E               	goto	l559
  1866  0010AC  503E               	movf	___ftadd@exp2,w,c
  1867  0010AE  0800               	sublw	0
  1868  0010B0  243F               	addwf	___ftadd@exp1,w,c
  1869  0010B2  6E3A               	movwf	??___ftadd& (0+255),c
  1870  0010B4  0E18               	movlw	24
  1871  0010B6  643A               	cpfsgt	??___ftadd,c
  1872  0010B8  D007               	goto	l559
  1873  0010BA                     u1240:
  1874  0010BA  C034  F034         	movff	___ftadd@f1,?___ftadd
  1875  0010BE  C035  F035         	movff	___ftadd@f1+1,?___ftadd+1
  1876  0010C2  C036  F036         	movff	___ftadd@f1+2,?___ftadd+2
  1877  0010C6  0012               	return	
  1878  0010C8                     l559:
  1879  0010C8  0E06               	movlw	6
  1880  0010CA  6E3D               	movwf	___ftadd@sign,c
  1881  0010CC  BE36               	btfsc	___ftadd@f1+2,7,c
  1882  0010CE  8E3D               	bsf	___ftadd@sign,7,c
  1883  0010D0  BE39               	btfsc	___ftadd@f2+2,7,c
  1884  0010D2  8C3D               	bsf	___ftadd@sign,6,c
  1885  0010D4  8E35               	bsf	___ftadd@f1+1,7,c
  1886  0010D6  0EFF               	movlw	255
  1887  0010D8  1634               	andwf	___ftadd@f1,f,c
  1888  0010DA  0EFF               	movlw	255
  1889  0010DC  1635               	andwf	___ftadd@f1+1,f,c
  1890  0010DE  0E00               	movlw	0
  1891  0010E0  1636               	andwf	___ftadd@f1+2,f,c
  1892  0010E2  8E38               	bsf	___ftadd@f2+1,7,c
  1893  0010E4  0EFF               	movlw	255
  1894  0010E6  1637               	andwf	___ftadd@f2,f,c
  1895  0010E8  0EFF               	movlw	255
  1896  0010EA  1638               	andwf	___ftadd@f2+1,f,c
  1897  0010EC  0E00               	movlw	0
  1898  0010EE  1639               	andwf	___ftadd@f2+2,f,c
  1899  0010F0  503E               	movf	___ftadd@exp2,w,c
  1900  0010F2  5C3F               	subwf	___ftadd@exp1,w,c
  1901  0010F4  B0D8               	btfsc	status,0,c
  1902  0010F6  D01B               	goto	l564
  1903  0010F8                     u1270:
  1904  0010F8  90D8               	bcf	status,0,c
  1905  0010FA  3637               	rlcf	___ftadd@f2,f,c
  1906  0010FC  3638               	rlcf	___ftadd@f2+1,f,c
  1907  0010FE  3639               	rlcf	___ftadd@f2+2,f,c
  1908  001100  063E               	decf	___ftadd@exp2,f,c
  1909  001102  503F               	movf	___ftadd@exp1,w,c
  1910  001104  183E               	xorwf	___ftadd@exp2,w,c
  1911  001106  B4D8               	btfsc	status,2,c
  1912  001108  D00D               	goto	l569
  1913  00110A  063D               	decf	___ftadd@sign,f,c
  1914  00110C  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  1915  001110  0E07               	movlw	7
  1916  001112  163A               	andwf	??___ftadd,f,c
  1917  001114  B4D8               	btfsc	status,2,c
  1918  001116  D006               	goto	l569
  1919  001118  D7EF               	goto	u1270
  1920  00111A  90D8               	bcf	status,0,c
  1921  00111C  3236               	rrcf	___ftadd@f1+2,f,c
  1922  00111E  3235               	rrcf	___ftadd@f1+1,f,c
  1923  001120  3234               	rrcf	___ftadd@f1,f,c
  1924  001122  2A3F               	incf	___ftadd@exp1,f,c
  1925  001124                     l569:
  1926  001124  503E               	movf	___ftadd@exp2,w,c
  1927  001126  183F               	xorwf	___ftadd@exp1,w,c
  1928  001128  B4D8               	btfsc	status,2,c
  1929  00112A  D01F               	goto	u1340
  1930  00112C  D7F6               	goto	l570
  1931  00112E                     l564:
  1932  00112E  503F               	movf	___ftadd@exp1,w,c
  1933  001130  5C3E               	subwf	___ftadd@exp2,w,c
  1934  001132  B0D8               	btfsc	status,0,c
  1935  001134  D01A               	goto	u1340
  1936  001136                     u1310:
  1937  001136  90D8               	bcf	status,0,c
  1938  001138  3634               	rlcf	___ftadd@f1,f,c
  1939  00113A  3635               	rlcf	___ftadd@f1+1,f,c
  1940  00113C  3636               	rlcf	___ftadd@f1+2,f,c
  1941  00113E  063F               	decf	___ftadd@exp1,f,c
  1942  001140  503F               	movf	___ftadd@exp1,w,c
  1943  001142  183E               	xorwf	___ftadd@exp2,w,c
  1944  001144  B4D8               	btfsc	status,2,c
  1945  001146  D00D               	goto	l578
  1946  001148  063D               	decf	___ftadd@sign,f,c
  1947  00114A  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  1948  00114E  0E07               	movlw	7
  1949  001150  163A               	andwf	??___ftadd,f,c
  1950  001152  B4D8               	btfsc	status,2,c
  1951  001154  D006               	goto	l578
  1952  001156  D7EF               	goto	u1310
  1953  001158  90D8               	bcf	status,0,c
  1954  00115A  3239               	rrcf	___ftadd@f2+2,f,c
  1955  00115C  3238               	rrcf	___ftadd@f2+1,f,c
  1956  00115E  3237               	rrcf	___ftadd@f2,f,c
  1957  001160  2A3E               	incf	___ftadd@exp2,f,c
  1958  001162                     l578:
  1959  001162  503E               	movf	___ftadd@exp2,w,c
  1960  001164  183F               	xorwf	___ftadd@exp1,w,c
  1961  001166  A4D8               	btfss	status,2,c
  1962  001168  D7F7               	goto	l579
  1963  00116A                     u1340:
  1964  00116A  AE3D               	btfss	___ftadd@sign,7,c
  1965  00116C  D00C               	goto	l581
  1966  00116E  0EFF               	movlw	255
  1967  001170  1A34               	xorwf	___ftadd@f1,f,c
  1968  001172  0EFF               	movlw	255
  1969  001174  1A35               	xorwf	___ftadd@f1+1,f,c
  1970  001176  0EFF               	movlw	255
  1971  001178  1A36               	xorwf	___ftadd@f1+2,f,c
  1972  00117A  0E01               	movlw	1
  1973  00117C  2634               	addwf	___ftadd@f1,f,c
  1974  00117E  0E00               	movlw	0
  1975  001180  2235               	addwfc	___ftadd@f1+1,f,c
  1976  001182  0E00               	movlw	0
  1977  001184  2236               	addwfc	___ftadd@f1+2,f,c
  1978  001186                     l581:
  1979  001186  AC3D               	btfss	___ftadd@sign,6,c
  1980  001188  D00C               	goto	l582
  1981  00118A  0EFF               	movlw	255
  1982  00118C  1A37               	xorwf	___ftadd@f2,f,c
  1983  00118E  0EFF               	movlw	255
  1984  001190  1A38               	xorwf	___ftadd@f2+1,f,c
  1985  001192  0EFF               	movlw	255
  1986  001194  1A39               	xorwf	___ftadd@f2+2,f,c
  1987  001196  0E01               	movlw	1
  1988  001198  2637               	addwf	___ftadd@f2,f,c
  1989  00119A  0E00               	movlw	0
  1990  00119C  2238               	addwfc	___ftadd@f2+1,f,c
  1991  00119E  0E00               	movlw	0
  1992  0011A0  2239               	addwfc	___ftadd@f2+2,f,c
  1993  0011A2                     l582:
  1994  0011A2  0E00               	movlw	0
  1995  0011A4  6E3D               	movwf	___ftadd@sign,c
  1996  0011A6  5034               	movf	___ftadd@f1,w,c
  1997  0011A8  2637               	addwf	___ftadd@f2,f,c
  1998  0011AA  5035               	movf	___ftadd@f1+1,w,c
  1999  0011AC  2238               	addwfc	___ftadd@f2+1,f,c
  2000  0011AE  5036               	movf	___ftadd@f1+2,w,c
  2001  0011B0  2239               	addwfc	___ftadd@f2+2,f,c
  2002  0011B2  AE39               	btfss	___ftadd@f2+2,7,c
  2003  0011B4  D00E               	goto	l583
  2004  0011B6  0EFF               	movlw	255
  2005  0011B8  1A37               	xorwf	___ftadd@f2,f,c
  2006  0011BA  0EFF               	movlw	255
  2007  0011BC  1A38               	xorwf	___ftadd@f2+1,f,c
  2008  0011BE  0EFF               	movlw	255
  2009  0011C0  1A39               	xorwf	___ftadd@f2+2,f,c
  2010  0011C2  0E01               	movlw	1
  2011  0011C4  2637               	addwf	___ftadd@f2,f,c
  2012  0011C6  0E00               	movlw	0
  2013  0011C8  2238               	addwfc	___ftadd@f2+1,f,c
  2014  0011CA  0E00               	movlw	0
  2015  0011CC  2239               	addwfc	___ftadd@f2+2,f,c
  2016  0011CE  0E01               	movlw	1
  2017  0011D0  6E3D               	movwf	___ftadd@sign,c
  2018  0011D2                     l583:
  2019  0011D2  C037  F001         	movff	___ftadd@f2,___ftpack@arg
  2020  0011D6  C038  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  2021  0011DA  C039  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  2022  0011DE  C03F  F004         	movff	___ftadd@exp1,___ftpack@exp
  2023  0011E2  C03D  F005         	movff	___ftadd@sign,___ftpack@sign
  2024  0011E6  ECF9  F00B         	call	___ftpack	;wreg free
  2025  0011EA  C001  F034         	movff	?___ftpack,?___ftadd
  2026  0011EE  C002  F035         	movff	?___ftpack+1,?___ftadd+1
  2027  0011F2  C003  F036         	movff	?___ftpack+2,?___ftadd+2
  2028  0011F6  0012               	return	
  2029  0011F8                     __end_of___ftadd:
  2030                           	opt stack 0
  2031                           tblptru	equ	0xFF8
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           status	equ	0xFD8
  2035                           
  2036 ;; *************** function ___awtoft *****************
  2037 ;; Defined at:
  2038 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;  c               2    8[COMRAM] int 
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  sign            1   11[COMRAM] unsigned char 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  3    8[COMRAM] float 
  2045 ;; Registers used:
  2046 ;;		wreg, status,2, status,0, cstack
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2052 ;;      Params:         3       0       0       0       0       0       0       0       0
  2053 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2054 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2055 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2056 ;;Total ram usage:        4 bytes
  2057 ;; Hardware stack levels used:    1
  2058 ;; Hardware stack levels required when called:    1
  2059 ;; This function calls:
  2060 ;;		___ftpack
  2061 ;; This function is called by:
  2062 ;;		_USART_Init
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text5
  2067  001CF0                     __ptext5:
  2068                           	opt stack 0
  2069  001CF0                     ___awtoft:
  2070                           	opt stack 27
  2071                           
  2072                           ;incstack = 0
  2073  001CF0  0E00               	movlw	0
  2074  001CF2  6E0C               	movwf	___awtoft@sign,c
  2075  001CF4  AE0A               	btfss	___awtoft@c+1,7,c
  2076  001CF6  D006               	goto	l505
  2077  001CF8  6C09               	negf	___awtoft@c,c
  2078  001CFA  1E0A               	comf	___awtoft@c+1,f,c
  2079  001CFC  B0D8               	btfsc	status,0,c
  2080  001CFE  2A0A               	incf	___awtoft@c+1,f,c
  2081  001D00  0E01               	movlw	1
  2082  001D02  6E0C               	movwf	___awtoft@sign,c
  2083  001D04                     l505:
  2084  001D04  C009  F001         	movff	___awtoft@c,___ftpack@arg
  2085  001D08  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2086  001D0C  6A03               	clrf	___ftpack@arg+2,c
  2087  001D0E  0E8E               	movlw	142
  2088  001D10  6E04               	movwf	___ftpack@exp,c
  2089  001D12  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  2090  001D16  ECF9  F00B         	call	___ftpack	;wreg free
  2091  001D1A  C001  F009         	movff	?___ftpack,?___awtoft
  2092  001D1E  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  2093  001D22  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  2094  001D26  0012               	return	
  2095  001D28                     __end_of___awtoft:
  2096                           	opt stack 0
  2097                           tblptru	equ	0xFF8
  2098                           postinc0	equ	0xFEE
  2099                           wreg	equ	0xFE8
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _LCD_Init *****************
  2103 ;; Defined at:
  2104 ;;		line 11 in file "LCD_16x2.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0
  2119 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2121 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2122 ;;Total ram usage:        0 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    2
  2125 ;; This function calls:
  2126 ;;		_LCD_Command
  2127 ;;		_MSdelay
  2128 ;; This function is called by:
  2129 ;;		_init
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text6
  2134  001D60                     __ptext6:
  2135                           	opt stack 0
  2136  001D60                     _LCD_Init:
  2137                           	opt stack 27
  2138                           
  2139                           ;LCD_16x2.c: 13: TRISA = 0;
  2140                           
  2141                           ;incstack = 0
  2142  001D60  0E00               	movlw	0
  2143  001D62  6E92               	movwf	3986,c	;volatile
  2144                           
  2145                           ;LCD_16x2.c: 14: TRISD0 =0;
  2146  001D64  9095               	bcf	3989,0,c	;volatile
  2147                           
  2148                           ;LCD_16x2.c: 15: TRISD2 =0;
  2149  001D66  9495               	bcf	3989,2,c	;volatile
  2150                           
  2151                           ;LCD_16x2.c: 16: MSdelay(20);
  2152  001D68  0E00               	movlw	0
  2153  001D6A  6E02               	movwf	MSdelay@val+1,c
  2154  001D6C  0E14               	movlw	20
  2155  001D6E  6E01               	movwf	MSdelay@val,c
  2156  001D70  EC5B  F00E         	call	_MSdelay	;wreg free
  2157                           
  2158                           ;LCD_16x2.c: 18: LCD_Command(0x02);
  2159  001D74  0E02               	movlw	2
  2160  001D76  EC2D  F00E         	call	_LCD_Command
  2161                           
  2162                           ;LCD_16x2.c: 21: LCD_Command(0x28);
  2163  001D7A  0E28               	movlw	40
  2164  001D7C  EC2D  F00E         	call	_LCD_Command
  2165                           
  2166                           ;LCD_16x2.c: 24: LCD_Command(0x01);
  2167  001D80  0E01               	movlw	1
  2168  001D82  EC2D  F00E         	call	_LCD_Command
  2169                           
  2170                           ;LCD_16x2.c: 26: LCD_Command(0x0c);
  2171  001D86  0E0C               	movlw	12
  2172  001D88  EC2D  F00E         	call	_LCD_Command
  2173                           
  2174                           ;LCD_16x2.c: 28: LCD_Command(0x06);
  2175  001D8C  0E06               	movlw	6
  2176  001D8E  EC2D  F00E         	call	_LCD_Command
  2177  001D92  0012               	return		;funcret
  2178  001D94                     __end_of_LCD_Init:
  2179                           	opt stack 0
  2180                           tblptru	equ	0xFF8
  2181                           postinc0	equ	0xFEE
  2182                           wreg	equ	0xFE8
  2183                           status	equ	0xFD8
  2184                           
  2185 ;; *************** function _calibrate *****************
  2186 ;; Defined at:
  2187 ;;		line 246 in file "main.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;		None
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  i               2   74[COMRAM] int 
  2192 ;;  i               2   72[COMRAM] int 
  2193 ;;  buff           10   58[COMRAM] unsigned char [10]
  2194 ;;  address         4   76[COMRAM] long 
  2195 ;;  temp_val_loc    4   68[COMRAM] long 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2205 ;;      Params:         0       0       0       0       0       0       0       0       0
  2206 ;;      Locals:        22       0       0       0       0       0       0       0       0
  2207 ;;      Temps:          8       0       0       0       0       0       0       0       0
  2208 ;;      Totals:        30       0       0       0       0       0       0       0       0
  2209 ;;Total ram usage:       30 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    3
  2212 ;; This function calls:
  2213 ;;		_EEPROMReadlong
  2214 ;;		_EEPROMWritelong
  2215 ;;		_LCD_Clear
  2216 ;;		_LCD_print
  2217 ;;		_MSdelay
  2218 ;;		_ReadCount
  2219 ;;		_USART_newline
  2220 ;;		___aldiv
  2221 ;;		___altoft
  2222 ;;		___ftdiv
  2223 ;;		_intToAscci
  2224 ;;		_send_string
  2225 ;; This function is called by:
  2226 ;;		_main
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text7
  2231  00089C                     __ptext7:
  2232                           	opt stack 0
  2233  00089C                     _calibrate:
  2234                           	opt stack 27
  2235                           
  2236                           ;main.c: 248: char buff[10];
  2237                           ;main.c: 249: long address = 0;
  2238                           
  2239                           ;incstack = 0
  2240  00089C  0E00               	movlw	0
  2241  00089E  6E4D               	movwf	calibrate@address,c
  2242  0008A0  0E00               	movlw	0
  2243  0008A2  6E4E               	movwf	calibrate@address+1,c
  2244  0008A4  0E00               	movlw	0
  2245  0008A6  6E4F               	movwf	calibrate@address+2,c
  2246  0008A8  0E00               	movlw	0
  2247  0008AA  6E50               	movwf	calibrate@address+3,c
  2248                           
  2249                           ;main.c: 250: long temp_val_local = 0;
  2250  0008AC  0E00               	movlw	0
  2251  0008AE  6E45               	movwf	calibrate@temp_val_local,c
  2252  0008B0  0E00               	movlw	0
  2253  0008B2  6E46               	movwf	calibrate@temp_val_local+1,c
  2254  0008B4  0E00               	movlw	0
  2255  0008B6  6E47               	movwf	calibrate@temp_val_local+2,c
  2256  0008B8  0E00               	movlw	0
  2257  0008BA  6E48               	movwf	calibrate@temp_val_local+3,c
  2258                           
  2259                           ;main.c: 251: send_string("Calibrating...");
  2260  0008BC  0E4A               	movlw	low STR_7
  2261  0008BE  6E07               	movwf	send_string@str,c
  2262  0008C0  0E08               	movlw	high STR_7
  2263  0008C2  6E08               	movwf	send_string@str+1,c
  2264  0008C4  EC5A  F00D         	call	_send_string	;wreg free
  2265                           
  2266                           ;main.c: 252: LCD_Clear();
  2267  0008C8  EC1B  F00F         	call	_LCD_Clear	;wreg free
  2268                           
  2269                           ;main.c: 253: LCD_print("Calibrating");
  2270  0008CC  0E71               	movlw	low STR_8
  2271  0008CE  6E08               	movwf	LCD_print@str,c
  2272  0008D0  0E08               	movlw	high STR_8
  2273  0008D2  6E09               	movwf	LCD_print@str+1,c
  2274  0008D4  EC93  F00D         	call	_LCD_print	;wreg free
  2275                           
  2276                           ;main.c: 255: for (int i = 0; i < 100; i++)
  2277  0008D8  0E00               	movlw	0
  2278  0008DA  6E4A               	movwf	calibrate@i+1,c
  2279  0008DC  0E00               	movlw	0
  2280  0008DE  6E49               	movwf	calibrate@i,c
  2281  0008E0                     l2265:
  2282  0008E0  BE4A               	btfsc	calibrate@i+1,7,c
  2283  0008E2  D006               	goto	l176
  2284  0008E4  504A               	movf	calibrate@i+1,w,c
  2285  0008E6  E136               	bnz	l2285
  2286  0008E8  0E64               	movlw	100
  2287  0008EA  5C49               	subwf	calibrate@i,w,c
  2288  0008EC  B0D8               	btfsc	status,0,c
  2289  0008EE  D032               	goto	u1680
  2290  0008F0                     l176:
  2291                           
  2292                           ;main.c: 256: {
  2293                           ;main.c: 257: count = ReadCount();
  2294  0008F0  ECA6  F00C         	call	_ReadCount	;wreg free
  2295  0008F4  C001  F06A         	movff	?_ReadCount,_count
  2296  0008F8  C002  F06B         	movff	?_ReadCount+1,_count+1
  2297  0008FC  C003  F06C         	movff	?_ReadCount+2,_count+2
  2298  000900  C004  F06D         	movff	?_ReadCount+3,_count+3
  2299                           
  2300                           ;main.c: 258: sample += count;
  2301  000904  0100               	movlb	0	; () banked
  2302  000906  516A               	movf	_count& (0+255),w,b
  2303  000908  276E               	addwf	_sample& (0+255),f,b
  2304  00090A  516B               	movf	(_count+1)& (0+255),w,b
  2305  00090C  236F               	addwfc	(_sample+1)& (0+255),f,b
  2306  00090E  516C               	movf	(_count+2)& (0+255),w,b
  2307  000910  2370               	addwfc	(_sample+2)& (0+255),f,b
  2308  000912  516D               	movf	(_count+3)& (0+255),w,b
  2309  000914  2371               	addwfc	(_sample+3)& (0+255),f,b
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;main.c: 259: MSdelay(20);
  2313  000916  0E00               	movlw	0
  2314  000918  6E02               	movwf	MSdelay@val+1,c
  2315  00091A  0E14               	movlw	20
  2316  00091C  6E01               	movwf	MSdelay@val,c
  2317  00091E  EC5B  F00E         	call	_MSdelay	;wreg free
  2318                           
  2319                           ;main.c: 260: intToAscci(count, buff);
  2320  000922  C06A  F00F         	movff	_count,intToAscci@num
  2321  000926  C06B  F010         	movff	_count+1,intToAscci@num+1
  2322  00092A  C06C  F011         	movff	_count+2,intToAscci@num+2
  2323  00092E  C06D  F012         	movff	_count+3,intToAscci@num+3
  2324  000932  0E3B               	movlw	low calibrate@buff
  2325  000934  6E13               	movwf	intToAscci@str,c
  2326  000936  0E00               	movlw	high calibrate@buff
  2327  000938  6E14               	movwf	intToAscci@str+1,c
  2328  00093A  ECFC  F008         	call	_intToAscci	;wreg free
  2329                           
  2330                           ;main.c: 261: send_string(buff);
  2331  00093E  0E3B               	movlw	low calibrate@buff
  2332  000940  6E07               	movwf	send_string@str,c
  2333  000942  0E00               	movlw	high calibrate@buff
  2334  000944  6E08               	movwf	send_string@str+1,c
  2335  000946  EC5A  F00D         	call	_send_string	;wreg free
  2336                           
  2337                           ;main.c: 262: USART_newline();
  2338  00094A  EC25  F00F         	call	_USART_newline	;wreg free
  2339  00094E  4A49               	infsnz	calibrate@i,f,c
  2340  000950  2A4A               	incf	calibrate@i+1,f,c
  2341  000952  D7C6               	goto	l2265
  2342  000954                     u1680:
  2343  000954                     l2285:
  2344                           
  2345                           ;main.c: 263: }
  2346                           ;main.c: 265: sample /= 100;
  2347  000954  C06E  F001         	movff	_sample,___aldiv@dividend
  2348  000958  C06F  F002         	movff	_sample+1,___aldiv@dividend+1
  2349  00095C  C070  F003         	movff	_sample+2,___aldiv@dividend+2
  2350  000960  C071  F004         	movff	_sample+3,___aldiv@dividend+3
  2351  000964  0E64               	movlw	100
  2352  000966  6E05               	movwf	___aldiv@divisor,c
  2353  000968  0E00               	movlw	0
  2354  00096A  6E06               	movwf	___aldiv@divisor+1,c
  2355  00096C  0E00               	movlw	0
  2356  00096E  6E07               	movwf	___aldiv@divisor+2,c
  2357  000970  0E00               	movlw	0
  2358  000972  6E08               	movwf	___aldiv@divisor+3,c
  2359  000974  EC93  F00B         	call	___aldiv	;wreg free
  2360  000978  C001  F06E         	movff	?___aldiv,_sample
  2361  00097C  C002  F06F         	movff	?___aldiv+1,_sample+1
  2362  000980  C003  F070         	movff	?___aldiv+2,_sample+2
  2363  000984  C004  F071         	movff	?___aldiv+3,_sample+3
  2364                           
  2365                           ;main.c: 267: count = 0;
  2366  000988  0E00               	movlw	0
  2367  00098A  0100               	movlb	0	; () banked
  2368  00098C  6F6A               	movwf	_count& (0+255),b
  2369  00098E  0E00               	movlw	0
  2370  000990  6F6B               	movwf	(_count+1)& (0+255),b
  2371  000992  0E00               	movlw	0
  2372  000994  6F6C               	movwf	(_count+2)& (0+255),b
  2373  000996  0E00               	movlw	0
  2374  000998  6F6D               	movwf	(_count+3)& (0+255),b
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;main.c: 268: LCD_Clear();
  2378  00099A  EC1B  F00F         	call	_LCD_Clear	;wreg free
  2379                           
  2380                           ;main.c: 269: LCD_print("Put 300gm weight");
  2381  00099E  0E29               	movlw	low STR_9
  2382  0009A0  6E08               	movwf	LCD_print@str,c
  2383  0009A2  0E08               	movlw	high STR_9
  2384  0009A4  6E09               	movwf	LCD_print@str+1,c
  2385  0009A6  EC93  F00D         	call	_LCD_print	;wreg free
  2386                           
  2387                           ;main.c: 270: send_string("Put the weight & wait");
  2388  0009AA  0E01               	movlw	low STR_10
  2389  0009AC  6E07               	movwf	send_string@str,c
  2390  0009AE  0E08               	movlw	high STR_10
  2391  0009B0  6E08               	movwf	send_string@str+1,c
  2392  0009B2  EC5A  F00D         	call	_send_string	;wreg free
  2393                           
  2394                           ;main.c: 271: USART_newline();
  2395  0009B6  EC25  F00F         	call	_USART_newline	;wreg free
  2396                           
  2397                           ;main.c: 273: while (count < 2000)
  2398  0009BA  D034               	goto	l178
  2399  0009BC                     
  2400                           ;main.c: 274: {
  2401                           ;main.c: 275: count = ReadCount();
  2402  0009BC  ECA6  F00C         	call	_ReadCount	;wreg free
  2403  0009C0  C001  F06A         	movff	?_ReadCount,_count
  2404  0009C4  C002  F06B         	movff	?_ReadCount+1,_count+1
  2405  0009C8  C003  F06C         	movff	?_ReadCount+2,_count+2
  2406  0009CC  C004  F06D         	movff	?_ReadCount+3,_count+3
  2407                           
  2408                           ;main.c: 276: count = count - sample ;
  2409  0009D0  C06E  F033         	movff	_sample,??_calibrate
  2410  0009D4  C06F  F034         	movff	_sample+1,??_calibrate+1
  2411  0009D8  C070  F035         	movff	_sample+2,??_calibrate+2
  2412  0009DC  C071  F036         	movff	_sample+3,??_calibrate+3
  2413  0009E0  1E33               	comf	??_calibrate,f,c
  2414  0009E2  1E34               	comf	??_calibrate+1,f,c
  2415  0009E4  1E35               	comf	??_calibrate+2,f,c
  2416  0009E6  1E36               	comf	??_calibrate+3,f,c
  2417  0009E8  2A33               	incf	??_calibrate,f,c
  2418  0009EA  0E00               	movlw	0
  2419  0009EC  2234               	addwfc	??_calibrate+1,f,c
  2420  0009EE  2235               	addwfc	??_calibrate+2,f,c
  2421  0009F0  2236               	addwfc	??_calibrate+3,f,c
  2422  0009F2  0100               	movlb	0	; () banked
  2423  0009F4  516A               	movf	_count& (0+255),w,b
  2424  0009F6  2433               	addwf	??_calibrate,w,c
  2425  0009F8  6F6A               	movwf	_count& (0+255),b
  2426  0009FA  516B               	movf	(_count+1)& (0+255),w,b
  2427  0009FC  2034               	addwfc	??_calibrate+1,w,c
  2428  0009FE  6F6B               	movwf	(_count+1)& (0+255),b
  2429  000A00  516C               	movf	(_count+2)& (0+255),w,b
  2430  000A02  2035               	addwfc	??_calibrate+2,w,c
  2431  000A04  6F6C               	movwf	(_count+2)& (0+255),b
  2432  000A06  516D               	movf	(_count+3)& (0+255),w,b
  2433  000A08  2036               	addwfc	??_calibrate+3,w,c
  2434  000A0A  6F6D               	movwf	(_count+3)& (0+255),b
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;main.c: 277: MSdelay(20);
  2438  000A0C  0E00               	movlw	0
  2439  000A0E  6E02               	movwf	MSdelay@val+1,c
  2440  000A10  0E14               	movlw	20
  2441  000A12  6E01               	movwf	MSdelay@val,c
  2442  000A14  EC5B  F00E         	call	_MSdelay	;wreg free
  2443                           
  2444                           ;main.c: 278: send_string('.');
  2445  000A18  0E2E               	movlw	46
  2446  000A1A  6E07               	movwf	send_string@str,c
  2447  000A1C  0E00               	movlw	0
  2448  000A1E  6E08               	movwf	send_string@str+1,c
  2449  000A20  EC5A  F00D         	call	_send_string	;wreg free
  2450  000A24                     l178:
  2451  000A24  0100               	movlb	0	; () banked
  2452  000A26  BF6D               	btfsc	(_count+3)& (0+255),7,b
  2453  000A28  D7C9               	goto	l179
  2454  000A2A  516D               	movf	(_count+3)& (0+255),w,b
  2455  000A2C  116C               	iorwf	(_count+2)& (0+255),w,b
  2456  000A2E  E106               	bnz	l2307
  2457  000A30  0ED0               	movlw	208
  2458  000A32  5D6A               	subwf	_count& (0+255),w,b
  2459  000A34  0E07               	movlw	7
  2460  000A36  596B               	subwfb	(_count+1)& (0+255),w,b
  2461  000A38  A0D8               	btfss	status,0,c
  2462  000A3A  D7C0               	goto	l179
  2463  000A3C                     l2307:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;main.c: 279: }
  2467                           ;main.c: 280: LCD_Clear();
  2468  000A3C  EC1B  F00F         	call	_LCD_Clear	;wreg free
  2469                           
  2470                           ;main.c: 281: LCD_print("Detected weight..");
  2471  000A40  0E17               	movlw	low STR_11
  2472  000A42  6E08               	movwf	LCD_print@str,c
  2473  000A44  0E08               	movlw	high STR_11
  2474  000A46  6E09               	movwf	LCD_print@str+1,c
  2475  000A48  EC93  F00D         	call	_LCD_print	;wreg free
  2476                           
  2477                           ;main.c: 283: MSdelay(2000);
  2478  000A4C  0E07               	movlw	7
  2479  000A4E  6E02               	movwf	MSdelay@val+1,c
  2480  000A50  0ED0               	movlw	208
  2481  000A52  6E01               	movwf	MSdelay@val,c
  2482  000A54  EC5B  F00E         	call	_MSdelay	;wreg free
  2483                           
  2484                           ;main.c: 284: LCD_Clear();
  2485  000A58  EC1B  F00F         	call	_LCD_Clear	;wreg free
  2486                           
  2487                           ;main.c: 285: LCD_print("Recalibrating..");
  2488  000A5C  0E3A               	movlw	low STR_12
  2489  000A5E  6E08               	movwf	LCD_print@str,c
  2490  000A60  0E08               	movlw	high STR_12
  2491  000A62  6E09               	movwf	LCD_print@str+1,c
  2492  000A64  EC93  F00D         	call	_LCD_print	;wreg free
  2493                           
  2494                           ;main.c: 286: send_string("Recalibrating..");
  2495  000A68  0E3A               	movlw	low STR_12
  2496  000A6A  6E07               	movwf	send_string@str,c
  2497  000A6C  0E08               	movlw	high STR_12
  2498  000A6E  6E08               	movwf	send_string@str+1,c
  2499  000A70  EC5A  F00D         	call	_send_string	;wreg free
  2500                           
  2501                           ;main.c: 288: for (int i = 0; i < 100; i++)
  2502  000A74  0E00               	movlw	0
  2503  000A76  6E4C               	movwf	calibrate@i_424+1,c
  2504  000A78  0E00               	movlw	0
  2505  000A7A  6E4B               	movwf	calibrate@i_424,c
  2506  000A7C                     l2321:
  2507  000A7C  BE4C               	btfsc	calibrate@i_424+1,7,c
  2508  000A7E  D006               	goto	l181
  2509  000A80  504C               	movf	calibrate@i_424+1,w,c
  2510  000A82  E143               	bnz	l2337
  2511  000A84  0E64               	movlw	100
  2512  000A86  5C4B               	subwf	calibrate@i_424,w,c
  2513  000A88  B0D8               	btfsc	status,0,c
  2514  000A8A  D03F               	goto	u1710
  2515  000A8C                     l181:
  2516                           
  2517                           ;main.c: 289: {
  2518                           ;main.c: 290: count = ReadCount();
  2519  000A8C  ECA6  F00C         	call	_ReadCount	;wreg free
  2520  000A90  C001  F06A         	movff	?_ReadCount,_count
  2521  000A94  C002  F06B         	movff	?_ReadCount+1,_count+1
  2522  000A98  C003  F06C         	movff	?_ReadCount+2,_count+2
  2523  000A9C  C004  F06D         	movff	?_ReadCount+3,_count+3
  2524                           
  2525                           ;main.c: 292: temp_val += sample - count;
  2526  000AA0  C06A  F033         	movff	_count,??_calibrate
  2527  000AA4  C06B  F034         	movff	_count+1,??_calibrate+1
  2528  000AA8  C06C  F035         	movff	_count+2,??_calibrate+2
  2529  000AAC  C06D  F036         	movff	_count+3,??_calibrate+3
  2530  000AB0  1E33               	comf	??_calibrate,f,c
  2531  000AB2  1E34               	comf	??_calibrate+1,f,c
  2532  000AB4  1E35               	comf	??_calibrate+2,f,c
  2533  000AB6  1E36               	comf	??_calibrate+3,f,c
  2534  000AB8  2A33               	incf	??_calibrate,f,c
  2535  000ABA  0E00               	movlw	0
  2536  000ABC  2234               	addwfc	??_calibrate+1,f,c
  2537  000ABE  2235               	addwfc	??_calibrate+2,f,c
  2538  000AC0  2236               	addwfc	??_calibrate+3,f,c
  2539  000AC2  0100               	movlb	0	; () banked
  2540  000AC4  516E               	movf	_sample& (0+255),w,b
  2541  000AC6  2433               	addwf	??_calibrate,w,c
  2542  000AC8  6E37               	movwf	(??_calibrate+4)& (0+255),c
  2543  000ACA  516F               	movf	(_sample+1)& (0+255),w,b
  2544  000ACC  2034               	addwfc	??_calibrate+1,w,c
  2545  000ACE  6E38               	movwf	(??_calibrate+5)& (0+255),c
  2546  000AD0  5170               	movf	(_sample+2)& (0+255),w,b
  2547  000AD2  2035               	addwfc	??_calibrate+2,w,c
  2548  000AD4  6E39               	movwf	(??_calibrate+6)& (0+255),c
  2549  000AD6  5171               	movf	(_sample+3)& (0+255),w,b
  2550  000AD8  2036               	addwfc	??_calibrate+3,w,c
  2551  000ADA  6E3A               	movwf	(??_calibrate+7)& (0+255),c
  2552  000ADC  5037               	movf	??_calibrate+4,w,c
  2553  000ADE  27CF               	addwf	_temp_val& (0+255),f,b
  2554  000AE0  5038               	movf	??_calibrate+5,w,c
  2555  000AE2  23D0               	addwfc	(_temp_val+1)& (0+255),f,b
  2556  000AE4  5039               	movf	??_calibrate+6,w,c
  2557  000AE6  23D1               	addwfc	(_temp_val+2)& (0+255),f,b
  2558  000AE8  503A               	movf	??_calibrate+7,w,c
  2559  000AEA  23D2               	addwfc	(_temp_val+3)& (0+255),f,b
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;main.c: 294: MSdelay(20);
  2563  000AEC  0E00               	movlw	0
  2564  000AEE  6E02               	movwf	MSdelay@val+1,c
  2565  000AF0  0E14               	movlw	20
  2566  000AF2  6E01               	movwf	MSdelay@val,c
  2567  000AF4  EC5B  F00E         	call	_MSdelay	;wreg free
  2568                           
  2569                           ;main.c: 295: send_string('.');
  2570  000AF8  0E2E               	movlw	46
  2571  000AFA  6E07               	movwf	send_string@str,c
  2572  000AFC  0E00               	movlw	0
  2573  000AFE  6E08               	movwf	send_string@str+1,c
  2574  000B00  EC5A  F00D         	call	_send_string	;wreg free
  2575  000B04  4A4B               	infsnz	calibrate@i_424,f,c
  2576  000B06  2A4C               	incf	calibrate@i_424+1,f,c
  2577  000B08  D7B9               	goto	l2321
  2578  000B0A                     u1710:
  2579  000B0A                     l2337:
  2580                           
  2581                           ;main.c: 296: }
  2582                           ;main.c: 298: address = 0;
  2583  000B0A  0E00               	movlw	0
  2584  000B0C  6E4D               	movwf	calibrate@address,c
  2585  000B0E  0E00               	movlw	0
  2586  000B10  6E4E               	movwf	calibrate@address+1,c
  2587  000B12  0E00               	movlw	0
  2588  000B14  6E4F               	movwf	calibrate@address+2,c
  2589  000B16  0E00               	movlw	0
  2590  000B18  6E50               	movwf	calibrate@address+3,c
  2591                           
  2592                           ;main.c: 299: EEPROMWritelong(address, sample);
  2593  000B1A  C04D  F004         	movff	calibrate@address,EEPROMWritelong@address
  2594  000B1E  C04E  F005         	movff	calibrate@address+1,EEPROMWritelong@address+1
  2595  000B22  C06E  F006         	movff	_sample,EEPROMWritelong@value
  2596  000B26  C06F  F007         	movff	_sample+1,EEPROMWritelong@value+1
  2597  000B2A  C070  F008         	movff	_sample+2,EEPROMWritelong@value+2
  2598  000B2E  C071  F009         	movff	_sample+3,EEPROMWritelong@value+3
  2599  000B32  ECFE  F00D         	call	_EEPROMWritelong	;wreg free
  2600                           
  2601                           ;main.c: 300: address += 4;
  2602  000B36  0E04               	movlw	4
  2603  000B38  264D               	addwf	calibrate@address,f,c
  2604  000B3A  0E00               	movlw	0
  2605  000B3C  224E               	addwfc	calibrate@address+1,f,c
  2606  000B3E  224F               	addwfc	calibrate@address+2,f,c
  2607  000B40  2250               	addwfc	calibrate@address+3,f,c
  2608                           
  2609                           ;main.c: 302: temp_val = temp_val / 100;
  2610  000B42  C0CF  F001         	movff	_temp_val,___aldiv@dividend
  2611  000B46  C0D0  F002         	movff	_temp_val+1,___aldiv@dividend+1
  2612  000B4A  C0D1  F003         	movff	_temp_val+2,___aldiv@dividend+2
  2613  000B4E  C0D2  F004         	movff	_temp_val+3,___aldiv@dividend+3
  2614  000B52  0E64               	movlw	100
  2615  000B54  6E05               	movwf	___aldiv@divisor,c
  2616  000B56  0E00               	movlw	0
  2617  000B58  6E06               	movwf	___aldiv@divisor+1,c
  2618  000B5A  0E00               	movlw	0
  2619  000B5C  6E07               	movwf	___aldiv@divisor+2,c
  2620  000B5E  0E00               	movlw	0
  2621  000B60  6E08               	movwf	___aldiv@divisor+3,c
  2622  000B62  EC93  F00B         	call	___aldiv	;wreg free
  2623  000B66  C001  F0CF         	movff	?___aldiv,_temp_val
  2624  000B6A  C002  F0D0         	movff	?___aldiv+1,_temp_val+1
  2625  000B6E  C003  F0D1         	movff	?___aldiv+2,_temp_val+2
  2626  000B72  C004  F0D2         	movff	?___aldiv+3,_temp_val+3
  2627                           
  2628                           ;main.c: 304: temp_val_local = -1 * temp_val;
  2629  000B76  C0CF  F033         	movff	_temp_val,??_calibrate
  2630  000B7A  C0D0  F034         	movff	_temp_val+1,??_calibrate+1
  2631  000B7E  C0D1  F035         	movff	_temp_val+2,??_calibrate+2
  2632  000B82  C0D2  F036         	movff	_temp_val+3,??_calibrate+3
  2633  000B86  1E33               	comf	??_calibrate,f,c
  2634  000B88  1E34               	comf	??_calibrate+1,f,c
  2635  000B8A  1E35               	comf	??_calibrate+2,f,c
  2636  000B8C  1E36               	comf	??_calibrate+3,f,c
  2637  000B8E  2A33               	incf	??_calibrate,f,c
  2638  000B90  0E00               	movlw	0
  2639  000B92  2234               	addwfc	??_calibrate+1,f,c
  2640  000B94  2235               	addwfc	??_calibrate+2,f,c
  2641  000B96  2236               	addwfc	??_calibrate+3,f,c
  2642  000B98  C033  F045         	movff	??_calibrate,calibrate@temp_val_local
  2643  000B9C  C034  F046         	movff	??_calibrate+1,calibrate@temp_val_local+1
  2644  000BA0  C035  F047         	movff	??_calibrate+2,calibrate@temp_val_local+2
  2645  000BA4  C036  F048         	movff	??_calibrate+3,calibrate@temp_val_local+3
  2646                           
  2647                           ;main.c: 306: EEPROMWritelong(address, temp_val_local);
  2648  000BA8  C04D  F004         	movff	calibrate@address,EEPROMWritelong@address
  2649  000BAC  C04E  F005         	movff	calibrate@address+1,EEPROMWritelong@address+1
  2650  000BB0  C045  F006         	movff	calibrate@temp_val_local,EEPROMWritelong@value
  2651  000BB4  C046  F007         	movff	calibrate@temp_val_local+1,EEPROMWritelong@value+1
  2652  000BB8  C047  F008         	movff	calibrate@temp_val_local+2,EEPROMWritelong@value+2
  2653  000BBC  C048  F009         	movff	calibrate@temp_val_local+3,EEPROMWritelong@value+3
  2654  000BC0  ECFE  F00D         	call	_EEPROMWritelong	;wreg free
  2655                           
  2656                           ;main.c: 308: intToAscci(temp_val_local, buff);
  2657  000BC4  C045  F00F         	movff	calibrate@temp_val_local,intToAscci@num
  2658  000BC8  C046  F010         	movff	calibrate@temp_val_local+1,intToAscci@num+1
  2659  000BCC  C047  F011         	movff	calibrate@temp_val_local+2,intToAscci@num+2
  2660  000BD0  C048  F012         	movff	calibrate@temp_val_local+3,intToAscci@num+3
  2661  000BD4  0E3B               	movlw	low calibrate@buff
  2662  000BD6  6E13               	movwf	intToAscci@str,c
  2663  000BD8  0E00               	movlw	high calibrate@buff
  2664  000BDA  6E14               	movwf	intToAscci@str+1,c
  2665  000BDC  ECFC  F008         	call	_intToAscci	;wreg free
  2666                           
  2667                           ;main.c: 309: send_string(buff);
  2668  000BE0  0E3B               	movlw	low calibrate@buff
  2669  000BE2  6E07               	movwf	send_string@str,c
  2670  000BE4  0E00               	movlw	high calibrate@buff
  2671  000BE6  6E08               	movwf	send_string@str+1,c
  2672  000BE8  EC5A  F00D         	call	_send_string	;wreg free
  2673                           
  2674                           ;main.c: 311: address = 0;
  2675  000BEC  0E00               	movlw	0
  2676  000BEE  6E4D               	movwf	calibrate@address,c
  2677  000BF0  0E00               	movlw	0
  2678  000BF2  6E4E               	movwf	calibrate@address+1,c
  2679  000BF4  0E00               	movlw	0
  2680  000BF6  6E4F               	movwf	calibrate@address+2,c
  2681  000BF8  0E00               	movlw	0
  2682  000BFA  6E50               	movwf	calibrate@address+3,c
  2683                           
  2684                           ;main.c: 313: sample = EEPROMReadlong(address);
  2685  000BFC  C04D  F003         	movff	calibrate@address,EEPROMReadlong@address
  2686  000C00  C04E  F004         	movff	calibrate@address+1,EEPROMReadlong@address+1
  2687  000C04  C04F  F005         	movff	calibrate@address+2,EEPROMReadlong@address+2
  2688  000C08  C050  F006         	movff	calibrate@address+3,EEPROMReadlong@address+3
  2689  000C0C  EC97  F009         	call	_EEPROMReadlong	;wreg free
  2690  000C10  C003  F06E         	movff	?_EEPROMReadlong,_sample
  2691  000C14  C004  F06F         	movff	?_EEPROMReadlong+1,_sample+1
  2692  000C18  C005  F070         	movff	?_EEPROMReadlong+2,_sample+2
  2693  000C1C  C006  F071         	movff	?_EEPROMReadlong+3,_sample+3
  2694                           
  2695                           ;main.c: 314: address += 4;
  2696  000C20  0E04               	movlw	4
  2697  000C22  264D               	addwf	calibrate@address,f,c
  2698  000C24  0E00               	movlw	0
  2699  000C26  224E               	addwfc	calibrate@address+1,f,c
  2700  000C28  224F               	addwfc	calibrate@address+2,f,c
  2701  000C2A  2250               	addwfc	calibrate@address+3,f,c
  2702                           
  2703                           ;main.c: 315: temp_val = EEPROMReadlong(address);
  2704  000C2C  C04D  F003         	movff	calibrate@address,EEPROMReadlong@address
  2705  000C30  C04E  F004         	movff	calibrate@address+1,EEPROMReadlong@address+1
  2706  000C34  C04F  F005         	movff	calibrate@address+2,EEPROMReadlong@address+2
  2707  000C38  C050  F006         	movff	calibrate@address+3,EEPROMReadlong@address+3
  2708  000C3C  EC97  F009         	call	_EEPROMReadlong	;wreg free
  2709  000C40  C003  F0CF         	movff	?_EEPROMReadlong,_temp_val
  2710  000C44  C004  F0D0         	movff	?_EEPROMReadlong+1,_temp_val+1
  2711  000C48  C005  F0D1         	movff	?_EEPROMReadlong+2,_temp_val+2
  2712  000C4C  C006  F0D2         	movff	?_EEPROMReadlong+3,_temp_val+3
  2713                           
  2714                           ;main.c: 316: val = -1 * (temp_val);
  2715  000C50  C0CF  F033         	movff	_temp_val,??_calibrate
  2716  000C54  C0D0  F034         	movff	_temp_val+1,??_calibrate+1
  2717  000C58  C0D1  F035         	movff	_temp_val+2,??_calibrate+2
  2718  000C5C  C0D2  F036         	movff	_temp_val+3,??_calibrate+3
  2719  000C60  1E33               	comf	??_calibrate,f,c
  2720  000C62  1E34               	comf	??_calibrate+1,f,c
  2721  000C64  1E35               	comf	??_calibrate+2,f,c
  2722  000C66  1E36               	comf	??_calibrate+3,f,c
  2723  000C68  2A33               	incf	??_calibrate,f,c
  2724  000C6A  0E00               	movlw	0
  2725  000C6C  2234               	addwfc	??_calibrate+1,f,c
  2726  000C6E  2235               	addwfc	??_calibrate+2,f,c
  2727  000C70  2236               	addwfc	??_calibrate+3,f,c
  2728  000C72  C033  F009         	movff	??_calibrate,___altoft@c
  2729  000C76  C034  F00A         	movff	??_calibrate+1,___altoft@c+1
  2730  000C7A  C035  F00B         	movff	??_calibrate+2,___altoft@c+2
  2731  000C7E  C036  F00C         	movff	??_calibrate+3,___altoft@c+3
  2732  000C82  ECE5  F00C         	call	___altoft	;wreg free
  2733  000C86  C009  F0B6         	movff	?___altoft,_val
  2734  000C8A  C00A  F0B7         	movff	?___altoft+1,_val+1
  2735  000C8E  C00B  F0B8         	movff	?___altoft+2,_val+2
  2736                           
  2737                           ;main.c: 318: val = val / 300.0;
  2738  000C92  C0B6  F013         	movff	_val,___ftdiv@f1
  2739  000C96  C0B7  F014         	movff	_val+1,___ftdiv@f1+1
  2740  000C9A  C0B8  F015         	movff	_val+2,___ftdiv@f1+2
  2741  000C9E  0E00               	movlw	0
  2742  000CA0  6E16               	movwf	___ftdiv@f2,c
  2743  000CA2  0E96               	movlw	150
  2744  000CA4  6E17               	movwf	___ftdiv@f2+1,c
  2745  000CA6  0E43               	movlw	67
  2746  000CA8  6E18               	movwf	___ftdiv@f2+2,c
  2747  000CAA  EC20  F00B         	call	___ftdiv	;wreg free
  2748  000CAE  C013  F0B6         	movff	?___ftdiv,_val
  2749  000CB2  C014  F0B7         	movff	?___ftdiv+1,_val+1
  2750  000CB6  C015  F0B8         	movff	?___ftdiv+2,_val+2
  2751  000CBA  0012               	return		;funcret
  2752  000CBC                     __end_of_calibrate:
  2753                           	opt stack 0
  2754                           tblptru	equ	0xFF8
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           status	equ	0xFD8
  2758                           
  2759 ;; *************** function _send_string *****************
  2760 ;; Defined at:
  2761 ;;		line 3 in file "USART.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;  str             2    6[COMRAM] PTR unsigned char 
  2764 ;;		 -> STR_13(16), RAM(2047), STR_10(22), calibrate@buff(10), 
  2765 ;;		 -> STR_7(15), STR_5(5), STR_4(6), main@buff(10), 
  2766 ;;		 -> STR_3(9), STR_2(12), STR_1(9), 
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;  sndstr_cnt      2   10[COMRAM] int 
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  1    wreg      void 
  2771 ;; Registers used:
  2772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2778 ;;      Params:         2       0       0       0       0       0       0       0       0
  2779 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2780 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2781 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2782 ;;Total ram usage:        6 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    2
  2785 ;; This function calls:
  2786 ;;		_txr
  2787 ;; This function is called by:
  2788 ;;		_main
  2789 ;;		_calibrate
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text8
  2794  001AB4                     __ptext8:
  2795                           	opt stack 0
  2796  001AB4                     _send_string:
  2797                           	opt stack 28
  2798                           
  2799                           ;USART.c: 5: int sndstr_cnt =0;
  2800                           
  2801                           ;incstack = 0
  2802  001AB4  0E00               	movlw	0
  2803  001AB6  6E0C               	movwf	send_string@sndstr_cnt+1,c
  2804  001AB8  0E00               	movlw	0
  2805  001ABA  6E0B               	movwf	send_string@sndstr_cnt,c
  2806                           
  2807                           ;USART.c: 7: while (str[sndstr_cnt] != 0x00)
  2808  001ABC  D01A               	goto	l251
  2809  001ABE                     
  2810                           ;USART.c: 8: {
  2811                           ;USART.c: 9: txr(str[sndstr_cnt]);
  2812  001ABE  500B               	movf	send_string@sndstr_cnt,w,c
  2813  001AC0  2407               	addwf	send_string@str,w,c
  2814  001AC2  6E09               	movwf	??_send_string& (0+255),c
  2815  001AC4  500C               	movf	send_string@sndstr_cnt+1,w,c
  2816  001AC6  2008               	addwfc	send_string@str+1,w,c
  2817  001AC8  6E0A               	movwf	(??_send_string+1)& (0+255),c
  2818  001ACA  C009  FFF6         	movff	??_send_string,tblptrl
  2819  001ACE  C00A  FFF7         	movff	??_send_string+1,tblptrh
  2820  001AD2  6AF8               	clrf	tblptru,c
  2821  001AD4  0E07               	movlw	(high __ramtop+-1)
  2822  001AD6  64F7               	cpfsgt	tblptrh,c
  2823  001AD8  D003               	bra	u1527
  2824  001ADA  0008               	tblrd		*
  2825  001ADC  50F5               	movf	tablat,w,c
  2826  001ADE  D005               	bra	u1520
  2827  001AE0                     u1527:
  2828  001AE0  CFF6 FFE9          	movff	tblptrl,fsr0l
  2829  001AE4  CFF7 FFEA          	movff	tblptrh,fsr0h
  2830  001AE8  50EF               	movf	indf0,w,c
  2831  001AEA                     u1520:
  2832  001AEA  EC0F  F00F         	call	_txr
  2833                           
  2834                           ;USART.c: 10: sndstr_cnt++;
  2835  001AEE  4A0B               	infsnz	send_string@sndstr_cnt,f,c
  2836  001AF0  2A0C               	incf	send_string@sndstr_cnt+1,f,c
  2837  001AF2                     l251:
  2838  001AF2  500B               	movf	send_string@sndstr_cnt,w,c
  2839  001AF4  2407               	addwf	send_string@str,w,c
  2840  001AF6  6E09               	movwf	??_send_string& (0+255),c
  2841  001AF8  500C               	movf	send_string@sndstr_cnt+1,w,c
  2842  001AFA  2008               	addwfc	send_string@str+1,w,c
  2843  001AFC  6E0A               	movwf	(??_send_string+1)& (0+255),c
  2844  001AFE  C009  FFF6         	movff	??_send_string,tblptrl
  2845  001B02  C00A  FFF7         	movff	??_send_string+1,tblptrh
  2846  001B06  6AF8               	clrf	tblptru,c
  2847  001B08  0E07               	movlw	(high __ramtop+-1)
  2848  001B0A  64F7               	cpfsgt	tblptrh,c
  2849  001B0C  D003               	bra	u1537
  2850  001B0E  0008               	tblrd		*
  2851  001B10  50F5               	movf	tablat,w,c
  2852  001B12  D005               	bra	u1530
  2853  001B14                     u1537:
  2854  001B14  CFF6 FFE9          	movff	tblptrl,fsr0l
  2855  001B18  CFF7 FFEA          	movff	tblptrh,fsr0h
  2856  001B1C  50EF               	movf	indf0,w,c
  2857  001B1E                     u1530:
  2858  001B1E  0900               	iorlw	0
  2859  001B20  B4D8               	btfsc	status,2,c
  2860  001B22  0012               	return	
  2861  001B24  D7CC               	goto	l252
  2862  001B26                     __end_of_send_string:
  2863                           	opt stack 0
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           indf0	equ	0xFEF
  2869                           postinc0	equ	0xFEE
  2870                           fsr0h	equ	0xFEA
  2871                           fsr0l	equ	0xFE9
  2872                           wreg	equ	0xFE8
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _intToAscci *****************
  2876 ;; Defined at:
  2877 ;;		line 50 in file "USART.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  num             4   14[COMRAM] long 
  2880 ;;  str             2   18[COMRAM] PTR unsigned char 
  2881 ;;		 -> calibrate@buff(10), main@buff(10), 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  rem             2   20[COMRAM] int 
  2884 ;;  temp_num        4   24[COMRAM] long 
  2885 ;;  counter         2   28[COMRAM] int 
  2886 ;;  tempCount       2   22[COMRAM] int 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  2   14[COMRAM] PTR unsigned char 
  2889 ;; Registers used:
  2890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2896 ;;      Params:         6       0       0       0       0       0       0       0       0
  2897 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2898 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2899 ;;      Totals:        16       0       0       0       0       0       0       0       0
  2900 ;;Total ram usage:       16 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    1
  2903 ;; This function calls:
  2904 ;;		___aldiv
  2905 ;;		___almod
  2906 ;; This function is called by:
  2907 ;;		_main
  2908 ;;		_calibrate
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text9
  2913  0011F8                     __ptext9:
  2914                           	opt stack 0
  2915  0011F8                     _intToAscci:
  2916                           	opt stack 29
  2917                           
  2918                           ;USART.c: 52: long temp_num = num;
  2919                           
  2920                           ;incstack = 0
  2921  0011F8  C00F  F019         	movff	intToAscci@num,intToAscci@temp_num
  2922  0011FC  C010  F01A         	movff	intToAscci@num+1,intToAscci@temp_num+1
  2923  001200  C011  F01B         	movff	intToAscci@num+2,intToAscci@temp_num+2
  2924  001204  C012  F01C         	movff	intToAscci@num+3,intToAscci@temp_num+3
  2925                           
  2926                           ;USART.c: 53: int counter=0;
  2927  001208  0E00               	movlw	0
  2928  00120A  6E1E               	movwf	intToAscci@counter+1,c
  2929  00120C  0E00               	movlw	0
  2930  00120E  6E1D               	movwf	intToAscci@counter,c
  2931                           
  2932                           ;USART.c: 54: int tempCount=0;
  2933  001210  0E00               	movlw	0
  2934  001212  6E18               	movwf	intToAscci@tempCount+1,c
  2935  001214  0E00               	movlw	0
  2936  001216  6E17               	movwf	intToAscci@tempCount,c
  2937                           
  2938                           ;USART.c: 55: while(temp_num != 0)
  2939  001218  D01C               	goto	l275
  2940  00121A                     
  2941                           ;USART.c: 56: {
  2942                           ;USART.c: 58: temp_num /= 10;
  2943  00121A  C019  F001         	movff	intToAscci@temp_num,___aldiv@dividend
  2944  00121E  C01A  F002         	movff	intToAscci@temp_num+1,___aldiv@dividend+1
  2945  001222  C01B  F003         	movff	intToAscci@temp_num+2,___aldiv@dividend+2
  2946  001226  C01C  F004         	movff	intToAscci@temp_num+3,___aldiv@dividend+3
  2947  00122A  0E0A               	movlw	10
  2948  00122C  6E05               	movwf	___aldiv@divisor,c
  2949  00122E  0E00               	movlw	0
  2950  001230  6E06               	movwf	___aldiv@divisor+1,c
  2951  001232  0E00               	movlw	0
  2952  001234  6E07               	movwf	___aldiv@divisor+2,c
  2953  001236  0E00               	movlw	0
  2954  001238  6E08               	movwf	___aldiv@divisor+3,c
  2955  00123A  EC93  F00B         	call	___aldiv	;wreg free
  2956  00123E  C001  F019         	movff	?___aldiv,intToAscci@temp_num
  2957  001242  C002  F01A         	movff	?___aldiv+1,intToAscci@temp_num+1
  2958  001246  C003  F01B         	movff	?___aldiv+2,intToAscci@temp_num+2
  2959  00124A  C004  F01C         	movff	?___aldiv+3,intToAscci@temp_num+3
  2960                           
  2961                           ;USART.c: 59: counter++;
  2962  00124E  4A1D               	infsnz	intToAscci@counter,f,c
  2963  001250  2A1E               	incf	intToAscci@counter+1,f,c
  2964  001252                     l275:
  2965  001252  5019               	movf	intToAscci@temp_num,w,c
  2966  001254  101A               	iorwf	intToAscci@temp_num+1,w,c
  2967  001256  101B               	iorwf	intToAscci@temp_num+2,w,c
  2968  001258  101C               	iorwf	intToAscci@temp_num+3,w,c
  2969  00125A  A4D8               	btfss	status,2,c
  2970  00125C  D7DE               	goto	l276
  2971                           
  2972                           ;USART.c: 60: }
  2973                           ;USART.c: 61: if(num<=0)
  2974  00125E  BE12               	btfsc	intToAscci@num+3,7,c
  2975  001260  D007               	goto	u1560
  2976  001262  5012               	movf	intToAscci@num+3,w,c
  2977  001264  1011               	iorwf	intToAscci@num+2,w,c
  2978  001266  1010               	iorwf	intToAscci@num+1,w,c
  2979  001268  E112               	bnz	l278
  2980  00126A  040F               	decf	intToAscci@num,w,c
  2981  00126C  B0D8               	btfsc	status,0,c
  2982  00126E  D00F               	goto	l278
  2983  001270                     u1560:
  2984                           
  2985                           ;USART.c: 62: {
  2986                           ;USART.c: 63: str[0] ='0';
  2987  001270  C013  FFD9         	movff	intToAscci@str,fsr2l
  2988  001274  C014  FFDA         	movff	intToAscci@str+1,fsr2h
  2989  001278  0E30               	movlw	48
  2990  00127A  6EDF               	movwf	indf2,c
  2991                           
  2992                           ;USART.c: 64: str[1] =0;
  2993  00127C  EE20 F001          	lfsr	2,1
  2994  001280  5013               	movf	intToAscci@str,w,c
  2995  001282  26D9               	addwf	fsr2l,f,c
  2996  001284  5014               	movf	intToAscci@str+1,w,c
  2997  001286  22DA               	addwfc	fsr2h,f,c
  2998  001288  0E00               	movlw	0
  2999  00128A  6EDF               	movwf	indf2,c
  3000                           
  3001                           ;USART.c: 65: return str;
  3002                           ;	Return value of _intToAscci is never used
  3003  00128C  0012               	return	
  3004  00128E                     l278:
  3005                           
  3006                           ;USART.c: 66: }
  3007                           ;USART.c: 67: tempCount = counter;
  3008  00128E  C01D  F017         	movff	intToAscci@counter,intToAscci@tempCount
  3009  001292  C01E  F018         	movff	intToAscci@counter+1,intToAscci@tempCount+1
  3010                           
  3011                           ;USART.c: 68: while (num != 0)
  3012  001296  D03C               	goto	l280
  3013  001298                     
  3014                           ;USART.c: 69: {
  3015                           ;USART.c: 70: int rem = num % 10;
  3016  001298  C00F  F001         	movff	intToAscci@num,___almod@dividend
  3017  00129C  C010  F002         	movff	intToAscci@num+1,___almod@dividend+1
  3018  0012A0  C011  F003         	movff	intToAscci@num+2,___almod@dividend+2
  3019  0012A4  C012  F004         	movff	intToAscci@num+3,___almod@dividend+3
  3020  0012A8  0E0A               	movlw	10
  3021  0012AA  6E05               	movwf	___almod@divisor,c
  3022  0012AC  0E00               	movlw	0
  3023  0012AE  6E06               	movwf	___almod@divisor+1,c
  3024  0012B0  0E00               	movlw	0
  3025  0012B2  6E07               	movwf	___almod@divisor+2,c
  3026  0012B4  0E00               	movlw	0
  3027  0012B6  6E08               	movwf	___almod@divisor+3,c
  3028  0012B8  EC50  F00C         	call	___almod	;wreg free
  3029  0012BC  C001  F015         	movff	?___almod,intToAscci@rem
  3030  0012C0  C002  F016         	movff	?___almod+1,intToAscci@rem+1
  3031                           
  3032                           ;USART.c: 71: str[--counter] = rem+'0';
  3033  0012C4  061D               	decf	intToAscci@counter,f,c
  3034  0012C6  A0D8               	btfss	status,0,c
  3035  0012C8  061E               	decf	intToAscci@counter+1,f,c
  3036  0012CA  501D               	movf	intToAscci@counter,w,c
  3037  0012CC  2413               	addwf	intToAscci@str,w,c
  3038  0012CE  6ED9               	movwf	fsr2l,c
  3039  0012D0  501E               	movf	intToAscci@counter+1,w,c
  3040  0012D2  2014               	addwfc	intToAscci@str+1,w,c
  3041  0012D4  6EDA               	movwf	fsr2h,c
  3042  0012D6  5015               	movf	intToAscci@rem,w,c
  3043  0012D8  0F30               	addlw	48
  3044  0012DA  6EDF               	movwf	indf2,c
  3045                           
  3046                           ;USART.c: 72: num = num/10;
  3047  0012DC  C00F  F001         	movff	intToAscci@num,___aldiv@dividend
  3048  0012E0  C010  F002         	movff	intToAscci@num+1,___aldiv@dividend+1
  3049  0012E4  C011  F003         	movff	intToAscci@num+2,___aldiv@dividend+2
  3050  0012E8  C012  F004         	movff	intToAscci@num+3,___aldiv@dividend+3
  3051  0012EC  0E0A               	movlw	10
  3052  0012EE  6E05               	movwf	___aldiv@divisor,c
  3053  0012F0  0E00               	movlw	0
  3054  0012F2  6E06               	movwf	___aldiv@divisor+1,c
  3055  0012F4  0E00               	movlw	0
  3056  0012F6  6E07               	movwf	___aldiv@divisor+2,c
  3057  0012F8  0E00               	movlw	0
  3058  0012FA  6E08               	movwf	___aldiv@divisor+3,c
  3059  0012FC  EC93  F00B         	call	___aldiv	;wreg free
  3060  001300  C001  F00F         	movff	?___aldiv,intToAscci@num
  3061  001304  C002  F010         	movff	?___aldiv+1,intToAscci@num+1
  3062  001308  C003  F011         	movff	?___aldiv+2,intToAscci@num+2
  3063  00130C  C004  F012         	movff	?___aldiv+3,intToAscci@num+3
  3064  001310                     l280:
  3065  001310  500F               	movf	intToAscci@num,w,c
  3066  001312  1010               	iorwf	intToAscci@num+1,w,c
  3067  001314  1011               	iorwf	intToAscci@num+2,w,c
  3068  001316  1012               	iorwf	intToAscci@num+3,w,c
  3069  001318  A4D8               	btfss	status,2,c
  3070  00131A  D7BE               	goto	l281
  3071                           
  3072                           ;USART.c: 73: }
  3073                           ;USART.c: 74: str[tempCount] = '\0';
  3074  00131C  5017               	movf	intToAscci@tempCount,w,c
  3075  00131E  2413               	addwf	intToAscci@str,w,c
  3076  001320  6ED9               	movwf	fsr2l,c
  3077  001322  5018               	movf	intToAscci@tempCount+1,w,c
  3078  001324  2014               	addwfc	intToAscci@str+1,w,c
  3079  001326  6EDA               	movwf	fsr2h,c
  3080  001328  0E00               	movlw	0
  3081  00132A  6EDF               	movwf	indf2,c
  3082  00132C  0012               	return	
  3083  00132E                     __end_of_intToAscci:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           indf0	equ	0xFEF
  3090                           postinc0	equ	0xFEE
  3091                           fsr0h	equ	0xFEA
  3092                           fsr0l	equ	0xFE9
  3093                           wreg	equ	0xFE8
  3094                           indf2	equ	0xFDF
  3095                           fsr2h	equ	0xFDA
  3096                           fsr2l	equ	0xFD9
  3097                           status	equ	0xFD8
  3098                           
  3099 ;; *************** function ___almod *****************
  3100 ;; Defined at:
  3101 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;  dividend        4    0[COMRAM] long 
  3104 ;;  divisor         4    4[COMRAM] long 
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  sign            1    9[COMRAM] unsigned char 
  3107 ;;  counter         1    8[COMRAM] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  4    0[COMRAM] long 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3117 ;;      Params:         8       0       0       0       0       0       0       0       0
  3118 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3120 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3121 ;;Total ram usage:       10 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; This function calls:
  3124 ;;		Nothing
  3125 ;; This function is called by:
  3126 ;;		_intToAscci
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text10
  3131  0018A0                     __ptext10:
  3132                           	opt stack 0
  3133  0018A0                     ___almod:
  3134                           	opt stack 29
  3135                           
  3136                           ;incstack = 0
  3137  0018A0  0E00               	movlw	0
  3138  0018A2  6E0A               	movwf	___almod@sign,c
  3139  0018A4  AE04               	btfss	___almod@dividend+3,7,c
  3140  0018A6  D00A               	goto	l378
  3141  0018A8  1E04               	comf	___almod@dividend+3,f,c
  3142  0018AA  1E03               	comf	___almod@dividend+2,f,c
  3143  0018AC  1E02               	comf	___almod@dividend+1,f,c
  3144  0018AE  6C01               	negf	___almod@dividend,c
  3145  0018B0  0E00               	movlw	0
  3146  0018B2  2202               	addwfc	___almod@dividend+1,f,c
  3147  0018B4  2203               	addwfc	___almod@dividend+2,f,c
  3148  0018B6  2204               	addwfc	___almod@dividend+3,f,c
  3149  0018B8  0E01               	movlw	1
  3150  0018BA  6E0A               	movwf	___almod@sign,c
  3151  0018BC                     l378:
  3152  0018BC  AE08               	btfss	___almod@divisor+3,7,c
  3153  0018BE  D008               	goto	l379
  3154  0018C0  1E08               	comf	___almod@divisor+3,f,c
  3155  0018C2  1E07               	comf	___almod@divisor+2,f,c
  3156  0018C4  1E06               	comf	___almod@divisor+1,f,c
  3157  0018C6  6C05               	negf	___almod@divisor,c
  3158  0018C8  0E00               	movlw	0
  3159  0018CA  2206               	addwfc	___almod@divisor+1,f,c
  3160  0018CC  2207               	addwfc	___almod@divisor+2,f,c
  3161  0018CE  2208               	addwfc	___almod@divisor+3,f,c
  3162  0018D0                     l379:
  3163  0018D0  5005               	movf	___almod@divisor,w,c
  3164  0018D2  1006               	iorwf	___almod@divisor+1,w,c
  3165  0018D4  1007               	iorwf	___almod@divisor+2,w,c
  3166  0018D6  1008               	iorwf	___almod@divisor+3,w,c
  3167  0018D8  B4D8               	btfsc	status,2,c
  3168  0018DA  D024               	goto	l386
  3169  0018DC  0E01               	movlw	1
  3170  0018DE  6E09               	movwf	___almod@counter,c
  3171  0018E0  D006               	goto	l381
  3172  0018E2  90D8               	bcf	status,0,c
  3173  0018E4  3605               	rlcf	___almod@divisor,f,c
  3174  0018E6  3606               	rlcf	___almod@divisor+1,f,c
  3175  0018E8  3607               	rlcf	___almod@divisor+2,f,c
  3176  0018EA  3608               	rlcf	___almod@divisor+3,f,c
  3177  0018EC  2A09               	incf	___almod@counter,f,c
  3178  0018EE                     l381:
  3179  0018EE  AE08               	btfss	___almod@divisor+3,7,c
  3180  0018F0  D7F8               	goto	l382
  3181  0018F2                     u1140:
  3182  0018F2  5005               	movf	___almod@divisor,w,c
  3183  0018F4  5C01               	subwf	___almod@dividend,w,c
  3184  0018F6  5006               	movf	___almod@divisor+1,w,c
  3185  0018F8  5802               	subwfb	___almod@dividend+1,w,c
  3186  0018FA  5007               	movf	___almod@divisor+2,w,c
  3187  0018FC  5803               	subwfb	___almod@dividend+2,w,c
  3188  0018FE  5008               	movf	___almod@divisor+3,w,c
  3189  001900  5804               	subwfb	___almod@dividend+3,w,c
  3190  001902  A0D8               	btfss	status,0,c
  3191  001904  D008               	goto	l385
  3192  001906  5005               	movf	___almod@divisor,w,c
  3193  001908  5E01               	subwf	___almod@dividend,f,c
  3194  00190A  5006               	movf	___almod@divisor+1,w,c
  3195  00190C  5A02               	subwfb	___almod@dividend+1,f,c
  3196  00190E  5007               	movf	___almod@divisor+2,w,c
  3197  001910  5A03               	subwfb	___almod@dividend+2,f,c
  3198  001912  5008               	movf	___almod@divisor+3,w,c
  3199  001914  5A04               	subwfb	___almod@dividend+3,f,c
  3200  001916                     l385:
  3201  001916  90D8               	bcf	status,0,c
  3202  001918  3208               	rrcf	___almod@divisor+3,f,c
  3203  00191A  3207               	rrcf	___almod@divisor+2,f,c
  3204  00191C  3206               	rrcf	___almod@divisor+1,f,c
  3205  00191E  3205               	rrcf	___almod@divisor,f,c
  3206  001920  2E09               	decfsz	___almod@counter,f,c
  3207  001922  D7E7               	goto	u1140
  3208  001924                     l386:
  3209  001924  500A               	movf	___almod@sign,w,c
  3210  001926  B4D8               	btfsc	status,2,c
  3211  001928  D008               	goto	l387
  3212  00192A  1E04               	comf	___almod@dividend+3,f,c
  3213  00192C  1E03               	comf	___almod@dividend+2,f,c
  3214  00192E  1E02               	comf	___almod@dividend+1,f,c
  3215  001930  6C01               	negf	___almod@dividend,c
  3216  001932  0E00               	movlw	0
  3217  001934  2202               	addwfc	___almod@dividend+1,f,c
  3218  001936  2203               	addwfc	___almod@dividend+2,f,c
  3219  001938  2204               	addwfc	___almod@dividend+3,f,c
  3220  00193A                     l387:
  3221  00193A  C001  F001         	movff	___almod@dividend,?___almod
  3222  00193E  C002  F002         	movff	___almod@dividend+1,?___almod+1
  3223  001942  C003  F003         	movff	___almod@dividend+2,?___almod+2
  3224  001946  C004  F004         	movff	___almod@dividend+3,?___almod+3
  3225  00194A  0012               	return	
  3226  00194C                     __end_of___almod:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           tblptrl	equ	0xFF6
  3231                           tablat	equ	0xFF5
  3232                           indf0	equ	0xFEF
  3233                           postinc0	equ	0xFEE
  3234                           fsr0h	equ	0xFEA
  3235                           fsr0l	equ	0xFE9
  3236                           wreg	equ	0xFE8
  3237                           indf2	equ	0xFDF
  3238                           fsr2h	equ	0xFDA
  3239                           fsr2l	equ	0xFD9
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function ___aldiv *****************
  3243 ;; Defined at:
  3244 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  dividend        4    0[COMRAM] long 
  3247 ;;  divisor         4    4[COMRAM] long 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  quotient        4   10[COMRAM] long 
  3250 ;;  sign            1    9[COMRAM] unsigned char 
  3251 ;;  counter         1    8[COMRAM] unsigned char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  4    0[COMRAM] long 
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3261 ;;      Params:         8       0       0       0       0       0       0       0       0
  3262 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3264 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3265 ;;Total ram usage:       14 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; This function calls:
  3268 ;;		Nothing
  3269 ;; This function is called by:
  3270 ;;		_calibrate
  3271 ;;		_intToAscci
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           	psect	text11
  3276  001726                     __ptext11:
  3277                           	opt stack 0
  3278  001726                     ___aldiv:
  3279                           	opt stack 29
  3280                           
  3281                           ;incstack = 0
  3282  001726  0E00               	movlw	0
  3283  001728  6E0A               	movwf	___aldiv@sign,c
  3284  00172A  AE08               	btfss	___aldiv@divisor+3,7,c
  3285  00172C  D00A               	goto	l365
  3286  00172E  1E08               	comf	___aldiv@divisor+3,f,c
  3287  001730  1E07               	comf	___aldiv@divisor+2,f,c
  3288  001732  1E06               	comf	___aldiv@divisor+1,f,c
  3289  001734  6C05               	negf	___aldiv@divisor,c
  3290  001736  0E00               	movlw	0
  3291  001738  2206               	addwfc	___aldiv@divisor+1,f,c
  3292  00173A  2207               	addwfc	___aldiv@divisor+2,f,c
  3293  00173C  2208               	addwfc	___aldiv@divisor+3,f,c
  3294  00173E  0E01               	movlw	1
  3295  001740  6E0A               	movwf	___aldiv@sign,c
  3296  001742                     l365:
  3297  001742  AE04               	btfss	___aldiv@dividend+3,7,c
  3298  001744  D00A               	goto	l366
  3299  001746  1E04               	comf	___aldiv@dividend+3,f,c
  3300  001748  1E03               	comf	___aldiv@dividend+2,f,c
  3301  00174A  1E02               	comf	___aldiv@dividend+1,f,c
  3302  00174C  6C01               	negf	___aldiv@dividend,c
  3303  00174E  0E00               	movlw	0
  3304  001750  2202               	addwfc	___aldiv@dividend+1,f,c
  3305  001752  2203               	addwfc	___aldiv@dividend+2,f,c
  3306  001754  2204               	addwfc	___aldiv@dividend+3,f,c
  3307  001756  0E01               	movlw	1
  3308  001758  1A0A               	xorwf	___aldiv@sign,f,c
  3309  00175A                     l366:
  3310  00175A  0E00               	movlw	0
  3311  00175C  6E0B               	movwf	___aldiv@quotient,c
  3312  00175E  0E00               	movlw	0
  3313  001760  6E0C               	movwf	___aldiv@quotient+1,c
  3314  001762  0E00               	movlw	0
  3315  001764  6E0D               	movwf	___aldiv@quotient+2,c
  3316  001766  0E00               	movlw	0
  3317  001768  6E0E               	movwf	___aldiv@quotient+3,c
  3318  00176A  5005               	movf	___aldiv@divisor,w,c
  3319  00176C  1006               	iorwf	___aldiv@divisor+1,w,c
  3320  00176E  1007               	iorwf	___aldiv@divisor+2,w,c
  3321  001770  1008               	iorwf	___aldiv@divisor+3,w,c
  3322  001772  B4D8               	btfsc	status,2,c
  3323  001774  D02A               	goto	l373
  3324  001776  0E01               	movlw	1
  3325  001778  6E09               	movwf	___aldiv@counter,c
  3326  00177A  D006               	goto	l368
  3327  00177C  90D8               	bcf	status,0,c
  3328  00177E  3605               	rlcf	___aldiv@divisor,f,c
  3329  001780  3606               	rlcf	___aldiv@divisor+1,f,c
  3330  001782  3607               	rlcf	___aldiv@divisor+2,f,c
  3331  001784  3608               	rlcf	___aldiv@divisor+3,f,c
  3332  001786  2A09               	incf	___aldiv@counter,f,c
  3333  001788                     l368:
  3334  001788  AE08               	btfss	___aldiv@divisor+3,7,c
  3335  00178A  D7F8               	goto	l369
  3336  00178C                     u1080:
  3337  00178C  90D8               	bcf	status,0,c
  3338  00178E  360B               	rlcf	___aldiv@quotient,f,c
  3339  001790  360C               	rlcf	___aldiv@quotient+1,f,c
  3340  001792  360D               	rlcf	___aldiv@quotient+2,f,c
  3341  001794  360E               	rlcf	___aldiv@quotient+3,f,c
  3342  001796  5005               	movf	___aldiv@divisor,w,c
  3343  001798  5C01               	subwf	___aldiv@dividend,w,c
  3344  00179A  5006               	movf	___aldiv@divisor+1,w,c
  3345  00179C  5802               	subwfb	___aldiv@dividend+1,w,c
  3346  00179E  5007               	movf	___aldiv@divisor+2,w,c
  3347  0017A0  5803               	subwfb	___aldiv@dividend+2,w,c
  3348  0017A2  5008               	movf	___aldiv@divisor+3,w,c
  3349  0017A4  5804               	subwfb	___aldiv@dividend+3,w,c
  3350  0017A6  A0D8               	btfss	status,0,c
  3351  0017A8  D009               	goto	l372
  3352  0017AA  5005               	movf	___aldiv@divisor,w,c
  3353  0017AC  5E01               	subwf	___aldiv@dividend,f,c
  3354  0017AE  5006               	movf	___aldiv@divisor+1,w,c
  3355  0017B0  5A02               	subwfb	___aldiv@dividend+1,f,c
  3356  0017B2  5007               	movf	___aldiv@divisor+2,w,c
  3357  0017B4  5A03               	subwfb	___aldiv@dividend+2,f,c
  3358  0017B6  5008               	movf	___aldiv@divisor+3,w,c
  3359  0017B8  5A04               	subwfb	___aldiv@dividend+3,f,c
  3360  0017BA  800B               	bsf	___aldiv@quotient,0,c
  3361  0017BC                     l372:
  3362  0017BC  90D8               	bcf	status,0,c
  3363  0017BE  3208               	rrcf	___aldiv@divisor+3,f,c
  3364  0017C0  3207               	rrcf	___aldiv@divisor+2,f,c
  3365  0017C2  3206               	rrcf	___aldiv@divisor+1,f,c
  3366  0017C4  3205               	rrcf	___aldiv@divisor,f,c
  3367  0017C6  2E09               	decfsz	___aldiv@counter,f,c
  3368  0017C8  D7E1               	goto	u1080
  3369  0017CA                     l373:
  3370  0017CA  500A               	movf	___aldiv@sign,w,c
  3371  0017CC  B4D8               	btfsc	status,2,c
  3372  0017CE  D008               	goto	l374
  3373  0017D0  1E0E               	comf	___aldiv@quotient+3,f,c
  3374  0017D2  1E0D               	comf	___aldiv@quotient+2,f,c
  3375  0017D4  1E0C               	comf	___aldiv@quotient+1,f,c
  3376  0017D6  6C0B               	negf	___aldiv@quotient,c
  3377  0017D8  0E00               	movlw	0
  3378  0017DA  220C               	addwfc	___aldiv@quotient+1,f,c
  3379  0017DC  220D               	addwfc	___aldiv@quotient+2,f,c
  3380  0017DE  220E               	addwfc	___aldiv@quotient+3,f,c
  3381  0017E0                     l374:
  3382  0017E0  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  3383  0017E4  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  3384  0017E8  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  3385  0017EC  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  3386  0017F0  0012               	return	
  3387  0017F2                     __end_of___aldiv:
  3388                           	opt stack 0
  3389                           tblptru	equ	0xFF8
  3390                           tblptrh	equ	0xFF7
  3391                           tblptrl	equ	0xFF6
  3392                           tablat	equ	0xFF5
  3393                           indf0	equ	0xFEF
  3394                           postinc0	equ	0xFEE
  3395                           fsr0h	equ	0xFEA
  3396                           fsr0l	equ	0xFE9
  3397                           wreg	equ	0xFE8
  3398                           indf2	equ	0xFDF
  3399                           fsr2h	equ	0xFDA
  3400                           fsr2l	equ	0xFD9
  3401                           status	equ	0xFD8
  3402                           
  3403 ;; *************** function ___ftdiv *****************
  3404 ;; Defined at:
  3405 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  f1              3   18[COMRAM] float 
  3408 ;;  f2              3   21[COMRAM] float 
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;  f3              3   28[COMRAM] float 
  3411 ;;  sign            1   32[COMRAM] unsigned char 
  3412 ;;  exp             1   31[COMRAM] unsigned char 
  3413 ;;  cntr            1   27[COMRAM] unsigned char 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  3   18[COMRAM] float 
  3416 ;; Registers used:
  3417 ;;		wreg, status,2, status,0, cstack
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3423 ;;      Params:         6       0       0       0       0       0       0       0       0
  3424 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3425 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3426 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3427 ;;Total ram usage:       15 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    1
  3430 ;; This function calls:
  3431 ;;		___ftpack
  3432 ;; This function is called by:
  3433 ;;		_main
  3434 ;;		_calibrate
  3435 ;;		_USART_Init
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           	psect	text12
  3440  001640                     __ptext12:
  3441                           	opt stack 0
  3442  001640                     ___ftdiv:
  3443                           	opt stack 27
  3444                           
  3445                           ;incstack = 0
  3446  001640  C015  F019         	movff	___ftdiv@f1+2,??___ftdiv
  3447  001644  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  3448  001646  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  3449  001648  3414               	rlcf	___ftdiv@f1+1,w,c
  3450  00164A  3619               	rlcf	??___ftdiv& (0+255),f,c
  3451  00164C  E301               	bnc	u1381
  3452  00164E  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  3453  001650                     u1381:
  3454  001650  5019               	movf	??___ftdiv,w,c
  3455  001652  6E20               	movwf	___ftdiv@exp,c
  3456  001654  5020               	movf	___ftdiv@exp,w,c
  3457  001656  A4D8               	btfss	status,2,c
  3458  001658  D007               	goto	l588
  3459  00165A  0E00               	movlw	0
  3460  00165C  6E13               	movwf	?___ftdiv,c
  3461  00165E  0E00               	movlw	0
  3462  001660  6E14               	movwf	?___ftdiv+1,c
  3463  001662  0E00               	movlw	0
  3464  001664  6E15               	movwf	?___ftdiv+2,c
  3465  001666  0012               	return	
  3466  001668                     l588:
  3467  001668  C018  F019         	movff	___ftdiv@f2+2,??___ftdiv
  3468  00166C  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  3469  00166E  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  3470  001670  3417               	rlcf	___ftdiv@f2+1,w,c
  3471  001672  3619               	rlcf	??___ftdiv& (0+255),f,c
  3472  001674  E301               	bnc	u1401
  3473  001676  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  3474  001678                     u1401:
  3475  001678  5019               	movf	??___ftdiv,w,c
  3476  00167A  6E21               	movwf	___ftdiv@sign,c
  3477  00167C  5021               	movf	___ftdiv@sign,w,c
  3478  00167E  A4D8               	btfss	status,2,c
  3479  001680  D007               	goto	l590
  3480  001682  0E00               	movlw	0
  3481  001684  6E13               	movwf	?___ftdiv,c
  3482  001686  0E00               	movlw	0
  3483  001688  6E14               	movwf	?___ftdiv+1,c
  3484  00168A  0E00               	movlw	0
  3485  00168C  6E15               	movwf	?___ftdiv+2,c
  3486  00168E  0012               	return	
  3487  001690                     l590:
  3488  001690  0E00               	movlw	0
  3489  001692  6E1D               	movwf	___ftdiv@f3,c
  3490  001694  0E00               	movlw	0
  3491  001696  6E1E               	movwf	___ftdiv@f3+1,c
  3492  001698  0E00               	movlw	0
  3493  00169A  6E1F               	movwf	___ftdiv@f3+2,c
  3494  00169C  5021               	movf	___ftdiv@sign,w,c
  3495  00169E  0F89               	addlw	137
  3496  0016A0  5E20               	subwf	___ftdiv@exp,f,c
  3497  0016A2  C015  F021         	movff	___ftdiv@f1+2,___ftdiv@sign
  3498  0016A6  5018               	movf	___ftdiv@f2+2,w,c
  3499  0016A8  1A21               	xorwf	___ftdiv@sign,f,c
  3500  0016AA  0E80               	movlw	128
  3501  0016AC  1621               	andwf	___ftdiv@sign,f,c
  3502  0016AE  8E14               	bsf	___ftdiv@f1+1,7,c
  3503  0016B0  0EFF               	movlw	255
  3504  0016B2  1613               	andwf	___ftdiv@f1,f,c
  3505  0016B4  0EFF               	movlw	255
  3506  0016B6  1614               	andwf	___ftdiv@f1+1,f,c
  3507  0016B8  0E00               	movlw	0
  3508  0016BA  1615               	andwf	___ftdiv@f1+2,f,c
  3509  0016BC  8E17               	bsf	___ftdiv@f2+1,7,c
  3510  0016BE  0EFF               	movlw	255
  3511  0016C0  1616               	andwf	___ftdiv@f2,f,c
  3512  0016C2  0EFF               	movlw	255
  3513  0016C4  1617               	andwf	___ftdiv@f2+1,f,c
  3514  0016C6  0E00               	movlw	0
  3515  0016C8  1618               	andwf	___ftdiv@f2+2,f,c
  3516  0016CA  0E18               	movlw	24
  3517  0016CC  6E1C               	movwf	___ftdiv@cntr,c
  3518  0016CE  90D8               	bcf	status,0,c
  3519  0016D0  361D               	rlcf	___ftdiv@f3,f,c
  3520  0016D2  361E               	rlcf	___ftdiv@f3+1,f,c
  3521  0016D4  361F               	rlcf	___ftdiv@f3+2,f,c
  3522  0016D6  5016               	movf	___ftdiv@f2,w,c
  3523  0016D8  5C13               	subwf	___ftdiv@f1,w,c
  3524  0016DA  5017               	movf	___ftdiv@f2+1,w,c
  3525  0016DC  5814               	subwfb	___ftdiv@f1+1,w,c
  3526  0016DE  5018               	movf	___ftdiv@f2+2,w,c
  3527  0016E0  5815               	subwfb	___ftdiv@f1+2,w,c
  3528  0016E2  A0D8               	btfss	status,0,c
  3529  0016E4  D007               	goto	l592
  3530  0016E6  5016               	movf	___ftdiv@f2,w,c
  3531  0016E8  5E13               	subwf	___ftdiv@f1,f,c
  3532  0016EA  5017               	movf	___ftdiv@f2+1,w,c
  3533  0016EC  5A14               	subwfb	___ftdiv@f1+1,f,c
  3534  0016EE  5018               	movf	___ftdiv@f2+2,w,c
  3535  0016F0  5A15               	subwfb	___ftdiv@f1+2,f,c
  3536  0016F2  801D               	bsf	___ftdiv@f3,0,c
  3537  0016F4                     l592:
  3538  0016F4  90D8               	bcf	status,0,c
  3539  0016F6  3613               	rlcf	___ftdiv@f1,f,c
  3540  0016F8  3614               	rlcf	___ftdiv@f1+1,f,c
  3541  0016FA  3615               	rlcf	___ftdiv@f1+2,f,c
  3542  0016FC  2E1C               	decfsz	___ftdiv@cntr,f,c
  3543  0016FE  D7E7               	goto	l591
  3544  001700  C01D  F001         	movff	___ftdiv@f3,___ftpack@arg
  3545  001704  C01E  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3546  001708  C01F  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3547  00170C  C020  F004         	movff	___ftdiv@exp,___ftpack@exp
  3548  001710  C021  F005         	movff	___ftdiv@sign,___ftpack@sign
  3549  001714  ECF9  F00B         	call	___ftpack	;wreg free
  3550  001718  C001  F013         	movff	?___ftpack,?___ftdiv
  3551  00171C  C002  F014         	movff	?___ftpack+1,?___ftdiv+1
  3552  001720  C003  F015         	movff	?___ftpack+2,?___ftdiv+2
  3553  001724  0012               	return	
  3554  001726                     __end_of___ftdiv:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           indf0	equ	0xFEF
  3561                           postinc0	equ	0xFEE
  3562                           fsr0h	equ	0xFEA
  3563                           fsr0l	equ	0xFE9
  3564                           wreg	equ	0xFE8
  3565                           indf2	equ	0xFDF
  3566                           fsr2h	equ	0xFDA
  3567                           fsr2l	equ	0xFD9
  3568                           status	equ	0xFD8
  3569                           
  3570 ;; *************** function ___altoft *****************
  3571 ;; Defined at:
  3572 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;  c               4    8[COMRAM] long 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  sign            1   17[COMRAM] unsigned char 
  3577 ;;  exp             1   16[COMRAM] unsigned char 
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  3    8[COMRAM] float 
  3580 ;; Registers used:
  3581 ;;		wreg, status,2, status,0, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3587 ;;      Params:         4       0       0       0       0       0       0       0       0
  3588 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3589 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3590 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3591 ;;Total ram usage:       10 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:    1
  3594 ;; This function calls:
  3595 ;;		___ftpack
  3596 ;; This function is called by:
  3597 ;;		_main
  3598 ;;		_calibrate
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           	psect	text13
  3603  0019CA                     __ptext13:
  3604                           	opt stack 0
  3605  0019CA                     ___altoft:
  3606                           	opt stack 28
  3607                           
  3608                           ;incstack = 0
  3609  0019CA  0E00               	movlw	0
  3610  0019CC  6E12               	movwf	___altoft@sign,c
  3611  0019CE  0E8E               	movlw	142
  3612  0019D0  6E11               	movwf	___altoft@exp,c
  3613  0019D2  AE0C               	btfss	___altoft@c+3,7,c
  3614  0019D4  D011               	goto	l394
  3615  0019D6  1E0C               	comf	___altoft@c+3,f,c
  3616  0019D8  1E0B               	comf	___altoft@c+2,f,c
  3617  0019DA  1E0A               	comf	___altoft@c+1,f,c
  3618  0019DC  6C09               	negf	___altoft@c,c
  3619  0019DE  0E00               	movlw	0
  3620  0019E0  220A               	addwfc	___altoft@c+1,f,c
  3621  0019E2  220B               	addwfc	___altoft@c+2,f,c
  3622  0019E4  220C               	addwfc	___altoft@c+3,f,c
  3623  0019E6  0E01               	movlw	1
  3624  0019E8  6E12               	movwf	___altoft@sign,c
  3625  0019EA  D006               	goto	l394
  3626  0019EC  90D8               	bcf	status,0,c
  3627  0019EE  320C               	rrcf	___altoft@c+3,f,c
  3628  0019F0  320B               	rrcf	___altoft@c+2,f,c
  3629  0019F2  320A               	rrcf	___altoft@c+1,f,c
  3630  0019F4  3209               	rrcf	___altoft@c,f,c
  3631  0019F6  2A11               	incf	___altoft@exp,f,c
  3632  0019F8                     l394:
  3633  0019F8  0E00               	movlw	0
  3634  0019FA  1409               	andwf	___altoft@c,w,c
  3635  0019FC  6E0D               	movwf	??___altoft& (0+255),c
  3636  0019FE  0E00               	movlw	0
  3637  001A00  140A               	andwf	___altoft@c+1,w,c
  3638  001A02  6E0E               	movwf	(??___altoft+1)& (0+255),c
  3639  001A04  0E00               	movlw	0
  3640  001A06  140B               	andwf	___altoft@c+2,w,c
  3641  001A08  6E0F               	movwf	(??___altoft+2)& (0+255),c
  3642  001A0A  0EFF               	movlw	255
  3643  001A0C  140C               	andwf	___altoft@c+3,w,c
  3644  001A0E  6E10               	movwf	(??___altoft+3)& (0+255),c
  3645  001A10  500D               	movf	??___altoft,w,c
  3646  001A12  100E               	iorwf	??___altoft+1,w,c
  3647  001A14  100F               	iorwf	??___altoft+2,w,c
  3648  001A16  1010               	iorwf	??___altoft+3,w,c
  3649  001A18  A4D8               	btfss	status,2,c
  3650  001A1A  D7E8               	goto	l395
  3651  001A1C  C009  F001         	movff	___altoft@c,___ftpack@arg
  3652  001A20  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3653  001A24  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3654  001A28  C011  F004         	movff	___altoft@exp,___ftpack@exp
  3655  001A2C  C012  F005         	movff	___altoft@sign,___ftpack@sign
  3656  001A30  ECF9  F00B         	call	___ftpack	;wreg free
  3657  001A34  C001  F009         	movff	?___ftpack,?___altoft
  3658  001A38  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  3659  001A3C  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  3660  001A40  0012               	return	
  3661  001A42                     __end_of___altoft:
  3662                           	opt stack 0
  3663                           tblptru	equ	0xFF8
  3664                           tblptrh	equ	0xFF7
  3665                           tblptrl	equ	0xFF6
  3666                           tablat	equ	0xFF5
  3667                           indf0	equ	0xFEF
  3668                           postinc0	equ	0xFEE
  3669                           fsr0h	equ	0xFEA
  3670                           fsr0l	equ	0xFE9
  3671                           wreg	equ	0xFE8
  3672                           indf2	equ	0xFDF
  3673                           fsr2h	equ	0xFDA
  3674                           fsr2l	equ	0xFD9
  3675                           status	equ	0xFD8
  3676                           
  3677 ;; *************** function _USART_newline *****************
  3678 ;; Defined at:
  3679 ;;		line 26 in file "USART.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;		None
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;		None
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3693 ;;      Params:         0       0       0       0       0       0       0       0       0
  3694 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3695 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3696 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3697 ;;Total ram usage:        0 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    2
  3700 ;; This function calls:
  3701 ;;		_txr
  3702 ;; This function is called by:
  3703 ;;		_main
  3704 ;;		_calibrate
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text14
  3709  001E4A                     __ptext14:
  3710                           	opt stack 0
  3711  001E4A                     _USART_newline:
  3712                           	opt stack 27
  3713                           
  3714                           ;USART.c: 29: txr(0x0a);
  3715                           
  3716                           ;incstack = 0
  3717  001E4A  0E0A               	movlw	10
  3718  001E4C  EC0F  F00F         	call	_txr
  3719                           
  3720                           ;USART.c: 30: txr(0x0d);
  3721  001E50  0E0D               	movlw	13
  3722  001E52  EC0F  F00F         	call	_txr
  3723  001E56  0012               	return		;funcret
  3724  001E58                     __end_of_USART_newline:
  3725                           	opt stack 0
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           indf0	equ	0xFEF
  3731                           postinc0	equ	0xFEE
  3732                           fsr0h	equ	0xFEA
  3733                           fsr0l	equ	0xFE9
  3734                           wreg	equ	0xFE8
  3735                           indf2	equ	0xFDF
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function _txr *****************
  3741 ;; Defined at:
  3742 ;;		line 41 in file "USART.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  temp            1    wreg     unsigned char 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  temp            1    5[COMRAM] unsigned char 
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      void 
  3749 ;; Registers used:
  3750 ;;		wreg, status,2, status,0, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3756 ;;      Params:         0       0       0       0       0       0       0       0       0
  3757 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3758 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3759 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3760 ;;Total ram usage:        1 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    1
  3763 ;; This function calls:
  3764 ;;		_delay
  3765 ;; This function is called by:
  3766 ;;		_send_string
  3767 ;;		_USART_newline
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text15
  3772  001E1E                     __ptext15:
  3773                           	opt stack 0
  3774  001E1E                     _txr:
  3775                           	opt stack 28
  3776                           
  3777                           ;incstack = 0
  3778                           ;txr@temp stored from wreg
  3779  001E1E  6E06               	movwf	txr@temp,c
  3780  001E20                     
  3781                           ;USART.c: 43: while (TXSTAbits.TRMT == 0) {};
  3782  001E20  A2AC               	btfss	4012,1,c	;volatile
  3783  001E22  D7FE               	goto	l1821
  3784                           
  3785                           ;USART.c: 44: TXREG=temp;
  3786  001E24  C006  FFAD         	movff	txr@temp,4013	;volatile
  3787                           
  3788                           ;USART.c: 45: delay(1000);
  3789  001E28  0E03               	movlw	3
  3790  001E2A  6E02               	movwf	delay@d+1,c
  3791  001E2C  0EE8               	movlw	232
  3792  001E2E  6E01               	movwf	delay@d,c
  3793  001E30  ECCA  F00E         	call	_delay	;wreg free
  3794  001E34  0012               	return		;funcret
  3795  001E36                     __end_of_txr:
  3796                           	opt stack 0
  3797                           tblptru	equ	0xFF8
  3798                           tblptrh	equ	0xFF7
  3799                           tblptrl	equ	0xFF6
  3800                           tablat	equ	0xFF5
  3801                           indf0	equ	0xFEF
  3802                           postinc0	equ	0xFEE
  3803                           fsr0h	equ	0xFEA
  3804                           fsr0l	equ	0xFE9
  3805                           wreg	equ	0xFE8
  3806                           indf2	equ	0xFDF
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _delay *****************
  3812 ;; Defined at:
  3813 ;;		line 32 in file "USART.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  d               2    0[COMRAM] int 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  i               2    3[COMRAM] int 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3827 ;;      Params:         2       0       0       0       0       0       0       0       0
  3828 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3829 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3830 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3831 ;;Total ram usage:        5 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; This function calls:
  3834 ;;		Nothing
  3835 ;; This function is called by:
  3836 ;;		_txr
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text16
  3841  001D94                     __ptext16:
  3842                           	opt stack 0
  3843  001D94                     _delay:
  3844                           	opt stack 28
  3845                           
  3846                           ;USART.c: 34: int i;
  3847                           ;USART.c: 35: for(i=0;i<=d;i++)
  3848                           
  3849                           ;incstack = 0
  3850  001D94  0E00               	movlw	0
  3851  001D96  6E05               	movwf	delay@i+1,c
  3852  001D98  0E00               	movlw	0
  3853  001D9A  6E04               	movwf	delay@i,c
  3854  001D9C  D002               	goto	l263
  3855  001D9E                     
  3856                           ;USART.c: 36: {
  3857  001D9E  4A04               	infsnz	delay@i,f,c
  3858  001DA0  2A05               	incf	delay@i+1,f,c
  3859  001DA2                     l263:
  3860  001DA2  5004               	movf	delay@i,w,c
  3861  001DA4  5C01               	subwf	delay@d,w,c
  3862  001DA6  5002               	movf	delay@d+1,w,c
  3863  001DA8  0A80               	xorlw	128
  3864  001DAA  6E03               	movwf	??_delay& (0+255),c
  3865  001DAC  5005               	movf	delay@i+1,w,c
  3866  001DAE  0A80               	xorlw	128
  3867  001DB0  5803               	subwfb	??_delay& (0+255),w,c
  3868  001DB2  A0D8               	btfss	status,0,c
  3869  001DB4  0012               	return	
  3870  001DB6  D7F3               	goto	l264
  3871  001DB8                     __end_of_delay:
  3872                           	opt stack 0
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           indf0	equ	0xFEF
  3878                           postinc0	equ	0xFEE
  3879                           fsr0h	equ	0xFEA
  3880                           fsr0l	equ	0xFE9
  3881                           wreg	equ	0xFE8
  3882                           indf2	equ	0xFDF
  3883                           fsr2h	equ	0xFDA
  3884                           fsr2l	equ	0xFD9
  3885                           status	equ	0xFD8
  3886                           
  3887 ;; *************** function _ReadCount *****************
  3888 ;; Defined at:
  3889 ;;		line 213 in file "main.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;		None
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  Count           4    5[COMRAM] unsigned long 
  3894 ;;  i               1    4[COMRAM] unsigned char 
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  4    0[COMRAM] unsigned long 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3904 ;;      Params:         4       0       0       0       0       0       0       0       0
  3905 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3907 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3908 ;;Total ram usage:        9 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; This function calls:
  3911 ;;		Nothing
  3912 ;; This function is called by:
  3913 ;;		_main
  3914 ;;		_calibrate
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text17
  3919  00194C                     __ptext17:
  3920                           	opt stack 0
  3921  00194C                     _ReadCount:
  3922                           	opt stack 29
  3923                           
  3924                           ;main.c: 215: unsigned long Count;
  3925                           ;main.c: 216: unsigned char i;
  3926                           ;main.c: 218: TRISAbits.RA5 = 0 ;
  3927                           
  3928                           ;incstack = 0
  3929  00194C  9A92               	bcf	3986,5,c	;volatile
  3930                           
  3931                           ;main.c: 220: LATAbits.LA5 = 1;
  3932  00194E  8A89               	bsf	3977,5,c	;volatile
  3933                           
  3934                           ;main.c: 222: LATAbits.LA4 = 0;
  3935  001950  9889               	bcf	3977,4,c	;volatile
  3936                           
  3937                           ;main.c: 223: TRISAbits.RA5 = 1;
  3938  001952  8A92               	bsf	3986,5,c	;volatile
  3939                           
  3940                           ;main.c: 224: Count = 0;
  3941  001954  0E00               	movlw	0
  3942  001956  6E06               	movwf	ReadCount@Count,c
  3943  001958  0E00               	movlw	0
  3944  00195A  6E07               	movwf	ReadCount@Count+1,c
  3945  00195C  0E00               	movlw	0
  3946  00195E  6E08               	movwf	ReadCount@Count+2,c
  3947  001960  0E00               	movlw	0
  3948  001962  6E09               	movwf	ReadCount@Count+3,c
  3949  001964  BA80               	btfsc	3968,5,c	;volatile
  3950  001966  D7FE               	goto	l168
  3951                           
  3952                           ;main.c: 228: for (i = 0; i < 24; i++) {
  3953  001968  0E00               	movlw	0
  3954  00196A  6E05               	movwf	ReadCount@i,c
  3955  00196C  D014               	goto	l2171
  3956  00196E                     l170:
  3957                           
  3958                           ;main.c: 229: LATAbits.LA4 = 1;
  3959  00196E  8889               	bsf	3977,4,c	;volatile
  3960                           
  3961                           ;main.c: 230: Count = Count << 1;
  3962  001970  90D8               	bcf	status,0,c
  3963  001972  3406               	rlcf	ReadCount@Count,w,c
  3964  001974  6E06               	movwf	ReadCount@Count,c
  3965  001976  3407               	rlcf	ReadCount@Count+1,w,c
  3966  001978  6E07               	movwf	ReadCount@Count+1,c
  3967  00197A  3408               	rlcf	ReadCount@Count+2,w,c
  3968  00197C  6E08               	movwf	ReadCount@Count+2,c
  3969  00197E  3409               	rlcf	ReadCount@Count+3,w,c
  3970  001980  6E09               	movwf	ReadCount@Count+3,c
  3971                           
  3972                           ;main.c: 231: LATAbits.LA4 = 0;
  3973  001982  9889               	bcf	3977,4,c	;volatile
  3974                           
  3975                           ;main.c: 232: if (PORTAbits.RA5) Count++;
  3976  001984  AA80               	btfss	3968,5,c	;volatile
  3977  001986  D006               	goto	l172
  3978  001988  0E01               	movlw	1
  3979  00198A  2606               	addwf	ReadCount@Count,f,c
  3980  00198C  0E00               	movlw	0
  3981  00198E  2207               	addwfc	ReadCount@Count+1,f,c
  3982  001990  2208               	addwfc	ReadCount@Count+2,f,c
  3983  001992  2209               	addwfc	ReadCount@Count+3,f,c
  3984  001994                     l172:
  3985  001994  2A05               	incf	ReadCount@i,f,c
  3986  001996                     l2171:
  3987  001996  0E17               	movlw	23
  3988  001998  6405               	cpfsgt	ReadCount@i,c
  3989  00199A  D7E9               	goto	l170
  3990                           
  3991                           ;main.c: 233: }
  3992                           ;main.c: 234: LATAbits.LA4 = 1;
  3993  00199C  8889               	bsf	3977,4,c	;volatile
  3994                           
  3995                           ;main.c: 235: Count = Count ^ 0x800000;
  3996  00199E  0E00               	movlw	0
  3997  0019A0  1806               	xorwf	ReadCount@Count,w,c
  3998  0019A2  6E06               	movwf	ReadCount@Count,c
  3999  0019A4  0E00               	movlw	0
  4000  0019A6  1807               	xorwf	ReadCount@Count+1,w,c
  4001  0019A8  6E07               	movwf	ReadCount@Count+1,c
  4002  0019AA  0E80               	movlw	128
  4003  0019AC  1808               	xorwf	ReadCount@Count+2,w,c
  4004  0019AE  6E08               	movwf	ReadCount@Count+2,c
  4005  0019B0  0E00               	movlw	0
  4006  0019B2  1809               	xorwf	ReadCount@Count+3,w,c
  4007  0019B4  6E09               	movwf	ReadCount@Count+3,c
  4008                           
  4009                           ;main.c: 236: LATAbits.LA4 = 0;
  4010  0019B6  9889               	bcf	3977,4,c	;volatile
  4011                           
  4012                           ;main.c: 237: return (Count);
  4013  0019B8  C006  F001         	movff	ReadCount@Count,?_ReadCount
  4014  0019BC  C007  F002         	movff	ReadCount@Count+1,?_ReadCount+1
  4015  0019C0  C008  F003         	movff	ReadCount@Count+2,?_ReadCount+2
  4016  0019C4  C009  F004         	movff	ReadCount@Count+3,?_ReadCount+3
  4017  0019C8  0012               	return	
  4018  0019CA                     __end_of_ReadCount:
  4019                           	opt stack 0
  4020                           tblptru	equ	0xFF8
  4021                           tblptrh	equ	0xFF7
  4022                           tblptrl	equ	0xFF6
  4023                           tablat	equ	0xFF5
  4024                           indf0	equ	0xFEF
  4025                           postinc0	equ	0xFEE
  4026                           fsr0h	equ	0xFEA
  4027                           fsr0l	equ	0xFE9
  4028                           wreg	equ	0xFE8
  4029                           indf2	equ	0xFDF
  4030                           fsr2h	equ	0xFDA
  4031                           fsr2l	equ	0xFD9
  4032                           status	equ	0xFD8
  4033                           
  4034 ;; *************** function _LCD_print *****************
  4035 ;; Defined at:
  4036 ;;		line 33 in file "LCD_16x2.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;  str             2    7[COMRAM] PTR unsigned char 
  4039 ;;		 -> STR_14(12), STR_12(16), STR_11(18), STR_9(17), 
  4040 ;;		 -> STR_8(12), STR_6(4), main@buff(10), 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  sndstr_cnt      2   11[COMRAM] int 
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      void 
  4045 ;; Registers used:
  4046 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4052 ;;      Params:         2       0       0       0       0       0       0       0       0
  4053 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4054 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4055 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4056 ;;Total ram usage:        6 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:    2
  4059 ;; This function calls:
  4060 ;;		_LCD_Char
  4061 ;; This function is called by:
  4062 ;;		_main
  4063 ;;		_calibrate
  4064 ;;		_init
  4065 ;; This function uses a non-reentrant model
  4066 ;;
  4067                           
  4068                           	psect	text18
  4069  001B26                     __ptext18:
  4070                           	opt stack 0
  4071  001B26                     _LCD_print:
  4072                           	opt stack 27
  4073                           
  4074                           ;LCD_16x2.c: 35: int sndstr_cnt =0;
  4075                           
  4076                           ;incstack = 0
  4077  001B26  0E00               	movlw	0
  4078  001B28  6E0D               	movwf	LCD_print@sndstr_cnt+1,c
  4079  001B2A  0E00               	movlw	0
  4080  001B2C  6E0C               	movwf	LCD_print@sndstr_cnt,c
  4081                           
  4082                           ;LCD_16x2.c: 37: while (str[sndstr_cnt] != 0x00)
  4083  001B2E  D01A               	goto	l212
  4084  001B30                     
  4085                           ;LCD_16x2.c: 38: {
  4086                           ;LCD_16x2.c: 39: LCD_Char(str[sndstr_cnt]);
  4087  001B30  500C               	movf	LCD_print@sndstr_cnt,w,c
  4088  001B32  2408               	addwf	LCD_print@str,w,c
  4089  001B34  6E0A               	movwf	??_LCD_print& (0+255),c
  4090  001B36  500D               	movf	LCD_print@sndstr_cnt+1,w,c
  4091  001B38  2009               	addwfc	LCD_print@str+1,w,c
  4092  001B3A  6E0B               	movwf	(??_LCD_print+1)& (0+255),c
  4093  001B3C  C00A  FFF6         	movff	??_LCD_print,tblptrl
  4094  001B40  C00B  FFF7         	movff	??_LCD_print+1,tblptrh
  4095  001B44  6AF8               	clrf	tblptru,c
  4096  001B46  0E07               	movlw	(high __ramtop+-1)
  4097  001B48  64F7               	cpfsgt	tblptrh,c
  4098  001B4A  D003               	bra	u1627
  4099  001B4C  0008               	tblrd		*
  4100  001B4E  50F5               	movf	tablat,w,c
  4101  001B50  D005               	bra	u1620
  4102  001B52                     u1627:
  4103  001B52  CFF6 FFE9          	movff	tblptrl,fsr0l
  4104  001B56  CFF7 FFEA          	movff	tblptrh,fsr0h
  4105  001B5A  50EF               	movf	indf0,w,c
  4106  001B5C                     u1620:
  4107  001B5C  EC94  F00E         	call	_LCD_Char
  4108                           
  4109                           ;LCD_16x2.c: 40: sndstr_cnt++;
  4110  001B60  4A0C               	infsnz	LCD_print@sndstr_cnt,f,c
  4111  001B62  2A0D               	incf	LCD_print@sndstr_cnt+1,f,c
  4112  001B64                     l212:
  4113  001B64  500C               	movf	LCD_print@sndstr_cnt,w,c
  4114  001B66  2408               	addwf	LCD_print@str,w,c
  4115  001B68  6E0A               	movwf	??_LCD_print& (0+255),c
  4116  001B6A  500D               	movf	LCD_print@sndstr_cnt+1,w,c
  4117  001B6C  2009               	addwfc	LCD_print@str+1,w,c
  4118  001B6E  6E0B               	movwf	(??_LCD_print+1)& (0+255),c
  4119  001B70  C00A  FFF6         	movff	??_LCD_print,tblptrl
  4120  001B74  C00B  FFF7         	movff	??_LCD_print+1,tblptrh
  4121  001B78  6AF8               	clrf	tblptru,c
  4122  001B7A  0E07               	movlw	(high __ramtop+-1)
  4123  001B7C  64F7               	cpfsgt	tblptrh,c
  4124  001B7E  D003               	bra	u1637
  4125  001B80  0008               	tblrd		*
  4126  001B82  50F5               	movf	tablat,w,c
  4127  001B84  D005               	bra	u1630
  4128  001B86                     u1637:
  4129  001B86  CFF6 FFE9          	movff	tblptrl,fsr0l
  4130  001B8A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4131  001B8E  50EF               	movf	indf0,w,c
  4132  001B90                     u1630:
  4133  001B90  0900               	iorlw	0
  4134  001B92  B4D8               	btfsc	status,2,c
  4135  001B94  0012               	return	
  4136  001B96  D7CC               	goto	l213
  4137  001B98                     __end_of_LCD_print:
  4138                           	opt stack 0
  4139                           tblptru	equ	0xFF8
  4140                           tblptrh	equ	0xFF7
  4141                           tblptrl	equ	0xFF6
  4142                           tablat	equ	0xFF5
  4143                           indf0	equ	0xFEF
  4144                           postinc0	equ	0xFEE
  4145                           fsr0h	equ	0xFEA
  4146                           fsr0l	equ	0xFE9
  4147                           wreg	equ	0xFE8
  4148                           indf2	equ	0xFDF
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           
  4153 ;; *************** function _LCD_Char *****************
  4154 ;; Defined at:
  4155 ;;		line 65 in file "LCD_16x2.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  dat             1    wreg     unsigned char 
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;  dat             1    6[COMRAM] unsigned char 
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      void 
  4162 ;; Registers used:
  4163 ;;		wreg, status,2, status,0, cstack
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4169 ;;      Params:         0       0       0       0       0       0       0       0       0
  4170 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4171 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4172 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4173 ;;Total ram usage:        1 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    1
  4176 ;; This function calls:
  4177 ;;		_MSdelay
  4178 ;; This function is called by:
  4179 ;;		_LCD_print
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text19
  4184  001D28                     __ptext19:
  4185                           	opt stack 0
  4186  001D28                     _LCD_Char:
  4187                           	opt stack 27
  4188                           
  4189                           ;incstack = 0
  4190                           ;LCD_Char@dat stored from wreg
  4191  001D28  6E07               	movwf	LCD_Char@dat,c
  4192                           
  4193                           ;LCD_16x2.c: 68: LATA = (dat>>4);
  4194  001D2A  3807               	swapf	LCD_Char@dat,w,c
  4195  001D2C  0B0F               	andlw	15
  4196  001D2E  6E89               	movwf	3977,c	;volatile
  4197                           
  4198                           ;LCD_16x2.c: 70: LATD0 = 1;
  4199  001D30  808C               	bsf	3980,0,c	;volatile
  4200                           
  4201                           ;LCD_16x2.c: 71: LATD2 = 1;
  4202  001D32  848C               	bsf	3980,2,c	;volatile
  4203                           
  4204                           ;LCD_16x2.c: 72: __nop();
  4205  001D34  F000               	nop	
  4206                           
  4207                           ;LCD_16x2.c: 73: LATD2 = 0;
  4208  001D36  948C               	bcf	3980,2,c	;volatile
  4209                           
  4210                           ;LCD_16x2.c: 74: MSdelay(3);
  4211  001D38  0E00               	movlw	0
  4212  001D3A  6E02               	movwf	MSdelay@val+1,c
  4213  001D3C  0E03               	movlw	3
  4214  001D3E  6E01               	movwf	MSdelay@val,c
  4215  001D40  EC5B  F00E         	call	_MSdelay	;wreg free
  4216                           
  4217                           ;LCD_16x2.c: 75: LATA = (0x0f & dat);
  4218  001D44  5007               	movf	LCD_Char@dat,w,c
  4219  001D46  0B0F               	andlw	15
  4220  001D48  6E89               	movwf	3977,c	;volatile
  4221                           
  4222                           ;LCD_16x2.c: 78: LATD2 = 1;
  4223  001D4A  848C               	bsf	3980,2,c	;volatile
  4224                           
  4225                           ;LCD_16x2.c: 79: __nop();
  4226  001D4C  F000               	nop	
  4227                           
  4228                           ;LCD_16x2.c: 80: LATD2 = 0;
  4229  001D4E  948C               	bcf	3980,2,c	;volatile
  4230                           
  4231                           ;LCD_16x2.c: 81: MSdelay(3);
  4232  001D50  0E00               	movlw	0
  4233  001D52  6E02               	movwf	MSdelay@val+1,c
  4234  001D54  0E03               	movlw	3
  4235  001D56  6E01               	movwf	MSdelay@val,c
  4236  001D58  EC5B  F00E         	call	_MSdelay	;wreg free
  4237                           
  4238                           ;LCD_16x2.c: 82: LATD0 = 0;
  4239  001D5C  908C               	bcf	3980,0,c	;volatile
  4240  001D5E  0012               	return		;funcret
  4241  001D60                     __end_of_LCD_Char:
  4242                           	opt stack 0
  4243                           tblptru	equ	0xFF8
  4244                           tblptrh	equ	0xFF7
  4245                           tblptrl	equ	0xFF6
  4246                           tablat	equ	0xFF5
  4247                           indf0	equ	0xFEF
  4248                           postinc0	equ	0xFEE
  4249                           fsr0h	equ	0xFEA
  4250                           fsr0l	equ	0xFE9
  4251                           wreg	equ	0xFE8
  4252                           indf2	equ	0xFDF
  4253                           fsr2h	equ	0xFDA
  4254                           fsr2l	equ	0xFD9
  4255                           status	equ	0xFD8
  4256                           
  4257 ;; *************** function _LCD_Clear *****************
  4258 ;; Defined at:
  4259 ;;		line 84 in file "LCD_16x2.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      void 
  4266 ;; Registers used:
  4267 ;;		wreg, status,2, status,0, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4273 ;;      Params:         0       0       0       0       0       0       0       0       0
  4274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4276 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4277 ;;Total ram usage:        0 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:    2
  4280 ;; This function calls:
  4281 ;;		_LCD_Command
  4282 ;;		_MSdelay
  4283 ;; This function is called by:
  4284 ;;		_main
  4285 ;;		_calibrate
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           	psect	text20
  4290  001E36                     __ptext20:
  4291                           	opt stack 0
  4292  001E36                     _LCD_Clear:
  4293                           	opt stack 27
  4294                           
  4295                           ;LCD_16x2.c: 86: LCD_Command(0x01);
  4296                           
  4297                           ;incstack = 0
  4298  001E36  0E01               	movlw	1
  4299  001E38  EC2D  F00E         	call	_LCD_Command
  4300                           
  4301                           ;LCD_16x2.c: 87: MSdelay(3);
  4302  001E3C  0E00               	movlw	0
  4303  001E3E  6E02               	movwf	MSdelay@val+1,c
  4304  001E40  0E03               	movlw	3
  4305  001E42  6E01               	movwf	MSdelay@val,c
  4306  001E44  EC5B  F00E         	call	_MSdelay	;wreg free
  4307  001E48  0012               	return		;funcret
  4308  001E4A                     __end_of_LCD_Clear:
  4309                           	opt stack 0
  4310                           tblptru	equ	0xFF8
  4311                           tblptrh	equ	0xFF7
  4312                           tblptrl	equ	0xFF6
  4313                           tablat	equ	0xFF5
  4314                           indf0	equ	0xFEF
  4315                           postinc0	equ	0xFEE
  4316                           fsr0h	equ	0xFEA
  4317                           fsr0l	equ	0xFE9
  4318                           wreg	equ	0xFE8
  4319                           indf2	equ	0xFDF
  4320                           fsr2h	equ	0xFDA
  4321                           fsr2l	equ	0xFD9
  4322                           status	equ	0xFD8
  4323                           
  4324 ;; *************** function _LCD_Command *****************
  4325 ;; Defined at:
  4326 ;;		line 43 in file "LCD_16x2.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  cmd             1    wreg     unsigned char 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  cmd             1    8[COMRAM] unsigned char 
  4331 ;;  data            1    7[COMRAM] unsigned char 
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      void 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2, status,0, cstack
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4341 ;;      Params:         0       0       0       0       0       0       0       0       0
  4342 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4343 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4344 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4345 ;;Total ram usage:        3 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    1
  4348 ;; This function calls:
  4349 ;;		_MSdelay
  4350 ;; This function is called by:
  4351 ;;		_main
  4352 ;;		_LCD_Init
  4353 ;;		_LCD_Clear
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text21
  4358  001C5A                     __ptext21:
  4359                           	opt stack 0
  4360  001C5A                     _LCD_Command:
  4361                           	opt stack 27
  4362                           
  4363                           ;incstack = 0
  4364                           ;LCD_Command@cmd stored from wreg
  4365  001C5A  6E09               	movwf	LCD_Command@cmd,c
  4366                           
  4367                           ;LCD_16x2.c: 45: char data=0;
  4368  001C5C  0E00               	movlw	0
  4369  001C5E  6E08               	movwf	LCD_Command@data,c
  4370                           
  4371                           ;LCD_16x2.c: 46: data = (data & 0x0f) | (cmd>>4);
  4372  001C60  C009  F007         	movff	LCD_Command@cmd,??_LCD_Command
  4373  001C64  3A07               	swapf	??_LCD_Command,f,c
  4374  001C66  0E0F               	movlw	15
  4375  001C68  1607               	andwf	??_LCD_Command,f,c
  4376  001C6A  5008               	movf	LCD_Command@data,w,c
  4377  001C6C  0B0F               	andlw	15
  4378  001C6E  1007               	iorwf	??_LCD_Command,w,c
  4379  001C70  6E08               	movwf	LCD_Command@data,c
  4380                           
  4381                           ;LCD_16x2.c: 48: LATA = (cmd>>4);
  4382  001C72  3809               	swapf	LCD_Command@cmd,w,c
  4383  001C74  0B0F               	andlw	15
  4384  001C76  6E89               	movwf	3977,c	;volatile
  4385                           
  4386                           ;LCD_16x2.c: 49: LATD0 = 0;
  4387  001C78  908C               	bcf	3980,0,c	;volatile
  4388                           
  4389                           ;LCD_16x2.c: 50: LATD2 = 1;
  4390  001C7A  848C               	bsf	3980,2,c	;volatile
  4391                           
  4392                           ;LCD_16x2.c: 51: __nop();
  4393  001C7C  F000               	nop	
  4394                           
  4395                           ;LCD_16x2.c: 52: LATD2 = 0;
  4396  001C7E  948C               	bcf	3980,2,c	;volatile
  4397                           
  4398                           ;LCD_16x2.c: 53: MSdelay(3);
  4399  001C80  0E00               	movlw	0
  4400  001C82  6E02               	movwf	MSdelay@val+1,c
  4401  001C84  0E03               	movlw	3
  4402  001C86  6E01               	movwf	MSdelay@val,c
  4403  001C88  EC5B  F00E         	call	_MSdelay	;wreg free
  4404                           
  4405                           ;LCD_16x2.c: 54: data = (data & 0xf0) | (0x0f & cmd);
  4406  001C8C  C009  F007         	movff	LCD_Command@cmd,??_LCD_Command
  4407  001C90  0E0F               	movlw	15
  4408  001C92  1607               	andwf	??_LCD_Command,f,c
  4409  001C94  5008               	movf	LCD_Command@data,w,c
  4410  001C96  0BF0               	andlw	240
  4411  001C98  1007               	iorwf	??_LCD_Command,w,c
  4412  001C9A  6E08               	movwf	LCD_Command@data,c
  4413                           
  4414                           ;LCD_16x2.c: 55: LATA = (0x0f & cmd);
  4415  001C9C  5009               	movf	LCD_Command@cmd,w,c
  4416  001C9E  0B0F               	andlw	15
  4417  001CA0  6E89               	movwf	3977,c	;volatile
  4418                           
  4419                           ;LCD_16x2.c: 57: LATD2 = 1;
  4420  001CA2  848C               	bsf	3980,2,c	;volatile
  4421                           
  4422                           ;LCD_16x2.c: 58: __nop();
  4423  001CA4  F000               	nop	
  4424                           
  4425                           ;LCD_16x2.c: 59: LATD2 = 0;
  4426  001CA6  948C               	bcf	3980,2,c	;volatile
  4427                           
  4428                           ;LCD_16x2.c: 60: MSdelay(3);
  4429  001CA8  0E00               	movlw	0
  4430  001CAA  6E02               	movwf	MSdelay@val+1,c
  4431  001CAC  0E03               	movlw	3
  4432  001CAE  6E01               	movwf	MSdelay@val,c
  4433  001CB0  EC5B  F00E         	call	_MSdelay	;wreg free
  4434  001CB4  0012               	return		;funcret
  4435  001CB6                     __end_of_LCD_Command:
  4436                           	opt stack 0
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           indf0	equ	0xFEF
  4442                           postinc0	equ	0xFEE
  4443                           fsr0h	equ	0xFEA
  4444                           fsr0l	equ	0xFE9
  4445                           wreg	equ	0xFE8
  4446                           indf2	equ	0xFDF
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _MSdelay *****************
  4452 ;; Defined at:
  4453 ;;		line 2 in file "delay.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  val             2    0[COMRAM] unsigned int 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  j               2    4[COMRAM] unsigned int 
  4458 ;;  i               2    2[COMRAM] unsigned int 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      void 
  4461 ;; Registers used:
  4462 ;;		wreg, status,2, status,0
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4468 ;;      Params:         2       0       0       0       0       0       0       0       0
  4469 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4471 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4472 ;;Total ram usage:        6 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; This function calls:
  4475 ;;		Nothing
  4476 ;; This function is called by:
  4477 ;;		_main
  4478 ;;		_calibrate
  4479 ;;		_init
  4480 ;;		_LCD_Init
  4481 ;;		_LCD_Command
  4482 ;;		_LCD_Char
  4483 ;;		_LCD_Clear
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text22
  4488  001CB6                     __ptext22:
  4489                           	opt stack 0
  4490  001CB6                     _MSdelay:
  4491                           	opt stack 29
  4492                           
  4493                           ;delay.c: 4: unsigned int i,j;
  4494                           ;delay.c: 5: for(i=0;i<val;i++)
  4495                           
  4496                           ;incstack = 0
  4497  001CB6  0E00               	movlw	0
  4498  001CB8  6E04               	movwf	MSdelay@i+1,c
  4499  001CBA  0E00               	movlw	0
  4500  001CBC  6E03               	movwf	MSdelay@i,c
  4501  001CBE  D00F               	goto	l229
  4502  001CC0                     
  4503                           ;delay.c: 6: for(j=0;j<165;j++);
  4504  001CC0  0E00               	movlw	0
  4505  001CC2  6E06               	movwf	MSdelay@j+1,c
  4506  001CC4  0E00               	movlw	0
  4507  001CC6  6E05               	movwf	MSdelay@j,c
  4508  001CC8                     l1717:
  4509  001CC8  5006               	movf	MSdelay@j+1,w,c
  4510  001CCA  E107               	bnz	l1725
  4511  001CCC  0EA5               	movlw	165
  4512  001CCE  5C05               	subwf	MSdelay@j,w,c
  4513  001CD0  B0D8               	btfsc	status,0,c
  4514  001CD2  D003               	goto	u920
  4515  001CD4  4A05               	infsnz	MSdelay@j,f,c
  4516  001CD6  2A06               	incf	MSdelay@j+1,f,c
  4517  001CD8  D7F7               	goto	l1717
  4518  001CDA                     u920:
  4519  001CDA                     l1725:
  4520  001CDA  4A03               	infsnz	MSdelay@i,f,c
  4521  001CDC  2A04               	incf	MSdelay@i+1,f,c
  4522  001CDE                     l229:
  4523  001CDE  5001               	movf	MSdelay@val,w,c
  4524  001CE0  5C03               	subwf	MSdelay@i,w,c
  4525  001CE2  5002               	movf	MSdelay@val+1,w,c
  4526  001CE4  5804               	subwfb	MSdelay@i+1,w,c
  4527  001CE6  A0D8               	btfss	status,0,c
  4528  001CE8  D7EB               	goto	l230
  4529                           
  4530                           ;delay.c: 7: {
  4531                           ;delay.c: 8: __nop();
  4532  001CEA  F000               	nop	
  4533                           
  4534                           ;delay.c: 9: __nop();
  4535  001CEC  F000               	nop	
  4536  001CEE  0012               	return		;funcret
  4537  001CF0                     __end_of_MSdelay:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           indf0	equ	0xFEF
  4544                           postinc0	equ	0xFEE
  4545                           fsr0h	equ	0xFEA
  4546                           fsr0l	equ	0xFE9
  4547                           wreg	equ	0xFE8
  4548                           indf2	equ	0xFDF
  4549                           fsr2h	equ	0xFDA
  4550                           fsr2l	equ	0xFD9
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function _EEPROMWritelong *****************
  4554 ;; Defined at:
  4555 ;;		line 37 in file "EEPROM.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  address         2    3[COMRAM] int 
  4558 ;;  value           4    5[COMRAM] long 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  one             1   12[COMRAM] unsigned char 
  4561 ;;  two             1   11[COMRAM] unsigned char 
  4562 ;;  three           1   10[COMRAM] unsigned char 
  4563 ;;  four            1    9[COMRAM] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      void 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4573 ;;      Params:         6       0       0       0       0       0       0       0       0
  4574 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4575 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4576 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4577 ;;Total ram usage:       10 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    1
  4580 ;; This function calls:
  4581 ;;		_EEPROM_Write
  4582 ;; This function is called by:
  4583 ;;		_calibrate
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text23
  4588  001BFC                     __ptext23:
  4589                           	opt stack 0
  4590  001BFC                     _EEPROMWritelong:
  4591                           	opt stack 28
  4592                           
  4593                           ;EEPROM.c: 41: unsigned char four = (value & 0xFF);
  4594                           
  4595                           ;incstack = 0
  4596  001BFC  C006  F00A         	movff	EEPROMWritelong@value,EEPROMWritelong@four
  4597                           
  4598                           ;EEPROM.c: 42: unsigned char three = ((value >> 8) & 0xFF);
  4599  001C00  C007  F00B         	movff	EEPROMWritelong@value+1,EEPROMWritelong@three
  4600                           
  4601                           ;EEPROM.c: 43: unsigned char two = ((value >> 16) & 0xFF);
  4602  001C04  C008  F00C         	movff	EEPROMWritelong@value+2,EEPROMWritelong@two
  4603                           
  4604                           ;EEPROM.c: 44: unsigned char one = ((value >> 24) & 0xFF);
  4605  001C08  C009  F00D         	movff	EEPROMWritelong@value+3,EEPROMWritelong@one
  4606                           
  4607                           ;EEPROM.c: 47: EEPROM_Write(address, four);
  4608  001C0C  C004  F001         	movff	EEPROMWritelong@address,EEPROM_Write@address
  4609  001C10  C005  F002         	movff	EEPROMWritelong@address+1,EEPROM_Write@address+1
  4610  001C14  C00A  F003         	movff	EEPROMWritelong@four,EEPROM_Write@data
  4611  001C18  ECDC  F00E         	call	_EEPROM_Write	;wreg free
  4612                           
  4613                           ;EEPROM.c: 48: EEPROM_Write(address + 1, three);
  4614  001C1C  0E01               	movlw	1
  4615  001C1E  2404               	addwf	EEPROMWritelong@address,w,c
  4616  001C20  6E01               	movwf	EEPROM_Write@address,c
  4617  001C22  0E00               	movlw	0
  4618  001C24  2005               	addwfc	EEPROMWritelong@address+1,w,c
  4619  001C26  6E02               	movwf	EEPROM_Write@address+1,c
  4620  001C28  C00B  F003         	movff	EEPROMWritelong@three,EEPROM_Write@data
  4621  001C2C  ECDC  F00E         	call	_EEPROM_Write	;wreg free
  4622                           
  4623                           ;EEPROM.c: 49: EEPROM_Write(address + 2, two);
  4624  001C30  0E02               	movlw	2
  4625  001C32  2404               	addwf	EEPROMWritelong@address,w,c
  4626  001C34  6E01               	movwf	EEPROM_Write@address,c
  4627  001C36  0E00               	movlw	0
  4628  001C38  2005               	addwfc	EEPROMWritelong@address+1,w,c
  4629  001C3A  6E02               	movwf	EEPROM_Write@address+1,c
  4630  001C3C  C00C  F003         	movff	EEPROMWritelong@two,EEPROM_Write@data
  4631  001C40  ECDC  F00E         	call	_EEPROM_Write	;wreg free
  4632                           
  4633                           ;EEPROM.c: 50: EEPROM_Write(address + 3, one);
  4634  001C44  0E03               	movlw	3
  4635  001C46  2404               	addwf	EEPROMWritelong@address,w,c
  4636  001C48  6E01               	movwf	EEPROM_Write@address,c
  4637  001C4A  0E00               	movlw	0
  4638  001C4C  2005               	addwfc	EEPROMWritelong@address+1,w,c
  4639  001C4E  6E02               	movwf	EEPROM_Write@address+1,c
  4640  001C50  C00D  F003         	movff	EEPROMWritelong@one,EEPROM_Write@data
  4641  001C54  ECDC  F00E         	call	_EEPROM_Write	;wreg free
  4642  001C58  0012               	return		;funcret
  4643  001C5A                     __end_of_EEPROMWritelong:
  4644                           	opt stack 0
  4645                           tblptru	equ	0xFF8
  4646                           tblptrh	equ	0xFF7
  4647                           tblptrl	equ	0xFF6
  4648                           tablat	equ	0xFF5
  4649                           indf0	equ	0xFEF
  4650                           postinc0	equ	0xFEE
  4651                           fsr0h	equ	0xFEA
  4652                           fsr0l	equ	0xFE9
  4653                           wreg	equ	0xFE8
  4654                           indf2	equ	0xFDF
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _EEPROM_Write *****************
  4660 ;; Defined at:
  4661 ;;		line 4 in file "EEPROM.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  address         2    0[COMRAM] int 
  4664 ;;  data            1    2[COMRAM] unsigned char 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      void 
  4669 ;; Registers used:
  4670 ;;		wreg, status,2
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4676 ;;      Params:         3       0       0       0       0       0       0       0       0
  4677 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4678 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4679 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4680 ;;Total ram usage:        3 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		_EEPROMWritelong
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text24
  4690  001DB8                     __ptext24:
  4691                           	opt stack 0
  4692  001DB8                     _EEPROM_Write:
  4693                           	opt stack 28
  4694                           
  4695                           ;EEPROM.c: 7: EEADR=address;
  4696                           
  4697                           ;incstack = 0
  4698  001DB8  C001  FFA9         	movff	EEPROM_Write@address,4009	;volatile
  4699                           
  4700                           ;EEPROM.c: 8: EEDATA=data;
  4701  001DBC  C003  FFA8         	movff	EEPROM_Write@data,4008	;volatile
  4702                           
  4703                           ;EEPROM.c: 10: EECON1bits.EEPGD=0;
  4704  001DC0  9EA6               	bcf	4006,7,c	;volsfr
  4705                           
  4706                           ;EEPROM.c: 11: EECON1bits.CFGS=0;
  4707  001DC2  9CA6               	bcf	4006,6,c	;volsfr
  4708                           
  4709                           ;EEPROM.c: 12: EECON1bits.WREN=1;
  4710  001DC4  84A6               	bsf	4006,2,c	;volsfr
  4711                           
  4712                           ;EEPROM.c: 13: INTCONbits.GIE=0;
  4713  001DC6  9EF2               	bcf	intcon,7,c	;volatile
  4714                           
  4715                           ;EEPROM.c: 18: EECON2=0x55;
  4716  001DC8  0E55               	movlw	85
  4717  001DCA  6EA7               	movwf	4007,c	;volsfr
  4718                           
  4719                           ;EEPROM.c: 19: EECON2=0xaa;
  4720  001DCC  0EAA               	movlw	170
  4721  001DCE  6EA7               	movwf	4007,c	;volsfr
  4722                           
  4723                           ;EEPROM.c: 21: EECON1bits.WR=1;
  4724  001DD0  82A6               	bsf	4006,1,c	;volsfr
  4725                           
  4726                           ;EEPROM.c: 22: INTCONbits.GIE=1;
  4727  001DD2  8EF2               	bsf	intcon,7,c	;volatile
  4728  001DD4  A8A1               	btfss	4001,4,c	;volatile
  4729  001DD6  D7FE               	goto	l298
  4730                           
  4731                           ;EEPROM.c: 25: PIR2bits.EEIF=0;
  4732  001DD8  98A1               	bcf	4001,4,c	;volatile
  4733  001DDA  0012               	return		;funcret
  4734  001DDC                     __end_of_EEPROM_Write:
  4735                           	opt stack 0
  4736                           tblptru	equ	0xFF8
  4737                           tblptrh	equ	0xFF7
  4738                           tblptrl	equ	0xFF6
  4739                           tablat	equ	0xFF5
  4740                           intcon	equ	0xFF2
  4741                           indf0	equ	0xFEF
  4742                           postinc0	equ	0xFEE
  4743                           fsr0h	equ	0xFEA
  4744                           fsr0l	equ	0xFE9
  4745                           wreg	equ	0xFE8
  4746                           indf2	equ	0xFDF
  4747                           fsr2h	equ	0xFDA
  4748                           fsr2l	equ	0xFD9
  4749                           status	equ	0xFD8
  4750                           
  4751 ;; *************** function _EEPROMReadlong *****************
  4752 ;; Defined at:
  4753 ;;		line 53 in file "EEPROM.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;  address         4    2[COMRAM] long 
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;  one             4   46[COMRAM] long 
  4758 ;;  two             4   42[COMRAM] long 
  4759 ;;  three           4   38[COMRAM] long 
  4760 ;;  four            4   34[COMRAM] long 
  4761 ;; Return value:  Size  Location     Type
  4762 ;;                  4    2[COMRAM] long 
  4763 ;; Registers used:
  4764 ;;		wreg, status,2, status,0, cstack
  4765 ;; Tracked objects:
  4766 ;;		On entry : 0/0
  4767 ;;		On exit  : 0/0
  4768 ;;		Unchanged: 0/0
  4769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4770 ;;      Params:         4       0       0       0       0       0       0       0       0
  4771 ;;      Locals:        16       0       0       0       0       0       0       0       0
  4772 ;;      Temps:         28       0       0       0       0       0       0       0       0
  4773 ;;      Totals:        48       0       0       0       0       0       0       0       0
  4774 ;;Total ram usage:       48 bytes
  4775 ;; Hardware stack levels used:    1
  4776 ;; Hardware stack levels required when called:    1
  4777 ;; This function calls:
  4778 ;;		_EEPROM_Read
  4779 ;; This function is called by:
  4780 ;;		_main
  4781 ;;		_calibrate
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text25
  4786  00132E                     __ptext25:
  4787                           	opt stack 0
  4788  00132E                     _EEPROMReadlong:
  4789                           	opt stack 28
  4790                           
  4791                           ;EEPROM.c: 56: long four = EEPROM_Read(address);
  4792                           
  4793                           ;incstack = 0
  4794  00132E  C003  F001         	movff	EEPROMReadlong@address,EEPROM_Read@address
  4795  001332  C004  F002         	movff	EEPROMReadlong@address+1,EEPROM_Read@address+1
  4796  001336  EC2C  F00F         	call	_EEPROM_Read	;wreg free
  4797  00133A  6E07               	movwf	??_EEPROMReadlong& (0+255),c
  4798  00133C  5007               	movf	??_EEPROMReadlong,w,c
  4799  00133E  6E23               	movwf	EEPROMReadlong@four,c
  4800  001340  6A24               	clrf	EEPROMReadlong@four+1,c
  4801  001342  6A25               	clrf	EEPROMReadlong@four+2,c
  4802  001344  6A26               	clrf	EEPROMReadlong@four+3,c
  4803                           
  4804                           ;EEPROM.c: 57: long three = EEPROM_Read(address + 1);
  4805  001346  0E01               	movlw	1
  4806  001348  2403               	addwf	EEPROMReadlong@address,w,c
  4807  00134A  6E01               	movwf	EEPROM_Read@address,c
  4808  00134C  0E00               	movlw	0
  4809  00134E  2004               	addwfc	EEPROMReadlong@address+1,w,c
  4810  001350  6E02               	movwf	EEPROM_Read@address+1,c
  4811  001352  EC2C  F00F         	call	_EEPROM_Read	;wreg free
  4812  001356  6E07               	movwf	??_EEPROMReadlong& (0+255),c
  4813  001358  5007               	movf	??_EEPROMReadlong,w,c
  4814  00135A  6E27               	movwf	EEPROMReadlong@three,c
  4815  00135C  6A28               	clrf	EEPROMReadlong@three+1,c
  4816  00135E  6A29               	clrf	EEPROMReadlong@three+2,c
  4817  001360  6A2A               	clrf	EEPROMReadlong@three+3,c
  4818                           
  4819                           ;EEPROM.c: 58: long two = EEPROM_Read(address + 2);
  4820  001362  0E02               	movlw	2
  4821  001364  2403               	addwf	EEPROMReadlong@address,w,c
  4822  001366  6E01               	movwf	EEPROM_Read@address,c
  4823  001368  0E00               	movlw	0
  4824  00136A  2004               	addwfc	EEPROMReadlong@address+1,w,c
  4825  00136C  6E02               	movwf	EEPROM_Read@address+1,c
  4826  00136E  EC2C  F00F         	call	_EEPROM_Read	;wreg free
  4827  001372  6E07               	movwf	??_EEPROMReadlong& (0+255),c
  4828  001374  5007               	movf	??_EEPROMReadlong,w,c
  4829  001376  6E2B               	movwf	EEPROMReadlong@two,c
  4830  001378  6A2C               	clrf	EEPROMReadlong@two+1,c
  4831  00137A  6A2D               	clrf	EEPROMReadlong@two+2,c
  4832  00137C  6A2E               	clrf	EEPROMReadlong@two+3,c
  4833                           
  4834                           ;EEPROM.c: 59: long one = EEPROM_Read(address + 3);
  4835  00137E  0E03               	movlw	3
  4836  001380  2403               	addwf	EEPROMReadlong@address,w,c
  4837  001382  6E01               	movwf	EEPROM_Read@address,c
  4838  001384  0E00               	movlw	0
  4839  001386  2004               	addwfc	EEPROMReadlong@address+1,w,c
  4840  001388  6E02               	movwf	EEPROM_Read@address+1,c
  4841  00138A  EC2C  F00F         	call	_EEPROM_Read	;wreg free
  4842  00138E  6E07               	movwf	??_EEPROMReadlong& (0+255),c
  4843  001390  5007               	movf	??_EEPROMReadlong,w,c
  4844  001392  6E2F               	movwf	EEPROMReadlong@one,c
  4845  001394  6A30               	clrf	EEPROMReadlong@one+1,c
  4846  001396  6A31               	clrf	EEPROMReadlong@one+2,c
  4847  001398  6A32               	clrf	EEPROMReadlong@one+3,c
  4848                           
  4849                           ;EEPROM.c: 62: return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0x
      +                          FFFFFF) + ((one << 24) & 0xFFFFFFFF);
  4850  00139A  C02F  F007         	movff	EEPROMReadlong@one,??_EEPROMReadlong
  4851  00139E  C030  F008         	movff	EEPROMReadlong@one+1,??_EEPROMReadlong+1
  4852  0013A2  C031  F009         	movff	EEPROMReadlong@one+2,??_EEPROMReadlong+2
  4853  0013A6  C032  F00A         	movff	EEPROMReadlong@one+3,??_EEPROMReadlong+3
  4854  0013AA  C007  F00A         	movff	??_EEPROMReadlong,??_EEPROMReadlong+3
  4855  0013AE  6A09               	clrf	??_EEPROMReadlong+2,c
  4856  0013B0  6A08               	clrf	??_EEPROMReadlong+1,c
  4857  0013B2  6A07               	clrf	??_EEPROMReadlong,c
  4858  0013B4  C02B  F00B         	movff	EEPROMReadlong@two,??_EEPROMReadlong+4
  4859  0013B8  C02C  F00C         	movff	EEPROMReadlong@two+1,??_EEPROMReadlong+5
  4860  0013BC  C02D  F00D         	movff	EEPROMReadlong@two+2,??_EEPROMReadlong+6
  4861  0013C0  C02E  F00E         	movff	EEPROMReadlong@two+3,??_EEPROMReadlong+7
  4862  0013C4  C00C  F00E         	movff	??_EEPROMReadlong+5,??_EEPROMReadlong+7
  4863  0013C8  C00B  F00D         	movff	??_EEPROMReadlong+4,??_EEPROMReadlong+6
  4864  0013CC  6A0C               	clrf	??_EEPROMReadlong+5,c
  4865  0013CE  6A0B               	clrf	??_EEPROMReadlong+4,c
  4866  0013D0  0EFF               	movlw	255
  4867  0013D2  140B               	andwf	??_EEPROMReadlong+4,w,c
  4868  0013D4  6E0F               	movwf	(??_EEPROMReadlong+8)& (0+255),c
  4869  0013D6  0EFF               	movlw	255
  4870  0013D8  140C               	andwf	??_EEPROMReadlong+5,w,c
  4871  0013DA  6E10               	movwf	(??_EEPROMReadlong+9)& (0+255),c
  4872  0013DC  0EFF               	movlw	255
  4873  0013DE  140D               	andwf	??_EEPROMReadlong+6,w,c
  4874  0013E0  6E11               	movwf	(??_EEPROMReadlong+10)& (0+255),c
  4875  0013E2  0E00               	movlw	0
  4876  0013E4  140E               	andwf	??_EEPROMReadlong+7,w,c
  4877  0013E6  6E12               	movwf	(??_EEPROMReadlong+11)& (0+255),c
  4878  0013E8  C027  F014         	movff	EEPROMReadlong@three,??_EEPROMReadlong+13
  4879  0013EC  C028  F015         	movff	EEPROMReadlong@three+1,??_EEPROMReadlong+14
  4880  0013F0  C029  F016         	movff	EEPROMReadlong@three+2,??_EEPROMReadlong+15
  4881  0013F4  6A13               	clrf	(??_EEPROMReadlong+12)& (0+255),c
  4882  0013F6  0EFF               	movlw	255
  4883  0013F8  1413               	andwf	??_EEPROMReadlong+12,w,c
  4884  0013FA  6E17               	movwf	(??_EEPROMReadlong+16)& (0+255),c
  4885  0013FC  0EFF               	movlw	255
  4886  0013FE  1414               	andwf	??_EEPROMReadlong+13,w,c
  4887  001400  6E18               	movwf	(??_EEPROMReadlong+17)& (0+255),c
  4888  001402  0E00               	movlw	0
  4889  001404  1415               	andwf	??_EEPROMReadlong+14,w,c
  4890  001406  6E19               	movwf	(??_EEPROMReadlong+18)& (0+255),c
  4891  001408  0E00               	movlw	0
  4892  00140A  1416               	andwf	??_EEPROMReadlong+15,w,c
  4893  00140C  6E1A               	movwf	(??_EEPROMReadlong+19)& (0+255),c
  4894  00140E  5023               	movf	EEPROMReadlong@four,w,c
  4895  001410  2417               	addwf	??_EEPROMReadlong+16,w,c
  4896  001412  6E1B               	movwf	(??_EEPROMReadlong+20)& (0+255),c
  4897  001414  0E00               	movlw	0
  4898  001416  2018               	addwfc	??_EEPROMReadlong+17,w,c
  4899  001418  6E1C               	movwf	(??_EEPROMReadlong+21)& (0+255),c
  4900  00141A  0E00               	movlw	0
  4901  00141C  2019               	addwfc	??_EEPROMReadlong+18,w,c
  4902  00141E  6E1D               	movwf	(??_EEPROMReadlong+22)& (0+255),c
  4903  001420  0E00               	movlw	0
  4904  001422  201A               	addwfc	??_EEPROMReadlong+19,w,c
  4905  001424  6E1E               	movwf	(??_EEPROMReadlong+23)& (0+255),c
  4906  001426  500F               	movf	??_EEPROMReadlong+8,w,c
  4907  001428  241B               	addwf	??_EEPROMReadlong+20,w,c
  4908  00142A  6E1F               	movwf	(??_EEPROMReadlong+24)& (0+255),c
  4909  00142C  5010               	movf	??_EEPROMReadlong+9,w,c
  4910  00142E  201C               	addwfc	??_EEPROMReadlong+21,w,c
  4911  001430  6E20               	movwf	(??_EEPROMReadlong+25)& (0+255),c
  4912  001432  5011               	movf	??_EEPROMReadlong+10,w,c
  4913  001434  201D               	addwfc	??_EEPROMReadlong+22,w,c
  4914  001436  6E21               	movwf	(??_EEPROMReadlong+26)& (0+255),c
  4915  001438  5012               	movf	??_EEPROMReadlong+11,w,c
  4916  00143A  201E               	addwfc	??_EEPROMReadlong+23,w,c
  4917  00143C  6E22               	movwf	(??_EEPROMReadlong+27)& (0+255),c
  4918  00143E  5007               	movf	??_EEPROMReadlong,w,c
  4919  001440  241F               	addwf	??_EEPROMReadlong+24,w,c
  4920  001442  6E03               	movwf	?_EEPROMReadlong,c
  4921  001444  5008               	movf	??_EEPROMReadlong+1,w,c
  4922  001446  2020               	addwfc	??_EEPROMReadlong+25,w,c
  4923  001448  6E04               	movwf	?_EEPROMReadlong+1,c
  4924  00144A  5009               	movf	??_EEPROMReadlong+2,w,c
  4925  00144C  2021               	addwfc	??_EEPROMReadlong+26,w,c
  4926  00144E  6E05               	movwf	?_EEPROMReadlong+2,c
  4927  001450  500A               	movf	??_EEPROMReadlong+3,w,c
  4928  001452  2022               	addwfc	??_EEPROMReadlong+27,w,c
  4929  001454  6E06               	movwf	?_EEPROMReadlong+3,c
  4930  001456  0012               	return	
  4931  001458                     __end_of_EEPROMReadlong:
  4932                           	opt stack 0
  4933                           tblptru	equ	0xFF8
  4934                           tblptrh	equ	0xFF7
  4935                           tblptrl	equ	0xFF6
  4936                           tablat	equ	0xFF5
  4937                           intcon	equ	0xFF2
  4938                           indf0	equ	0xFEF
  4939                           postinc0	equ	0xFEE
  4940                           fsr0h	equ	0xFEA
  4941                           fsr0l	equ	0xFE9
  4942                           wreg	equ	0xFE8
  4943                           indf2	equ	0xFDF
  4944                           fsr2h	equ	0xFDA
  4945                           fsr2l	equ	0xFD9
  4946                           status	equ	0xFD8
  4947                           
  4948 ;; *************** function _EEPROM_Read *****************
  4949 ;; Defined at:
  4950 ;;		line 27 in file "EEPROM.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  address         2    0[COMRAM] int 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;		None
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  1    wreg      unsigned char 
  4957 ;; Registers used:
  4958 ;;		wreg, status,2
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4964 ;;      Params:         2       0       0       0       0       0       0       0       0
  4965 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4966 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4967 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4968 ;;Total ram usage:        2 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; This function calls:
  4971 ;;		Nothing
  4972 ;; This function is called by:
  4973 ;;		_EEPROMReadlong
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           	psect	text26
  4978  001E58                     __ptext26:
  4979                           	opt stack 0
  4980  001E58                     _EEPROM_Read:
  4981                           	opt stack 28
  4982                           
  4983                           ;EEPROM.c: 30: EEADR=address;
  4984                           
  4985                           ;incstack = 0
  4986  001E58  C001  FFA9         	movff	EEPROM_Read@address,4009	;volatile
  4987                           
  4988                           ;EEPROM.c: 31: EECON1bits.WREN=0;
  4989  001E5C  94A6               	bcf	4006,2,c	;volsfr
  4990                           
  4991                           ;EEPROM.c: 32: EECON1bits.EEPGD=0;
  4992  001E5E  9EA6               	bcf	4006,7,c	;volsfr
  4993                           
  4994                           ;EEPROM.c: 33: EECON1bits.RD=1;
  4995  001E60  80A6               	bsf	4006,0,c	;volsfr
  4996                           
  4997                           ;EEPROM.c: 34: return(EEDATA);
  4998  001E62  50A8               	movf	4008,w,c	;volatile
  4999  001E64  0012               	return	
  5000  001E66                     __end_of_EEPROM_Read:
  5001                           	opt stack 0
  5002                           tblptru	equ	0xFF8
  5003                           tblptrh	equ	0xFF7
  5004                           tblptrl	equ	0xFF6
  5005                           tablat	equ	0xFF5
  5006                           intcon	equ	0xFF2
  5007                           indf0	equ	0xFEF
  5008                           postinc0	equ	0xFEE
  5009                           fsr0h	equ	0xFEA
  5010                           fsr0l	equ	0xFE9
  5011                           wreg	equ	0xFE8
  5012                           indf2	equ	0xFDF
  5013                           fsr2h	equ	0xFDA
  5014                           fsr2l	equ	0xFD9
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function ___ftneg *****************
  5018 ;; Defined at:
  5019 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  f1              3   48[COMRAM] float 
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;		None
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  3   48[COMRAM] float 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2, status,0
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5033 ;;      Params:         3       0       0       0       0       0       0       0       0
  5034 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5036 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5037 ;;Total ram usage:        3 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; This function calls:
  5040 ;;		Nothing
  5041 ;; This function is called by:
  5042 ;;		_main
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text27
  5047  001DDC                     __ptext27:
  5048                           	opt stack 0
  5049  001DDC                     ___ftneg:
  5050                           	opt stack 30
  5051                           
  5052                           ;incstack = 0
  5053  001DDC  5031               	movf	___ftneg@f1,w,c
  5054  001DDE  1032               	iorwf	___ftneg@f1+1,w,c
  5055  001DE0  1033               	iorwf	___ftneg@f1+2,w,c
  5056  001DE2  B4D8               	btfsc	status,2,c
  5057  001DE4  D006               	goto	l614
  5058  001DE6  0E00               	movlw	0
  5059  001DE8  1A31               	xorwf	___ftneg@f1,f,c
  5060  001DEA  0E00               	movlw	0
  5061  001DEC  1A32               	xorwf	___ftneg@f1+1,f,c
  5062  001DEE  0E80               	movlw	128
  5063  001DF0  1A33               	xorwf	___ftneg@f1+2,f,c
  5064  001DF2                     l614:
  5065  001DF2  C031  F031         	movff	___ftneg@f1,?___ftneg
  5066  001DF6  C032  F032         	movff	___ftneg@f1+1,?___ftneg+1
  5067  001DFA  C033  F033         	movff	___ftneg@f1+2,?___ftneg+2
  5068  001DFE  0012               	return		;funcret
  5069  001E00                     __end_of___ftneg:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           intcon	equ	0xFF2
  5076                           indf0	equ	0xFEF
  5077                           postinc0	equ	0xFEE
  5078                           fsr0h	equ	0xFEA
  5079                           fsr0l	equ	0xFE9
  5080                           wreg	equ	0xFE8
  5081                           indf2	equ	0xFDF
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function ___ftmul *****************
  5087 ;; Defined at:
  5088 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  f1              3   33[COMRAM] float 
  5091 ;;  f2              3   36[COMRAM] float 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  f3_as_produc    3   43[COMRAM] unsigned um
  5094 ;;  sign            1   47[COMRAM] unsigned char 
  5095 ;;  cntr            1   46[COMRAM] unsigned char 
  5096 ;;  exp             1   42[COMRAM] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  3   33[COMRAM] float 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5106 ;;      Params:         6       0       0       0       0       0       0       0       0
  5107 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5108 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5109 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5110 ;;Total ram usage:       15 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    1
  5113 ;; This function calls:
  5114 ;;		___ftpack
  5115 ;; This function is called by:
  5116 ;;		_main
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text28
  5121  00154C                     __ptext28:
  5122                           	opt stack 0
  5123  00154C                     ___ftmul:
  5124                           	opt stack 29
  5125                           
  5126                           ;incstack = 0
  5127  00154C  C024  F028         	movff	___ftmul@f1+2,??___ftmul
  5128  001550  6A29               	clrf	(??___ftmul+1)& (0+255),c
  5129  001552  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  5130  001554  3423               	rlcf	___ftmul@f1+1,w,c
  5131  001556  3628               	rlcf	??___ftmul& (0+255),f,c
  5132  001558  E301               	bnc	u1721
  5133  00155A  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  5134  00155C                     u1721:
  5135  00155C  5028               	movf	??___ftmul,w,c
  5136  00155E  6E2B               	movwf	___ftmul@exp,c
  5137  001560  502B               	movf	___ftmul@exp,w,c
  5138  001562  A4D8               	btfss	status,2,c
  5139  001564  D007               	goto	l603
  5140  001566  0E00               	movlw	0
  5141  001568  6E22               	movwf	?___ftmul,c
  5142  00156A  0E00               	movlw	0
  5143  00156C  6E23               	movwf	?___ftmul+1,c
  5144  00156E  0E00               	movlw	0
  5145  001570  6E24               	movwf	?___ftmul+2,c
  5146  001572  0012               	return	
  5147  001574                     l603:
  5148  001574  C027  F028         	movff	___ftmul@f2+2,??___ftmul
  5149  001578  6A29               	clrf	(??___ftmul+1)& (0+255),c
  5150  00157A  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  5151  00157C  3426               	rlcf	___ftmul@f2+1,w,c
  5152  00157E  3628               	rlcf	??___ftmul& (0+255),f,c
  5153  001580  E301               	bnc	u1741
  5154  001582  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  5155  001584                     u1741:
  5156  001584  5028               	movf	??___ftmul,w,c
  5157  001586  6E30               	movwf	___ftmul@sign,c
  5158  001588  5030               	movf	___ftmul@sign,w,c
  5159  00158A  A4D8               	btfss	status,2,c
  5160  00158C  D007               	goto	l605
  5161  00158E  0E00               	movlw	0
  5162  001590  6E22               	movwf	?___ftmul,c
  5163  001592  0E00               	movlw	0
  5164  001594  6E23               	movwf	?___ftmul+1,c
  5165  001596  0E00               	movlw	0
  5166  001598  6E24               	movwf	?___ftmul+2,c
  5167  00159A  0012               	return	
  5168  00159C                     l605:
  5169  00159C  5030               	movf	___ftmul@sign,w,c
  5170  00159E  0F7B               	addlw	123
  5171  0015A0  262B               	addwf	___ftmul@exp,f,c
  5172  0015A2  C024  F030         	movff	___ftmul@f1+2,___ftmul@sign
  5173  0015A6  5027               	movf	___ftmul@f2+2,w,c
  5174  0015A8  1A30               	xorwf	___ftmul@sign,f,c
  5175  0015AA  0E80               	movlw	128
  5176  0015AC  1630               	andwf	___ftmul@sign,f,c
  5177  0015AE  8E23               	bsf	___ftmul@f1+1,7,c
  5178  0015B0  8E26               	bsf	___ftmul@f2+1,7,c
  5179  0015B2  0EFF               	movlw	255
  5180  0015B4  1625               	andwf	___ftmul@f2,f,c
  5181  0015B6  0EFF               	movlw	255
  5182  0015B8  1626               	andwf	___ftmul@f2+1,f,c
  5183  0015BA  0E00               	movlw	0
  5184  0015BC  1627               	andwf	___ftmul@f2+2,f,c
  5185  0015BE  0E00               	movlw	0
  5186  0015C0  6E2C               	movwf	___ftmul@f3_as_product,c
  5187  0015C2  0E00               	movlw	0
  5188  0015C4  6E2D               	movwf	___ftmul@f3_as_product+1,c
  5189  0015C6  0E00               	movlw	0
  5190  0015C8  6E2E               	movwf	___ftmul@f3_as_product+2,c
  5191  0015CA  0E07               	movlw	7
  5192  0015CC  6E2F               	movwf	___ftmul@cntr,c
  5193  0015CE  A022               	btfss	___ftmul@f1,0,c
  5194  0015D0  D006               	goto	l607
  5195  0015D2  5025               	movf	___ftmul@f2,w,c
  5196  0015D4  262C               	addwf	___ftmul@f3_as_product,f,c
  5197  0015D6  5026               	movf	___ftmul@f2+1,w,c
  5198  0015D8  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  5199  0015DA  5027               	movf	___ftmul@f2+2,w,c
  5200  0015DC  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  5201  0015DE                     l607:
  5202  0015DE  90D8               	bcf	status,0,c
  5203  0015E0  3224               	rrcf	___ftmul@f1+2,f,c
  5204  0015E2  3223               	rrcf	___ftmul@f1+1,f,c
  5205  0015E4  3222               	rrcf	___ftmul@f1,f,c
  5206  0015E6  90D8               	bcf	status,0,c
  5207  0015E8  3625               	rlcf	___ftmul@f2,f,c
  5208  0015EA  3626               	rlcf	___ftmul@f2+1,f,c
  5209  0015EC  3627               	rlcf	___ftmul@f2+2,f,c
  5210  0015EE  2E2F               	decfsz	___ftmul@cntr,f,c
  5211  0015F0  D7EE               	goto	l606
  5212  0015F2  0E09               	movlw	9
  5213  0015F4  6E2F               	movwf	___ftmul@cntr,c
  5214  0015F6  A022               	btfss	___ftmul@f1,0,c
  5215  0015F8  D006               	goto	l610
  5216  0015FA  5025               	movf	___ftmul@f2,w,c
  5217  0015FC  262C               	addwf	___ftmul@f3_as_product,f,c
  5218  0015FE  5026               	movf	___ftmul@f2+1,w,c
  5219  001600  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  5220  001602  5027               	movf	___ftmul@f2+2,w,c
  5221  001604  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  5222  001606                     l610:
  5223  001606  90D8               	bcf	status,0,c
  5224  001608  3224               	rrcf	___ftmul@f1+2,f,c
  5225  00160A  3223               	rrcf	___ftmul@f1+1,f,c
  5226  00160C  3222               	rrcf	___ftmul@f1,f,c
  5227  00160E  90D8               	bcf	status,0,c
  5228  001610  322E               	rrcf	___ftmul@f3_as_product+2,f,c
  5229  001612  322D               	rrcf	___ftmul@f3_as_product+1,f,c
  5230  001614  322C               	rrcf	___ftmul@f3_as_product,f,c
  5231  001616  2E2F               	decfsz	___ftmul@cntr,f,c
  5232  001618  D7EE               	goto	l609
  5233  00161A  C02C  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5234  00161E  C02D  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5235  001622  C02E  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5236  001626  C02B  F004         	movff	___ftmul@exp,___ftpack@exp
  5237  00162A  C030  F005         	movff	___ftmul@sign,___ftpack@sign
  5238  00162E  ECF9  F00B         	call	___ftpack	;wreg free
  5239  001632  C001  F022         	movff	?___ftpack,?___ftmul
  5240  001636  C002  F023         	movff	?___ftpack+1,?___ftmul+1
  5241  00163A  C003  F024         	movff	?___ftpack+2,?___ftmul+2
  5242  00163E  0012               	return	
  5243  001640                     __end_of___ftmul:
  5244                           	opt stack 0
  5245                           tblptru	equ	0xFF8
  5246                           tblptrh	equ	0xFF7
  5247                           tblptrl	equ	0xFF6
  5248                           tablat	equ	0xFF5
  5249                           intcon	equ	0xFF2
  5250                           indf0	equ	0xFEF
  5251                           postinc0	equ	0xFEE
  5252                           fsr0h	equ	0xFEA
  5253                           fsr0l	equ	0xFE9
  5254                           wreg	equ	0xFE8
  5255                           indf2	equ	0xFDF
  5256                           fsr2h	equ	0xFDA
  5257                           fsr2l	equ	0xFD9
  5258                           status	equ	0xFD8
  5259                           
  5260 ;; *************** function ___ftpack *****************
  5261 ;; Defined at:
  5262 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;  arg             3    0[COMRAM] unsigned um
  5265 ;;  exp             1    3[COMRAM] unsigned char 
  5266 ;;  sign            1    4[COMRAM] unsigned char 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;		None
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  3    0[COMRAM] float 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5278 ;;      Params:         5       0       0       0       0       0       0       0       0
  5279 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5280 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5281 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5282 ;;Total ram usage:        8 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; This function calls:
  5285 ;;		Nothing
  5286 ;; This function is called by:
  5287 ;;		___altoft
  5288 ;;		___awtoft
  5289 ;;		___ftadd
  5290 ;;		___ftdiv
  5291 ;;		___ftmul
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text29
  5296  0017F2                     __ptext29:
  5297                           	opt stack 0
  5298  0017F2                     ___ftpack:
  5299                           	opt stack 27
  5300                           
  5301                           ;incstack = 0
  5302  0017F2  5004               	movf	___ftpack@exp,w,c
  5303  0017F4  B4D8               	btfsc	status,2,c
  5304  0017F6  D005               	goto	u960
  5305  0017F8  5001               	movf	___ftpack@arg,w,c
  5306  0017FA  1002               	iorwf	___ftpack@arg+1,w,c
  5307  0017FC  1003               	iorwf	___ftpack@arg+2,w,c
  5308  0017FE  A4D8               	btfss	status,2,c
  5309  001800  D00C               	goto	l524
  5310  001802                     u960:
  5311  001802  0E00               	movlw	0
  5312  001804  6E01               	movwf	?___ftpack,c
  5313  001806  0E00               	movlw	0
  5314  001808  6E02               	movwf	?___ftpack+1,c
  5315  00180A  0E00               	movlw	0
  5316  00180C  6E03               	movwf	?___ftpack+2,c
  5317  00180E  0012               	return	
  5318  001810  2A04               	incf	___ftpack@exp,f,c
  5319  001812  90D8               	bcf	status,0,c
  5320  001814  3203               	rrcf	___ftpack@arg+2,f,c
  5321  001816  3202               	rrcf	___ftpack@arg+1,f,c
  5322  001818  3201               	rrcf	___ftpack@arg,f,c
  5323  00181A                     l524:
  5324  00181A  0E00               	movlw	0
  5325  00181C  1401               	andwf	___ftpack@arg,w,c
  5326  00181E  6E06               	movwf	??___ftpack& (0+255),c
  5327  001820  0E00               	movlw	0
  5328  001822  1402               	andwf	___ftpack@arg+1,w,c
  5329  001824  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5330  001826  0EFE               	movlw	254
  5331  001828  1403               	andwf	___ftpack@arg+2,w,c
  5332  00182A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5333  00182C  5006               	movf	??___ftpack,w,c
  5334  00182E  1007               	iorwf	??___ftpack+1,w,c
  5335  001830  1008               	iorwf	??___ftpack+2,w,c
  5336  001832  B4D8               	btfsc	status,2,c
  5337  001834  D00C               	goto	l527
  5338  001836  D7EC               	goto	l525
  5339  001838  2A04               	incf	___ftpack@exp,f,c
  5340  00183A  0E01               	movlw	1
  5341  00183C  2601               	addwf	___ftpack@arg,f,c
  5342  00183E  0E00               	movlw	0
  5343  001840  2202               	addwfc	___ftpack@arg+1,f,c
  5344  001842  0E00               	movlw	0
  5345  001844  2203               	addwfc	___ftpack@arg+2,f,c
  5346  001846  90D8               	bcf	status,0,c
  5347  001848  3203               	rrcf	___ftpack@arg+2,f,c
  5348  00184A  3202               	rrcf	___ftpack@arg+1,f,c
  5349  00184C  3201               	rrcf	___ftpack@arg,f,c
  5350  00184E                     l527:
  5351  00184E  0E00               	movlw	0
  5352  001850  1401               	andwf	___ftpack@arg,w,c
  5353  001852  6E06               	movwf	??___ftpack& (0+255),c
  5354  001854  0E00               	movlw	0
  5355  001856  1402               	andwf	___ftpack@arg+1,w,c
  5356  001858  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5357  00185A  0EFF               	movlw	255
  5358  00185C  1403               	andwf	___ftpack@arg+2,w,c
  5359  00185E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5360  001860  5006               	movf	??___ftpack,w,c
  5361  001862  1007               	iorwf	??___ftpack+1,w,c
  5362  001864  1008               	iorwf	??___ftpack+2,w,c
  5363  001866  B4D8               	btfsc	status,2,c
  5364  001868  D006               	goto	l530
  5365  00186A  D7E6               	goto	l528
  5366  00186C  0604               	decf	___ftpack@exp,f,c
  5367  00186E  90D8               	bcf	status,0,c
  5368  001870  3601               	rlcf	___ftpack@arg,f,c
  5369  001872  3602               	rlcf	___ftpack@arg+1,f,c
  5370  001874  3603               	rlcf	___ftpack@arg+2,f,c
  5371  001876                     l530:
  5372  001876  BE02               	btfsc	___ftpack@arg+1,7,c
  5373  001878  D003               	goto	u1000
  5374  00187A  0E02               	movlw	2
  5375  00187C  6004               	cpfslt	___ftpack@exp,c
  5376  00187E  D7F6               	goto	l531
  5377  001880                     u1000:
  5378  001880  A004               	btfss	___ftpack@exp,0,c
  5379  001882  9E02               	bcf	___ftpack@arg+1,7,c
  5380  001884  90D8               	bcf	status,0,c
  5381  001886  3204               	rrcf	___ftpack@exp,f,c
  5382  001888  5004               	movf	___ftpack@exp,w,c
  5383  00188A  1203               	iorwf	___ftpack@arg+2,f,c
  5384  00188C  5005               	movf	___ftpack@sign,w,c
  5385  00188E  A4D8               	btfss	status,2,c
  5386  001890  8E03               	bsf	___ftpack@arg+2,7,c
  5387  001892  C001  F001         	movff	___ftpack@arg,?___ftpack
  5388  001896  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5389  00189A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5390  00189E  0012               	return	
  5391  0018A0                     __end_of___ftpack:
  5392                           	opt stack 0
  5393                           tblptru	equ	0xFF8
  5394                           tblptrh	equ	0xFF7
  5395                           tblptrl	equ	0xFF6
  5396                           tablat	equ	0xFF5
  5397                           intcon	equ	0xFF2
  5398                           indf0	equ	0xFEF
  5399                           postinc0	equ	0xFEE
  5400                           fsr0h	equ	0xFEA
  5401                           fsr0l	equ	0xFE9
  5402                           wreg	equ	0xFE8
  5403                           indf2	equ	0xFDF
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           tblptru	equ	0xFF8
  5408                           tblptrh	equ	0xFF7
  5409                           tblptrl	equ	0xFF6
  5410                           tablat	equ	0xFF5
  5411                           intcon	equ	0xFF2
  5412                           indf0	equ	0xFEF
  5413                           postinc0	equ	0xFEE
  5414                           fsr0h	equ	0xFEA
  5415                           fsr0l	equ	0xFE9
  5416                           wreg	equ	0xFE8
  5417                           indf2	equ	0xFDF
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422                           	psect	rparam
  5423  0000                     tblptru	equ	0xFF8
  5424                           tblptrh	equ	0xFF7
  5425                           tblptrl	equ	0xFF6
  5426                           tablat	equ	0xFF5
  5427                           intcon	equ	0xFF2
  5428                           indf0	equ	0xFEF
  5429                           postinc0	equ	0xFEE
  5430                           fsr0h	equ	0xFEA
  5431                           fsr0l	equ	0xFE9
  5432                           wreg	equ	0xFE8
  5433                           indf2	equ	0xFDF
  5434                           fsr2h	equ	0xFDA
  5435                           fsr2l	equ	0xFD9
  5436                           status	equ	0xFD8


Data Sizes:
    Strings     153
    Constant    0
    Data        0
    BSS         119
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      95
    BANK0           160     18     134
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    intToAscci@str	PTR unsigned char  size(2) Largest target is 10
		 -> calibrate@buff(COMRAM[10]), main@buff(BANK0[10]), 

    send_string@str	PTR unsigned char  size(2) Largest target is 2047
		 -> STR_13(CODE[16]), RAM(DATA[2047]), STR_10(CODE[22]), calibrate@buff(COMRAM[10]), 
		 -> STR_7(CODE[15]), STR_5(CODE[5]), STR_4(CODE[6]), main@buff(BANK0[10]), 
		 -> STR_3(CODE[9]), STR_2(CODE[12]), STR_1(CODE[9]), 

    LCD_print@str	PTR unsigned char  size(2) Largest target is 18
		 -> STR_14(CODE[12]), STR_12(CODE[16]), STR_11(CODE[18]), STR_9(CODE[17]), 
		 -> STR_8(CODE[12]), STR_6(CODE[4]), main@buff(BANK0[10]), 

    sp__intToAscci	PTR unsigned char  size(2) Largest target is 10
		 -> calibrate@buff(COMRAM[10]), main@buff(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_USART_Init
    _init->_USART_Init
    _USART_Init->___fttol
    ___fttol->___ftadd
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _LCD_Init->_LCD_Command
    _calibrate->_EEPROMReadlong
    _send_string->_txr
    _intToAscci->___aldiv
    ___ftdiv->___altoft
    ___altoft->___ftpack
    _USART_newline->_txr
    _txr->_delay
    _LCD_print->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Clear->_LCD_Command
    _LCD_Command->_MSdelay
    _EEPROMWritelong->_EEPROM_Write
    _EEPROMReadlong->_EEPROM_Read
    ___ftneg->___ftmul
    ___ftmul->___ftdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   71559
                                             83 COMRAM     8     8      0
                                              0 BANK0     18    18      0
                     _EEPROMReadlong
                          _LCD_Clear
                        _LCD_Command
                          _LCD_print
                            _MSdelay
                          _ReadCount
                         _USART_Init
                      _USART_newline
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                          _calibrate
                               _init
                         _intToAscci
                        _send_string
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   15966
                           _LCD_Init
                          _LCD_print
                            _MSdelay
                         _USART_Init
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           5     3      2   10845
                                             78 COMRAM     5     3      2
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     404
                                             63 COMRAM    15    11      4
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3901
                                             51 COMRAM    12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2672
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             0     0      0    2295
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _calibrate                                           30    30      0   19110
                                             50 COMRAM    30    30      0
                     _EEPROMReadlong
                    _EEPROMWritelong
                          _LCD_Clear
                          _LCD_print
                            _MSdelay
                          _ReadCount
                      _USART_newline
                            ___aldiv
                           ___altoft
                            ___ftdiv
                         _intToAscci
                        _send_string
 ---------------------------------------------------------------------------------
 (1) _send_string                                          6     4      2    1374
                                              6 COMRAM     6     4      2
                                _txr
 ---------------------------------------------------------------------------------
 (1) _intToAscci                                          16    10      6    2466
                                             14 COMRAM    16    10      6
                            ___aldiv
                            ___almod
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     448
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     908
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3671
                                             18 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2947
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _USART_newline                                        0     0      0     144
                                _txr
 ---------------------------------------------------------------------------------
 (2) _txr                                                  1     1      0     144
                                              5 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2     122
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ReadCount                                            9     5      4     116
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCD_print                                            6     4      2    1746
                                              7 COMRAM     6     4      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             1     1      0    1124
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0    2295
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (3) _LCD_Command                                          3     3      0    1215
                                              6 COMRAM     3     3      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _MSdelay                                              6     4      2    1080
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _EEPROMWritelong                                     10     4      6    1224
                                              3 COMRAM    10     4      6
                       _EEPROM_Write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_Write                                         3     0      3     652
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _EEPROMReadlong                                      48    44      4     810
                                              2 COMRAM    48    44      4
                        _EEPROM_Read
 ---------------------------------------------------------------------------------
 (3) _EEPROM_Read                                          2     0      2     326
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) ___ftneg                                              3     0      3     121
                                             48 COMRAM     3     0      3
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    3109
                                             33 COMRAM    15     9      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMReadlong
     _EEPROM_Read
   _LCD_Clear
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_Command
     _MSdelay
   _LCD_print
     _LCD_Char
       _MSdelay
   _MSdelay
   _ReadCount
   _USART_Init
     ___awtoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
   _USART_newline
     _txr
       _delay
   ___altoft
     ___ftpack
   ___ftadd
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftmul
     ___altoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftneg
     ___altoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
   _calibrate
     _EEPROMReadlong
       _EEPROM_Read
     _EEPROMWritelong
       _EEPROM_Write
     _LCD_Clear
       _LCD_Command
         _MSdelay
       _MSdelay
     _LCD_print
       _LCD_Char
         _MSdelay
     _MSdelay
     _ReadCount
     _USART_newline
       _txr
         _delay
     ___aldiv
     ___altoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     _intToAscci
       ___aldiv
       ___almod
     _send_string
       _txr
         _delay
   _init
     _LCD_Init
       _LCD_Command
         _MSdelay
       _MSdelay
     _LCD_print
       _LCD_Char
         _MSdelay
     _MSdelay
     _USART_Init
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
   _intToAscci
     ___aldiv
     ___almod
   _send_string
     _txr
       _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      86       5       83.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5B      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5      20        0.0%
DATA                 0      0      E5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jul 29 23:50:29 2018

            ___altoft@exp 0011                         _b 005F                         _i 0086  
            ?_LCD_Command 0001             _USART_newline 1E4A             ___altoft@sign 0012  
                      _b0 005E                        _b1 005D                        _b2 005C  
                      _b3 00CE                        _b4 00CD                        _b5 00CC  
                      _b6 00CB                        _b7 00CA                        _b8 00C9  
                      _b9 00C8               __CFG_BOR$ON 000000               __CFG_BORV$3 000000  
            __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000  
            __CFG_CP3$OFF 000000              ___ftadd@exp1 003F              ___ftadd@exp2 003E  
            ___ftadd@sign 003D                       l212 1B64                       l213 1B30  
                     l230 1CC0                       l160 0E7C                       l161 0EBA  
                     l170 196E                       l251 1AF2                       l172 1994  
                     l252 1ABE                       l229 1CDE                       l181 0A8C  
                     l263 1DA2                       l168 1964                       l264 1D9E  
                     l280 1310                       l176 08F0                       l281 1298  
                     l505 1D04                       l530 1876                       l610 1606  
                     l178 0A24                       l531 186C                       l603 1574  
                     l275 1252                       l179 09BC                       l524 181A  
                     l372 17BC                       l276 121A                       l525 1810  
                     l605 159C                       l373 17CA                       l365 1742  
                     l381 18EE                       l606 15CE                       l614 1DF2  
                     l374 17E0                       l366 175A                       l382 18E2  
                     l278 128E                       l527 184E                       l607 15DE  
                     l528 1838                       l368 1788                       l632 151E  
                     l624 1484                       l609 15F6                       l369 177C  
                     l385 1916                       l633 1512                       l298 1DD4  
                     l394 19F8                       l386 1924                       l378 18BC  
                     l570 111A                       l626 14FA                       l395 19EC  
                     l387 193A                       l379 18D0                       l555 109E  
                     l635 153A                       l627 14EA                       l564 112E  
                     l581 1186                       l590 1690                       l582 11A2  
                     l591 16CE                       l583 11D2                       l559 10C8  
                     l592 16F4                       l569 1124                       l578 1162  
                     l579 1158                       l588 1668              __CFG_CPB$OFF 000000  
                     _b10 00C7              __CFG_CPD$OFF 000000                       _b11 00C6  
                     _b12 00C5                       _b13 00C4                       _b14 00C3  
                     _b15 00C2                       _b16 00C1                       _b17 00C0  
                     u920 1CDA                       u960 1802    EEPROMWritelong@address 0004  
                     _adc 00B9                       _cci 00BA                       _cct 00BB  
 __size_of_EEPROMReadlong 012A                       _val 00B6                       _ten 007A  
                     _rdy 00BF                       _rez 009E                       _txr 1E1E  
                     wreg 000FE8               main@address 00E1              __CFG_LVP$OFF 000000  
             LCD_Char@dat 0007              ___ftdiv@cntr 001C              ___ftdiv@sign 0021  
            __CFG_WDT$OFF 000000                      l2321 0A7C                      l2171 1996  
                    l2307 0A3C                      l2337 0B0A                      l2265 08E0  
                    l1725 1CDA                      l1717 1CC8                      l1821 1E20  
                    l2285 0954                      STR_1 0886                      STR_2 0859  
                    STR_3 087D                      STR_4 088F                      STR_5 0895  
                    STR_6 0896                      STR_7 084A                      STR_8 0871  
                    STR_9 0829                      ?_txr 0001                      u1000 1880  
                    u1210 1090                      u1140 18F2                      u1310 1136  
                    u1080 178C                      u1240 10BA                      u1401 1678  
                    u1171 105C                      u1340 116A                      u1500 1524  
                    u1181 1070                      _LATA 000F89                      u1270 10F8  
                    u1520 1AEA                      u1441 1468                      u1530 1B1E  
                    u1620 1B5C                      u1460 14A2                      u1381 1650  
                    u1630 1B90                      u1710 0B0A                      u1527 1AE0  
                    u1560 1270                      u1721 155C                      u1537 1B14  
                    u1465 149A                      u1627 1B52                      u1741 1584  
                    u1637 1B86                      u1680 0954                      _UCON 000F6D  
                    _ack1 00BE                      _ack2 00BD                      _main 0CBC  
                    _page 00E5                ReadCount@i 0005              ___ftpack@arg 0001  
                    _init 1B98                      _rez1 00AE                      _rez2 00AA  
                    _rez3 00A6                      _rez4 00A2        __size_of_LCD_Clear 0014  
            ___ftpack@exp 0004                      _ones 0076                      _rezz 009A  
                    fsr0h 000FEA                      indf0 000FEF                      fsr2h 000FDA  
                    fsr0l 000FE9                      indf2 000FDF                      fsr2l 000FD9  
                    start 0000           __end_of_MSdelay 1CF0             __CFG_IESO$OFF 000000  
           __CFG_MCLRE$ON 000000              ___ftmul@cntr 002F        __size_of_LCD_print 0072  
            ___param_bank 000000              ___ftmul@sign 0030            ?_USART_newline 0001  
            ___fttol@exp1 004E      __end_of_EEPROM_Write 1DDC              ___fttol@lval 004A  
        __end_of_LCD_Char 1D60                     ??_txr 0006          __end_of_LCD_Init 1D94  
           __CFG_PLLDIV$5 000000            __CFG_CCP2MX$ON 000000           __end_of___aldiv 17F2  
         __end_of___almod 194C                     ?_main 0001                     ?_init 0001  
                   _EEADR 000FA9           __end_of___ftadd 11F8                     STR_10 0801  
                   STR_11 0817                     STR_12 083A                     STR_13 083A  
                   STR_14 0865           __end_of___ftdiv 1726                     _CMCON 000FB4  
         __end_of___ftneg 1E00           __end_of___ftmul 1640           __end_of___fttol 154C  
                   _LATD0 007C60                     _LATD2 007C62                     _RCSTA 000FAB  
                   _SPBRG 000FAF             __CFG_USBDIV$2 000000                     _TRISA 000F92  
                   _TRISB 000F93                     _TXREG 000FAD                     _TXSTA 000FAC  
           __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000  
           __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000  
          __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000  
          __CFG_EBTR3$OFF 000000             __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000  
           __CFG_WRTD$OFF 000000                     _calib 0096            __CFG_EBTRB$OFF 000000  
           ___awtoft@sign 000C                     _charr 00B2                     _delay 1D94  
                   _count 006A             ___ftpack@sign 0005                     tablat 000FF5  
__size_of_EEPROMWritelong 005E                     status 000FD8            __CFG_ICPRT$OFF 000000  
        EEPROM_Write@data 0003      __size_of_EEPROM_Read 000E               ?_USART_Init 004F  
         __initialization 1E00              __end_of_main 104C              __end_of_init 1BFC  
           calibrate@buff 003B                    ??_main 0054             ___fttol@sign1 0049  
                  ??_init 0054         __end_of_LCD_Clear 1E4A             __activetblptr 000002  
        calibrate@address 004D         __end_of_LCD_print 1B98                    ?_delay 0001  
                  _ADCON1 000FC1          __end_of___altoft 1A42                    _EEDATA 000FA8  
                  _EECON2 000FA7          __end_of___awtoft 1D28          __end_of___ftpack 18A0  
                  _CVRCON 000FB5                 ??_MSdelay 0003              ?_send_string 0007  
                  _OSCCON 000FD3                    _TRISA0 007C90                    _TRISD0 007CA8  
      __size_of_ReadCount 007E                    _TRISD2 007CAA            send_string@str 0007  
          __CFG_XINST$OFF 000000           ??_USART_newline 0007                 ??___aldiv 0009  
               ??___almod 0009                 ??___ftadd 003A            __CFG_STVREN$ON 000000  
               ??___ftdiv 0019                 ??___ftneg 0034                 ??___ftmul 0028  
               ??___fttol 0044                    _gainst 00BC                    delay@d 0001  
                  delay@i 0004                    clear_0 1E06                    _sample 006E  
 calibrate@temp_val_local 0045                    _tx_buf 0060      __size_of_LCD_Command 005C  
   ___ftmul@f3_as_product 002C            _EEPROMReadlong 132E              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
     __size_of_USART_Init 0072                 ?_LCD_Char 0001                __accesstop 0060  
 __end_of__initialization 1E14                ___altoft@c 0009                 ?_LCD_Init 0001  
         __CFG_PBADEN$OFF 000000                ___ftadd@f1 0034                ___ftadd@f2 0037  
           ___rparam_used 000001                ___ftdiv@f1 0013                ___ftdiv@f2 0016  
              ___ftdiv@f3 001D                ___ftneg@f1 0031      EEPROMWritelong@value 0006  
    EEPROMWritelong@three 000B     __size_of_EEPROM_Write 0024                ___awtoft@c 0009  
              ___ftmul@f1 0022                ___ftmul@f2 0025         ??_EEPROMWritelong 000A  
              ___fttol@f1 0040            __pcstackCOMRAM 0001        __size_of_calibrate 0420  
           __end_of_delay 1DB8    __end_of_EEPROMReadlong 1458            calibrate@i_424 004B  
       __end_of_ReadCount 19CA                   ??_delay 0003              LCD_print@str 0008  
            _EEPROM_Write 1DB8                __pbssBANK0 0060                ??_LCD_Char 0007  
              ??_LCD_Init 000A     EEPROMReadlong@address 0003                   _CCP1CON 000FBD  
                 _CCP2CON 000FBA                 ?___altoft 0009                 ?___awtoft 0009  
               ?___ftpack 0001           ?_EEPROMReadlong 0003         __end_of_calibrate 0CBC  
                 _MSdelay 1CB6           __CFG_VREGEN$OFF 000000      __size_of_send_string 0072  
              calibrate@i 0049              ??_USART_Init 0051                   __Hparam 0000  
     LCD_print@sndstr_cnt 000C                   __Lparam 0000                _intToAscci 11F8  
                 ___aldiv 1726                   ___almod 18A0                   ___ftadd 104C  
                 ___ftdiv 1640                   ___ftneg 1DDC                   ___ftmul 154C  
                 ___fttol 1458                   _adc_val 0072              __psmallconst 0800  
              ??___altoft 000D                   __pcinit 1E00                ??___awtoft 000C  
              ??___ftpack 0006                   __ramtop 0800                   __ptext0 0CBC  
                 __ptext1 1B98                   __ptext2 1A42                   __ptext3 1458  
                 __ptext4 104C                   __ptext5 1CF0                   __ptext6 1D60  
                 __ptext7 089C                   __ptext8 1AB4                   __ptext9 11F8  
                 _constt3 008A            USART_Init@temp 0051              __size_of_txr 0018  
                 _hundred 007E          ___aldiv@dividend 0001                 _LCD_Clear 1E36  
                 _rezult2 0092                   _rezult3 008E        __end_of_USART_Init 1AB4  
                 main@cnt 00D3      end_of_initialization 1E14                 _LCD_print 1B26  
           ??_EEPROM_Read 0003            LCD_Command@cmd 0009             __Lmediumconst 0000  
        ___aldiv@quotient 000B                   postinc0 000FEE     send_string@sndstr_cnt 000B  
                 txr@temp 0006                 _PORTAbits 000F80                 _PORTBbits 000F81  
               _TRISAbits 000F92                 _TRISBbits 000F93                 _TRISCbits 000F94  
              ?_LCD_Clear 0001           _EEPROMWritelong 1BFC       USART_Init@baud_rate 004F  
              ?_LCD_print 0008               ___ftdiv@exp 0020                 _TXSTAbits 000FAC  
       __size_of_LCD_Char 0038         __size_of_LCD_Init 0034                main@weight 00DF  
             ?_intToAscci 000F               ___ftmul@exp 002B       __end_of_EEPROM_Read 1E66  
   __end_of_USART_newline 1E58             ??_LCD_Command 0007       start_initialization 1E00  
               _ReadCount 194C               __end_of_txr 1E36       EEPROMReadlong@three 0027  
        ??_EEPROMReadlong 0007          __CFG_LPT1OSC$OFF 000000         __size_of___altoft 0078  
       __size_of___awtoft 0038         __size_of___ftpack 00AE       __end_of_LCD_Command 1CB6  
 __end_of_EEPROMWritelong 1C5A               __pbssCOMRAM 005C       EEPROMWritelong@four 000A  
           __pcstackBANK0 00D3                ?_ReadCount 0001               ??_LCD_Clear 000A  
     __size_of_intToAscci 0136                  ?_MSdelay 0001               ??_LCD_print 000A  
               _calibrate 089C               _EEPROM_Read 1E58       intToAscci@tempCount 0017  
               __pnvBANK0 00E5                  ?___aldiv 0001                  ?___almod 0001  
                ?___ftadd 0034                  ?___ftdiv 0013                  ?___ftneg 0031  
                ?___ftmul 0022                  ?___fttol 0040             intToAscci@rem 0015  
           intToAscci@num 000F             intToAscci@str 0013          ___almod@dividend 0001  
             __smallconst 0800            __size_of_delay 0024             ??_send_string 0009  
                MSdelay@i 0003                  MSdelay@j 0005           ___aldiv@divisor 0005  
                _LCD_Char 1D28           ___aldiv@counter 0009                  _LCD_Init 1D60  
              ?_calibrate 0001                  _LATAbits 000F89                  _PIR2bits 000FA1  
        __CFG_WDTPS$32768 000000               _LCD_Command 1C5A          ?_EEPROMWritelong 0004  
             ??_ReadCount 0005          __size_of_MSdelay 003A                _EECON1bits 000FA6  
      EEPROMReadlong@four 0023                  __Hrparam 0000       __end_of_send_string 1B26  
            ??_intToAscci 0015                  __Lrparam 0000          __size_of___aldiv 00CC  
        __size_of___almod 00AC          __size_of___ftadd 01AC          __size_of___ftdiv 00E6  
        __size_of___ftneg 0024                  ___altoft 19CA          __size_of___ftmul 00F4  
        __size_of___fttol 00F4        EEPROMWritelong@one 000D                  ___awtoft 1CF0  
      EEPROMWritelong@two 000C                  ___ftpack 17F2        intToAscci@temp_num 0019  
                __ptext10 18A0                  __ptext11 1726                  __ptext20 1E36  
                __ptext12 1640                  __ptext21 1C5A                  __ptext13 19CA  
                __ptext22 1CB6                  __ptext14 1E4A                  __ptext23 1BFC  
                __ptext15 1E1E                  __ptext24 1DB8                  __ptext16 1D94  
                __ptext25 132E                  __ptext17 194C                  __ptext26 1E58  
                __ptext18 1B26                  __ptext27 1DDC                  __ptext19 1D28  
                __ptext28 154C                  __ptext29 17F2        __end_of_intToAscci 132E  
           ?_EEPROM_Write 0001           ___almod@divisor 0005            ReadCount@Count 0006  
         ___almod@counter 0009               ??_calibrate 0033             __size_of_main 0390  
           __size_of_init 0064                MSdelay@val 0001                  _temp_val 00CF  
                _thousand 0082                  main@buff 00D5     __CFG_CPUDIV$OSC1_PLL2 000000  
              _INTCONbits 000FF2         EEPROMReadlong@one 002F         EEPROMReadlong@two 002B  
         LCD_Command@data 0008         intToAscci@counter 001D            ??_EEPROM_Write 0004  
  __size_of_USART_newline 000E               _send_string 1AB4              ?_EEPROM_Read 0001  
      EEPROM_Read@address 0001              ___aldiv@sign 000A        __CFG_FOSC$HSPLL_HS 000000  
            ___almod@sign 000A                _USART_Init 1A42       EEPROM_Write@address 0001  
