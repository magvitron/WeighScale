

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jul 29 16:34:41 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4550 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	idataBANK0
    74  00184A                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _lsb
    78  00184A  12                 	db	18
    79  00184B  83                 	db	131
    80  00184C  3A                 	db	58
    81                           
    82                           ;initializer for _gain
    83  00184D  01                 	db	1
    84                           
    85                           	psect	nvBANK0
    86  0000E4                     __pnvBANK0:
    87                           	opt stack 0
    88  0000E4                     _page:
    89                           	opt stack 0
    90  0000E4                     	ds	1
    91  0000                     _PIR2bits	set	4001
    92  0000                     _EECON2	set	4007
    93  0000                     _INTCONbits	set	4082
    94  0000                     _EECON1bits	set	4006
    95  0000                     _EEDATA	set	4008
    96  0000                     _EEADR	set	4009
    97  0000                     _TXREG	set	4013
    98  0000                     _TXSTAbits	set	4012
    99  0000                     _RCSTA	set	4011
   100  0000                     _TXSTA	set	4012
   101  0000                     _SPBRG	set	4015
   102  0000                     _TRISCbits	set	3988
   103  0000                     _LATA	set	3977
   104  0000                     _TRISA	set	3986
   105  0000                     _TRISBbits	set	3987
   106  0000                     _CCP2CON	set	4026
   107  0000                     _CCP1CON	set	4029
   108  0000                     _UCON	set	3949
   109  0000                     _CVRCON	set	4021
   110  0000                     _CMCON	set	4020
   111  0000                     _ADCON1	set	4033
   112  0000                     _PORTAbits	set	3968
   113  0000                     _LATAbits	set	3977
   114  0000                     _TRISAbits	set	3986
   115  0000                     _PORTBbits	set	3969
   116  0000                     _OSCCON	set	4051
   117  0000                     _TRISB	set	3987
   118  0000                     _LATD2	set	31842
   119  0000                     _LATD0	set	31840
   120  0000                     _TRISD2	set	31914
   121  0000                     _TRISD0	set	31912
   122  0000                     _TRISA0	set	31888
   123                           
   124                           	psect	smallconst
   125  000800                     __psmallconst:
   126                           	opt stack 0
   127  000800  00                 	db	0
   128  000801                     STR_5:
   129  000801  50                 	db	80	;'P'
   130  000802  75                 	db	117	;'u'
   131  000803  74                 	db	116	;'t'
   132  000804  20                 	db	32
   133  000805  74                 	db	116	;'t'
   134  000806  68                 	db	104	;'h'
   135  000807  65                 	db	101	;'e'
   136  000808  20                 	db	32
   137  000809  77                 	db	119	;'w'
   138  00080A  65                 	db	101	;'e'
   139  00080B  69                 	db	105	;'i'
   140  00080C  67                 	db	103	;'g'
   141  00080D  68                 	db	104	;'h'
   142  00080E  74                 	db	116	;'t'
   143  00080F  20                 	db	32
   144  000810  26                 	db	38
   145  000811  20                 	db	32
   146  000812  77                 	db	119	;'w'
   147  000813  61                 	db	97	;'a'
   148  000814  69                 	db	105	;'i'
   149  000815  74                 	db	116	;'t'
   150  000816  00                 	db	0
   151  000817                     STR_6:
   152  000817  52                 	db	82	;'R'
   153  000818  65                 	db	101	;'e'
   154  000819  2D                 	db	45
   155  00081A  63                 	db	99	;'c'
   156  00081B  61                 	db	97	;'a'
   157  00081C  6C                 	db	108	;'l'
   158  00081D  69                 	db	105	;'i'
   159  00081E  62                 	db	98	;'b'
   160  00081F  65                 	db	101	;'e'
   161  000820  72                 	db	114	;'r'
   162  000821  61                 	db	97	;'a'
   163  000822  74                 	db	116	;'t'
   164  000823  69                 	db	105	;'i'
   165  000824  6E                 	db	110	;'n'
   166  000825  67                 	db	103	;'g'
   167  000826  2E                 	db	46
   168  000827  2E                 	db	46
   169  000828  00                 	db	0
   170  000829                     STR_4:
   171  000829  43                 	db	67	;'C'
   172  00082A  61                 	db	97	;'a'
   173  00082B  6C                 	db	108	;'l'
   174  00082C  69                 	db	105	;'i'
   175  00082D  62                 	db	98	;'b'
   176  00082E  72                 	db	114	;'r'
   177  00082F  61                 	db	97	;'a'
   178  000830  74                 	db	116	;'t'
   179  000831  69                 	db	105	;'i'
   180  000832  6E                 	db	110	;'n'
   181  000833  67                 	db	103	;'g'
   182  000834  2E                 	db	46
   183  000835  2E                 	db	46
   184  000836  2E                 	db	46
   185  000837  00                 	db	0
   186  000838                     STR_2:
   187  000838  4A                 	db	74	;'J'
   188  000839  75                 	db	117	;'u'
   189  00083A  6C                 	db	108	;'l'
   190  00083B  20                 	db	32
   191  00083C  32                 	db	50	;'2'
   192  00083D  39                 	db	57	;'9'
   193  00083E  20                 	db	32
   194  00083F  32                 	db	50	;'2'
   195  000840  30                 	db	48	;'0'
   196  000841  31                 	db	49	;'1'
   197  000842  38                 	db	56	;'8'
   198  000843  00                 	db	0
   199  000844  49                 	db	73	;'I'
   200  000845  32                 	db	50	;'2'
   201  000846  43                 	db	67	;'C'
   202  000847  20                 	db	32
   203  000848  72                 	db	114	;'r'
   204  000849  65                 	db	101	;'e'
   205  00084A  61                 	db	97	;'a'
   206  00084B  64                 	db	100	;'d'
   207  00084C  3A                 	db	58	;':'
   208  00084D  00                 	db	0
   209  00084E                     STR_1:
   210  00084E  31                 	db	49	;'1'
   211  00084F  36                 	db	54	;'6'
   212  000850  3A                 	db	58	;':'
   213  000851  33                 	db	51	;'3'
   214  000852  34                 	db	52	;'4'
   215  000853  3A                 	db	58	;':'
   216  000854  33                 	db	51	;'3'
   217  000855  37                 	db	55	;'7'
   218  000856  00                 	db	0
   219  000857                     STR_3:
   220  000857  20                 	db	32
   221  000858  20                 	db	32
   222  000859  67                 	db	103	;'g'
   223  00085A  6D                 	db	109	;'m'
   224  00085B  00                 	db	0
   225                           
   226                           ; #config settings
   227  00085C  00                 	db	0	; dummy byte at the end
   228  0000                     
   229                           	psect	cinit
   230  00172C                     __pcinit:
   231                           	opt stack 0
   232  00172C                     start_initialization:
   233                           	opt stack 0
   234  00172C                     __initialization:
   235                           	opt stack 0
   236                           
   237                           ; Initialize objects allocated to BANK0 (4 bytes)
   238                           ; load TBLPTR registers with __pidataBANK0
   239  00172C  0E4A               	movlw	low __pidataBANK0
   240  00172E  6EF6               	movwf	tblptrl,c
   241  001730  0E18               	movlw	high __pidataBANK0
   242  001732  6EF7               	movwf	tblptrh,c
   243  001734  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   244  001736  6EF8               	movwf	tblptru,c
   245  001738  EE00  F0E0         	lfsr	0,__pdataBANK0
   246  00173C  EE10 F004          	lfsr	1,4
   247  001740                     copy_data0:
   248  001740  0009               	tblrd		*+
   249  001742  CFF5 FFEE          	movff	tablat,postinc0
   250  001746  50E5               	movf	postdec1,w,c
   251  001748  50E1               	movf	fsr1l,w,c
   252  00174A  E1FA               	bnz	copy_data0
   253                           
   254                           ; Clear objects allocated to BANK0 (114 bytes)
   255  00174C  EE00  F060         	lfsr	0,__pbssBANK0
   256  001750  0E72               	movlw	114
   257  001752                     clear_0:
   258  001752  6AEE               	clrf	postinc0,c
   259  001754  06E8               	decf	wreg,f,c
   260  001756  E1FD               	bnz	clear_0
   261                           
   262                           ; Clear objects allocated to COMRAM (4 bytes)
   263  001758  6A5F               	clrf	(__pbssCOMRAM+3)& (0+255),c
   264  00175A  6A5E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   265  00175C  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   266  00175E  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   267  001760                     end_of_initialization:
   268                           	opt stack 0
   269  001760                     __end_of__initialization:
   270                           	opt stack 0
   271  001760  0E00               	movlw	low (__Lmediumconst shr (0+16))
   272  001762  6EF8               	movwf	tblptru,c
   273  001764  0100               	movlb	0
   274  001766  EF85  F005         	goto	_main	;jump to C main() function
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           postdec1	equ	0xFE5
   282                           fsr1l	equ	0xFE1
   283                           
   284                           	psect	bssCOMRAM
   285  00005C                     __pbssCOMRAM:
   286                           	opt stack 0
   287  00005C                     _configuration:
   288                           	opt stack 0
   289  00005C                     	ds	1
   290  00005D                     _b2:
   291                           	opt stack 0
   292  00005D                     	ds	1
   293  00005E                     _b1:
   294                           	opt stack 0
   295  00005E                     	ds	1
   296  00005F                     _deviceAddressWrite:
   297                           	opt stack 0
   298  00005F                     	ds	1
   299                           tblptru	equ	0xFF8
   300                           tblptrh	equ	0xFF7
   301                           tblptrl	equ	0xFF6
   302                           tablat	equ	0xFF5
   303                           postinc0	equ	0xFEE
   304                           wreg	equ	0xFE8
   305                           postdec1	equ	0xFE5
   306                           fsr1l	equ	0xFE1
   307                           
   308                           	psect	bssBANK0
   309  000060                     __pbssBANK0:
   310                           	opt stack 0
   311  000060                     _tx_buf:
   312                           	opt stack 0
   313  000060                     	ds	10
   314  00006A                     _count:
   315                           	opt stack 0
   316  00006A                     	ds	4
   317  00006E                     _sample:
   318                           	opt stack 0
   319  00006E                     	ds	4
   320  000072                     _adc_val:
   321                           	opt stack 0
   322  000072                     	ds	4
   323  000076                     _ones:
   324                           	opt stack 0
   325  000076                     	ds	4
   326  00007A                     _ten:
   327                           	opt stack 0
   328  00007A                     	ds	4
   329  00007E                     _hundred:
   330                           	opt stack 0
   331  00007E                     	ds	4
   332  000082                     _thousand:
   333                           	opt stack 0
   334  000082                     	ds	4
   335  000086                     _i:
   336                           	opt stack 0
   337  000086                     	ds	4
   338  00008A                     _constt3:
   339                           	opt stack 0
   340  00008A                     	ds	4
   341  00008E                     _rezult3:
   342                           	opt stack 0
   343  00008E                     	ds	4
   344  000092                     _rezult2:
   345                           	opt stack 0
   346  000092                     	ds	4
   347  000096                     _calib:
   348                           	opt stack 0
   349  000096                     	ds	4
   350  00009A                     _rezz:
   351                           	opt stack 0
   352  00009A                     	ds	4
   353  00009E                     _rez:
   354                           	opt stack 0
   355  00009E                     	ds	4
   356  0000A2                     _rez4:
   357                           	opt stack 0
   358  0000A2                     	ds	4
   359  0000A6                     _rez3:
   360                           	opt stack 0
   361  0000A6                     	ds	4
   362  0000AA                     _rez2:
   363                           	opt stack 0
   364  0000AA                     	ds	4
   365  0000AE                     _rez1:
   366                           	opt stack 0
   367  0000AE                     	ds	4
   368  0000B2                     _charr:
   369                           	opt stack 0
   370  0000B2                     	ds	4
   371  0000B6                     _val:
   372                           	opt stack 0
   373  0000B6                     	ds	3
   374  0000B9                     _adc:
   375                           	opt stack 0
   376  0000B9                     	ds	1
   377  0000BA                     _cci:
   378                           	opt stack 0
   379  0000BA                     	ds	1
   380  0000BB                     _cct:
   381                           	opt stack 0
   382  0000BB                     	ds	1
   383  0000BC                     _gainst:
   384                           	opt stack 0
   385  0000BC                     	ds	1
   386  0000BD                     _ack2:
   387                           	opt stack 0
   388  0000BD                     	ds	1
   389  0000BE                     _ack1:
   390                           	opt stack 0
   391  0000BE                     	ds	1
   392  0000BF                     _rdy:
   393                           	opt stack 0
   394  0000BF                     	ds	1
   395  0000C0                     _b17:
   396                           	opt stack 0
   397  0000C0                     	ds	1
   398  0000C1                     _b16:
   399                           	opt stack 0
   400  0000C1                     	ds	1
   401  0000C2                     _b15:
   402                           	opt stack 0
   403  0000C2                     	ds	1
   404  0000C3                     _b14:
   405                           	opt stack 0
   406  0000C3                     	ds	1
   407  0000C4                     _b13:
   408                           	opt stack 0
   409  0000C4                     	ds	1
   410  0000C5                     _b12:
   411                           	opt stack 0
   412  0000C5                     	ds	1
   413  0000C6                     _b11:
   414                           	opt stack 0
   415  0000C6                     	ds	1
   416  0000C7                     _b10:
   417                           	opt stack 0
   418  0000C7                     	ds	1
   419  0000C8                     _b9:
   420                           	opt stack 0
   421  0000C8                     	ds	1
   422  0000C9                     _b8:
   423                           	opt stack 0
   424  0000C9                     	ds	1
   425  0000CA                     _b7:
   426                           	opt stack 0
   427  0000CA                     	ds	1
   428  0000CB                     _b6:
   429                           	opt stack 0
   430  0000CB                     	ds	1
   431  0000CC                     _b5:
   432                           	opt stack 0
   433  0000CC                     	ds	1
   434  0000CD                     _b4:
   435                           	opt stack 0
   436  0000CD                     	ds	1
   437  0000CE                     _b3:
   438                           	opt stack 0
   439  0000CE                     	ds	1
   440  0000CF                     _b0:
   441                           	opt stack 0
   442  0000CF                     	ds	1
   443  0000D0                     _b:
   444                           	opt stack 0
   445  0000D0                     	ds	1
   446  0000D1                     _deviceAddressRead:
   447                           	opt stack 0
   448  0000D1                     	ds	1
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           postdec1	equ	0xFE5
   456                           fsr1l	equ	0xFE1
   457                           
   458                           	psect	dataBANK0
   459  0000E0                     __pdataBANK0:
   460                           	opt stack 0
   461  0000E0                     _lsb:
   462                           	opt stack 0
   463  0000E0                     	ds	3
   464  0000E3                     _gain:
   465                           	opt stack 0
   466  0000E3                     	ds	1
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	cstackBANK0
   477  0000D2                     __pcstackBANK0:
   478                           	opt stack 0
   479  0000D2                     main@buff:
   480                           	opt stack 0
   481                           
   482                           ; 10 bytes @ 0x0
   483  0000D2                     	ds	10
   484  0000DC                     main@cnt:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0xA
   488  0000DC                     	ds	2
   489  0000DE                     main@weight:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0xC
   493  0000DE                     	ds	2
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1l	equ	0xFE1
   502                           
   503                           	psect	cstackCOMRAM
   504  000001                     __pcstackCOMRAM:
   505                           	opt stack 0
   506  000001                     ?___ftpack:
   507                           	opt stack 0
   508  000001                     ?_ReadCount:
   509                           	opt stack 0
   510  000001                     ?___aldiv:
   511                           	opt stack 0
   512  000001                     ?___almod:
   513                           	opt stack 0
   514  000001                     MSdelay@val:
   515                           	opt stack 0
   516  000001                     delay@d:
   517                           	opt stack 0
   518  000001                     ___ftpack@arg:
   519                           	opt stack 0
   520  000001                     ___aldiv@dividend:
   521                           	opt stack 0
   522  000001                     ___almod@dividend:
   523                           	opt stack 0
   524                           
   525                           ; 4 bytes @ 0x0
   526  000001                     	ds	2
   527  000003                     ??_delay:
   528  000003                     MSdelay@i:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x2
   532  000003                     	ds	1
   533  000004                     ___ftpack@exp:
   534                           	opt stack 0
   535  000004                     delay@i:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x3
   539  000004                     	ds	1
   540  000005                     ReadCount@i:
   541                           	opt stack 0
   542  000005                     ___ftpack@sign:
   543                           	opt stack 0
   544  000005                     MSdelay@j:
   545                           	opt stack 0
   546  000005                     ___aldiv@divisor:
   547                           	opt stack 0
   548  000005                     ___almod@divisor:
   549                           	opt stack 0
   550                           
   551                           ; 4 bytes @ 0x4
   552  000005                     	ds	1
   553  000006                     ??___ftpack:
   554  000006                     txr@temp:
   555                           	opt stack 0
   556  000006                     ReadCount@Count:
   557                           	opt stack 0
   558                           
   559                           ; 4 bytes @ 0x5
   560  000006                     	ds	1
   561  000007                     send_string@str:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x6
   565  000007                     	ds	2
   566  000009                     ??_send_string:
   567  000009                     ?___altoft:
   568                           	opt stack 0
   569  000009                     ?___awtoft:
   570                           	opt stack 0
   571  000009                     ___aldiv@counter:
   572                           	opt stack 0
   573  000009                     ___almod@counter:
   574                           	opt stack 0
   575  000009                     ___awtoft@c:
   576                           	opt stack 0
   577  000009                     ___altoft@c:
   578                           	opt stack 0
   579                           
   580                           ; 4 bytes @ 0x8
   581  000009                     	ds	1
   582  00000A                     ___aldiv@sign:
   583                           	opt stack 0
   584  00000A                     ___almod@sign:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x9
   588  00000A                     	ds	1
   589  00000B                     send_string@sndstr_cnt:
   590                           	opt stack 0
   591  00000B                     ___aldiv@quotient:
   592                           	opt stack 0
   593                           
   594                           ; 4 bytes @ 0xA
   595  00000B                     	ds	1
   596  00000C                     ___awtoft@sign:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0xB
   600  00000C                     	ds	1
   601  00000D                     ??___altoft:
   602                           
   603                           ; 1 bytes @ 0xC
   604  00000D                     	ds	2
   605  00000F                     intToAscci@num:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0xE
   609  00000F                     	ds	2
   610  000011                     ___altoft@exp:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x10
   614  000011                     	ds	1
   615  000012                     ___altoft@sign:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x11
   619  000012                     	ds	1
   620  000013                     ?___ftdiv:
   621                           	opt stack 0
   622  000013                     intToAscci@str:
   623                           	opt stack 0
   624  000013                     ___ftdiv@f1:
   625                           	opt stack 0
   626                           
   627                           ; 3 bytes @ 0x12
   628  000013                     	ds	2
   629  000015                     intToAscci@rem:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x14
   633  000015                     	ds	1
   634  000016                     ___ftdiv@f2:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x15
   638  000016                     	ds	1
   639  000017                     intToAscci@tempCount:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x16
   643  000017                     	ds	2
   644  000019                     ??___ftdiv:
   645  000019                     intToAscci@temp_num:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0x18
   649  000019                     	ds	3
   650  00001C                     ___ftdiv@cntr:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x1B
   654  00001C                     	ds	1
   655  00001D                     intToAscci@counter:
   656                           	opt stack 0
   657  00001D                     ___ftdiv@f3:
   658                           	opt stack 0
   659                           
   660                           ; 3 bytes @ 0x1C
   661  00001D                     	ds	3
   662  000020                     ___ftdiv@exp:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x1F
   666  000020                     	ds	1
   667  000021                     ___ftdiv@sign:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x20
   671  000021                     	ds	1
   672  000022                     ?___ftmul:
   673                           	opt stack 0
   674  000022                     ___ftmul@f1:
   675                           	opt stack 0
   676                           
   677                           ; 3 bytes @ 0x21
   678  000022                     	ds	3
   679  000025                     ___ftmul@f2:
   680                           	opt stack 0
   681                           
   682                           ; 3 bytes @ 0x24
   683  000025                     	ds	3
   684  000028                     ??___ftmul:
   685                           
   686                           ; 1 bytes @ 0x27
   687  000028                     	ds	3
   688  00002B                     ___ftmul@exp:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x2A
   692  00002B                     	ds	1
   693  00002C                     ___ftmul@f3_as_product:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x2B
   697  00002C                     	ds	3
   698  00002F                     ___ftmul@cntr:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x2E
   702  00002F                     	ds	1
   703  000030                     ___ftmul@sign:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x2F
   707  000030                     	ds	1
   708  000031                     ?___ftneg:
   709                           	opt stack 0
   710  000031                     ___ftneg@f1:
   711                           	opt stack 0
   712                           
   713                           ; 3 bytes @ 0x30
   714  000031                     	ds	3
   715  000034                     ?___ftadd:
   716                           	opt stack 0
   717  000034                     ___ftadd@f1:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x33
   721  000034                     	ds	3
   722  000037                     ___ftadd@f2:
   723                           	opt stack 0
   724                           
   725                           ; 3 bytes @ 0x36
   726  000037                     	ds	3
   727  00003A                     ??___ftadd:
   728                           
   729                           ; 1 bytes @ 0x39
   730  00003A                     	ds	3
   731  00003D                     ___ftadd@sign:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x3C
   735  00003D                     	ds	1
   736  00003E                     ___ftadd@exp2:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x3D
   740  00003E                     	ds	1
   741  00003F                     ___ftadd@exp1:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x3E
   745  00003F                     	ds	1
   746  000040                     ??_calibrate:
   747  000040                     ?___fttol:
   748                           	opt stack 0
   749  000040                     ___fttol@f1:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0x3F
   753  000040                     	ds	4
   754  000044                     ??___fttol:
   755  000044                     calibrate@buff:
   756                           	opt stack 0
   757                           
   758                           ; 10 bytes @ 0x43
   759  000044                     	ds	5
   760  000049                     ___fttol@sign1:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x48
   764  000049                     	ds	1
   765  00004A                     ___fttol@lval:
   766                           	opt stack 0
   767                           
   768                           ; 4 bytes @ 0x49
   769  00004A                     	ds	4
   770  00004E                     ___fttol@exp1:
   771                           	opt stack 0
   772  00004E                     calibrate@i:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x4D
   776  00004E                     	ds	1
   777  00004F                     USART_Init@baud_rate:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x4E
   781  00004F                     	ds	1
   782  000050                     calibrate@i_390:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x4F
   786  000050                     	ds	1
   787  000051                     USART_Init@temp:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x50
   791  000051                     	ds	3
   792  000054                     ??_main:
   793                           
   794                           ; 1 bytes @ 0x53
   795  000054                     	ds	8
   796                           tblptru	equ	0xFF8
   797                           tblptrh	equ	0xFF7
   798                           tblptrl	equ	0xFF6
   799                           tablat	equ	0xFF5
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           postdec1	equ	0xFE5
   803                           fsr1l	equ	0xFE1
   804                           
   805 ;;
   806 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   807 ;;
   808 ;; *************** function _main *****************
   809 ;; Defined at:
   810 ;;		line 149 in file "newmain.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;  buff           10    0[BANK0 ] unsigned char [10]
   815 ;;  buff1          10    0        unsigned char [10]
   816 ;;  weight          2   12[BANK0 ] int 
   817 ;;  cnt             2   10[BANK0 ] int 
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   827 ;;      Params:         0       0       0       0       0       0       0       0       0
   828 ;;      Locals:         0      14       0       0       0       0       0       0       0
   829 ;;      Temps:          8       0       0       0       0       0       0       0       0
   830 ;;      Totals:         8      14       0       0       0       0       0       0       0
   831 ;;Total ram usage:       22 bytes
   832 ;; Hardware stack levels required when called:    4
   833 ;; This function calls:
   834 ;;		_MSdelay
   835 ;;		_ReadCount
   836 ;;		_USART_Init
   837 ;;		_USART_newline
   838 ;;		___altoft
   839 ;;		___ftadd
   840 ;;		___ftdiv
   841 ;;		___ftmul
   842 ;;		___ftneg
   843 ;;		___fttol
   844 ;;		_calibrate
   845 ;;		_init
   846 ;;		_intToAscci
   847 ;;		_send_string
   848 ;; This function is called by:
   849 ;;		Startup code after reset
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           	psect	text0
   854  000B0A                     __ptext0:
   855                           	opt stack 0
   856  000B0A                     _main:
   857                           	opt stack 27
   858                           
   859                           ;newmain.c: 150: char buff[10];
   860                           ;newmain.c: 151: int weight = 0;
   861                           
   862                           ;incstack = 0
   863  000B0A  0E00               	movlw	0
   864  000B0C  0100               	movlb	0	; () banked
   865  000B0E  6FDF               	movwf	(main@weight+1)& (0+255),b
   866  000B10  0E00               	movlw	0
   867  000B12  6FDE               	movwf	main@weight& (0+255),b
   868                           
   869                           ;newmain.c: 152: TRISB = 0;
   870  000B14  0E00               	movlw	0
   871  000B16  6E93               	movwf	3987,c	;volatile
   872                           
   873                           ;newmain.c: 153: OSCCON = 0x72;
   874  000B18  0E72               	movlw	114
   875  000B1A  6ED3               	movwf	4051,c	;volatile
   876                           
   877                           ; BSR set to: 0
   878                           ;newmain.c: 154: init();
   879  000B1C  EC68  F00B         	call	_init	;wreg free
   880                           
   881                           ;newmain.c: 155: MSdelay(3);
   882  000B20  0E00               	movlw	0
   883  000B22  6E02               	movwf	MSdelay@val+1,c
   884  000B24  0E03               	movlw	3
   885  000B26  6E01               	movwf	MSdelay@val,c
   886  000B28  ECB5  F00B         	call	_MSdelay	;wreg free
   887                           
   888                           ;newmain.c: 156: USART_Init(9600);
   889  000B2C  0E25               	movlw	37
   890  000B2E  6E50               	movwf	USART_Init@baud_rate+1,c
   891  000B30  0E80               	movlw	128
   892  000B32  6E4F               	movwf	USART_Init@baud_rate,c
   893  000B34  ECF6  F00A         	call	_USART_Init	;wreg free
   894                           
   895                           ;newmain.c: 157: USART_newline();
   896  000B38  EC1E  F00C         	call	_USART_newline	;wreg free
   897                           
   898                           ;newmain.c: 158: send_string("16:34:37");
   899  000B3C  0E4E               	movlw	low STR_1
   900  000B3E  6E07               	movwf	send_string@str,c
   901  000B40  0E08               	movlw	high STR_1
   902  000B42  6E08               	movwf	send_string@str+1,c
   903  000B44  EC2F  F00B         	call	_send_string	;wreg free
   904                           
   905                           ;newmain.c: 159: USART_newline();
   906  000B48  EC1E  F00C         	call	_USART_newline	;wreg free
   907                           
   908                           ;newmain.c: 160: send_string ("Jul 29 2018");
   909  000B4C  0E38               	movlw	low STR_2
   910  000B4E  6E07               	movwf	send_string@str,c
   911  000B50  0E08               	movlw	high STR_2
   912  000B52  6E08               	movwf	send_string@str+1,c
   913  000B54  EC2F  F00B         	call	_send_string	;wreg free
   914                           
   915                           ;newmain.c: 161: USART_newline();
   916  000B58  EC1E  F00C         	call	_USART_newline	;wreg free
   917                           
   918                           ;newmain.c: 162: int cnt = 0;
   919  000B5C  0E00               	movlw	0
   920  000B5E  0100               	movlb	0	; () banked
   921  000B60  6FDD               	movwf	(main@cnt+1)& (0+255),b
   922  000B62  0E00               	movlw	0
   923  000B64  6FDC               	movwf	main@cnt& (0+255),b
   924                           
   925                           ; BSR set to: 0
   926                           ;newmain.c: 163: char buff1[10];
   927                           ;newmain.c: 164: USART_newline();
   928  000B66  EC1E  F00C         	call	_USART_newline	;wreg free
   929                           
   930                           ;newmain.c: 165: calibrate();
   931  000B6A  EC2F  F004         	call	_calibrate	;wreg free
   932  000B6E                     
   933                           ;newmain.c: 168: {
   934                           ;newmain.c: 169: if (PORTBbits.RB0 == 0)
   935  000B6E  B081               	btfsc	3969,0,c	;volatile
   936  000B70  D01D               	goto	l152
   937                           
   938                           ;newmain.c: 170: {
   939                           ;newmain.c: 171: val = 0;
   940  000B72  0E00               	movlw	0
   941  000B74  0100               	movlb	0	; () banked
   942  000B76  6FB6               	movwf	_val& (0+255),b
   943  000B78  0E00               	movlw	0
   944  000B7A  6FB7               	movwf	(_val+1)& (0+255),b
   945  000B7C  0E00               	movlw	0
   946  000B7E  6FB8               	movwf	(_val+2)& (0+255),b
   947                           
   948                           ;newmain.c: 172: sample = 0;
   949  000B80  0E00               	movlw	0
   950  000B82  6F6E               	movwf	_sample& (0+255),b
   951  000B84  0E00               	movlw	0
   952  000B86  6F6F               	movwf	(_sample+1)& (0+255),b
   953  000B88  0E00               	movlw	0
   954  000B8A  6F70               	movwf	(_sample+2)& (0+255),b
   955  000B8C  0E00               	movlw	0
   956  000B8E  6F71               	movwf	(_sample+3)& (0+255),b
   957                           
   958                           ;newmain.c: 173: weight = 0;
   959  000B90  0E00               	movlw	0
   960  000B92  6FDF               	movwf	(main@weight+1)& (0+255),b
   961  000B94  0E00               	movlw	0
   962  000B96  6FDE               	movwf	main@weight& (0+255),b
   963                           
   964                           ;newmain.c: 174: count = 0;
   965  000B98  0E00               	movlw	0
   966  000B9A  6F6A               	movwf	_count& (0+255),b
   967  000B9C  0E00               	movlw	0
   968  000B9E  6F6B               	movwf	(_count+1)& (0+255),b
   969  000BA0  0E00               	movlw	0
   970  000BA2  6F6C               	movwf	(_count+2)& (0+255),b
   971  000BA4  0E00               	movlw	0
   972  000BA6  6F6D               	movwf	(_count+3)& (0+255),b
   973                           
   974                           ; BSR set to: 0
   975                           ;newmain.c: 175: calibrate();
   976  000BA8  EC2F  F004         	call	_calibrate	;wreg free
   977  000BAC                     l152:
   978                           
   979                           ;newmain.c: 176: }
   980                           ;newmain.c: 177: count = (long)ReadCount();
   981  000BAC  EC7B  F00A         	call	_ReadCount	;wreg free
   982  000BB0  C001  F06A         	movff	?_ReadCount,_count
   983  000BB4  C002  F06B         	movff	?_ReadCount+1,_count+1
   984  000BB8  C003  F06C         	movff	?_ReadCount+2,_count+2
   985  000BBC  C004  F06D         	movff	?_ReadCount+3,_count+3
   986                           
   987                           ;newmain.c: 178: weight = (((count - sample) / val) - 2 * ((count - sample) / val));
   988  000BC0  0E00               	movlw	0
   989  000BC2  6E25               	movwf	___ftmul@f2,c
   990  000BC4  0E00               	movlw	0
   991  000BC6  6E26               	movwf	___ftmul@f2+1,c
   992  000BC8  0E40               	movlw	64
   993  000BCA  6E27               	movwf	___ftmul@f2+2,c
   994  000BCC  C0B6  F016         	movff	_val,___ftdiv@f2
   995  000BD0  C0B7  F017         	movff	_val+1,___ftdiv@f2+1
   996  000BD4  C0B8  F018         	movff	_val+2,___ftdiv@f2+2
   997  000BD8  C06E  F054         	movff	_sample,??_main
   998  000BDC  C06F  F055         	movff	_sample+1,??_main+1
   999  000BE0  C070  F056         	movff	_sample+2,??_main+2
  1000  000BE4  C071  F057         	movff	_sample+3,??_main+3
  1001  000BE8  1E54               	comf	??_main,f,c
  1002  000BEA  1E55               	comf	??_main+1,f,c
  1003  000BEC  1E56               	comf	??_main+2,f,c
  1004  000BEE  1E57               	comf	??_main+3,f,c
  1005  000BF0  2A54               	incf	??_main,f,c
  1006  000BF2  0E00               	movlw	0
  1007  000BF4  2255               	addwfc	??_main+1,f,c
  1008  000BF6  2256               	addwfc	??_main+2,f,c
  1009  000BF8  2257               	addwfc	??_main+3,f,c
  1010  000BFA  0100               	movlb	0	; () banked
  1011  000BFC  516A               	movf	_count& (0+255),w,b
  1012  000BFE  2454               	addwf	??_main,w,c
  1013  000C00  6E09               	movwf	___altoft@c,c
  1014  000C02  516B               	movf	(_count+1)& (0+255),w,b
  1015  000C04  2055               	addwfc	??_main+1,w,c
  1016  000C06  6E0A               	movwf	___altoft@c+1,c
  1017  000C08  516C               	movf	(_count+2)& (0+255),w,b
  1018  000C0A  2056               	addwfc	??_main+2,w,c
  1019  000C0C  6E0B               	movwf	___altoft@c+2,c
  1020  000C0E  516D               	movf	(_count+3)& (0+255),w,b
  1021  000C10  2057               	addwfc	??_main+3,w,c
  1022  000C12  6E0C               	movwf	___altoft@c+3,c
  1023  000C14  ECBA  F00A         	call	___altoft	;wreg free
  1024  000C18  C009  F013         	movff	?___altoft,___ftdiv@f1
  1025  000C1C  C00A  F014         	movff	?___altoft+1,___ftdiv@f1+1
  1026  000C20  C00B  F015         	movff	?___altoft+2,___ftdiv@f1+2
  1027  000C24  ECF5  F008         	call	___ftdiv	;wreg free
  1028  000C28  C013  F022         	movff	?___ftdiv,___ftmul@f1
  1029  000C2C  C014  F023         	movff	?___ftdiv+1,___ftmul@f1+1
  1030  000C30  C015  F024         	movff	?___ftdiv+2,___ftmul@f1+2
  1031  000C34  EC7B  F008         	call	___ftmul	;wreg free
  1032  000C38  C022  F031         	movff	?___ftmul,___ftneg@f1
  1033  000C3C  C023  F032         	movff	?___ftmul+1,___ftneg@f1+1
  1034  000C40  C024  F033         	movff	?___ftmul+2,___ftneg@f1+2
  1035  000C44  ECEE  F00B         	call	___ftneg	;wreg free
  1036  000C48  C031  F037         	movff	?___ftneg,___ftadd@f2
  1037  000C4C  C032  F038         	movff	?___ftneg+1,___ftadd@f2+1
  1038  000C50  C033  F039         	movff	?___ftneg+2,___ftadd@f2+2
  1039  000C54  C0B6  F016         	movff	_val,___ftdiv@f2
  1040  000C58  C0B7  F017         	movff	_val+1,___ftdiv@f2+1
  1041  000C5C  C0B8  F018         	movff	_val+2,___ftdiv@f2+2
  1042  000C60  C06E  F058         	movff	_sample,??_main+4
  1043  000C64  C06F  F059         	movff	_sample+1,??_main+5
  1044  000C68  C070  F05A         	movff	_sample+2,??_main+6
  1045  000C6C  C071  F05B         	movff	_sample+3,??_main+7
  1046  000C70  1E58               	comf	??_main+4,f,c
  1047  000C72  1E59               	comf	??_main+5,f,c
  1048  000C74  1E5A               	comf	??_main+6,f,c
  1049  000C76  1E5B               	comf	??_main+7,f,c
  1050  000C78  2A58               	incf	??_main+4,f,c
  1051  000C7A  0E00               	movlw	0
  1052  000C7C  2259               	addwfc	??_main+5,f,c
  1053  000C7E  225A               	addwfc	??_main+6,f,c
  1054  000C80  225B               	addwfc	??_main+7,f,c
  1055  000C82  0100               	movlb	0	; () banked
  1056  000C84  516A               	movf	_count& (0+255),w,b
  1057  000C86  2458               	addwf	??_main+4,w,c
  1058  000C88  6E09               	movwf	___altoft@c,c
  1059  000C8A  516B               	movf	(_count+1)& (0+255),w,b
  1060  000C8C  2059               	addwfc	??_main+5,w,c
  1061  000C8E  6E0A               	movwf	___altoft@c+1,c
  1062  000C90  516C               	movf	(_count+2)& (0+255),w,b
  1063  000C92  205A               	addwfc	??_main+6,w,c
  1064  000C94  6E0B               	movwf	___altoft@c+2,c
  1065  000C96  516D               	movf	(_count+3)& (0+255),w,b
  1066  000C98  205B               	addwfc	??_main+7,w,c
  1067  000C9A  6E0C               	movwf	___altoft@c+3,c
  1068  000C9C  ECBA  F00A         	call	___altoft	;wreg free
  1069  000CA0  C009  F013         	movff	?___altoft,___ftdiv@f1
  1070  000CA4  C00A  F014         	movff	?___altoft+1,___ftdiv@f1+1
  1071  000CA8  C00B  F015         	movff	?___altoft+2,___ftdiv@f1+2
  1072  000CAC  ECF5  F008         	call	___ftdiv	;wreg free
  1073  000CB0  C013  F034         	movff	?___ftdiv,___ftadd@f1
  1074  000CB4  C014  F035         	movff	?___ftdiv+1,___ftadd@f1+1
  1075  000CB8  C015  F036         	movff	?___ftdiv+2,___ftadd@f1+2
  1076  000CBC  EC90  F006         	call	___ftadd	;wreg free
  1077  000CC0  C034  F040         	movff	?___ftadd,___fttol@f1
  1078  000CC4  C035  F041         	movff	?___ftadd+1,___fttol@f1+1
  1079  000CC8  C036  F042         	movff	?___ftadd+2,___fttol@f1+2
  1080  000CCC  EC01  F008         	call	___fttol	;wreg free
  1081  000CD0  C040  F0DE         	movff	?___fttol,main@weight
  1082  000CD4  C041  F0DF         	movff	?___fttol+1,main@weight+1
  1083                           
  1084                           ;newmain.c: 179: intToAscci(weight, buff);
  1085  000CD8  C0DE  F00F         	movff	main@weight,intToAscci@num
  1086  000CDC  C0DF  F010         	movff	main@weight+1,intToAscci@num+1
  1087  000CE0  0E00               	movlw	0
  1088  000CE2  BE10               	btfsc	intToAscci@num+1,7,c
  1089  000CE4  0EFF               	movlw	-1
  1090  000CE6  6E11               	movwf	intToAscci@num+2,c
  1091  000CE8  6E12               	movwf	intToAscci@num+3,c
  1092  000CEA  0ED2               	movlw	low main@buff
  1093  000CEC  6E13               	movwf	intToAscci@str,c
  1094  000CEE  0E00               	movlw	high main@buff
  1095  000CF0  6E14               	movwf	intToAscci@str+1,c
  1096  000CF2  EC66  F007         	call	_intToAscci	;wreg free
  1097                           
  1098                           ;newmain.c: 180: send_string(buff);
  1099  000CF6  0ED2               	movlw	low main@buff
  1100  000CF8  6E07               	movwf	send_string@str,c
  1101  000CFA  0E00               	movlw	high main@buff
  1102  000CFC  6E08               	movwf	send_string@str+1,c
  1103  000CFE  EC2F  F00B         	call	_send_string	;wreg free
  1104                           
  1105                           ;newmain.c: 181: send_string("  gm");
  1106  000D02  0E57               	movlw	low STR_3
  1107  000D04  6E07               	movwf	send_string@str,c
  1108  000D06  0E08               	movlw	high STR_3
  1109  000D08  6E08               	movwf	send_string@str+1,c
  1110  000D0A  EC2F  F00B         	call	_send_string	;wreg free
  1111                           
  1112                           ;newmain.c: 182: USART_newline();
  1113  000D0E  EC1E  F00C         	call	_USART_newline	;wreg free
  1114                           
  1115                           ;newmain.c: 183: MSdelay(1000);
  1116  000D12  0E03               	movlw	3
  1117  000D14  6E02               	movwf	MSdelay@val+1,c
  1118  000D16  0EE8               	movlw	232
  1119  000D18  6E01               	movwf	MSdelay@val,c
  1120  000D1A  ECB5  F00B         	call	_MSdelay	;wreg free
  1121  000D1E  D727               	goto	l151
  1122  000D20                     __end_of_main:
  1123                           	opt stack 0
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           postdec1	equ	0xFE5
  1131                           fsr1l	equ	0xFE1
  1132                           
  1133 ;; *************** function _init *****************
  1134 ;; Defined at:
  1135 ;;		line 247 in file "newmain.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      void 
  1142 ;; Registers used:
  1143 ;;		wreg, status,2, status,0, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1149 ;;      Params:         0       0       0       0       0       0       0       0       0
  1150 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1152 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1153 ;;Total ram usage:        0 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    3
  1156 ;; This function calls:
  1157 ;;		_MSdelay
  1158 ;;		_USART_Init
  1159 ;; This function is called by:
  1160 ;;		_main
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text1
  1165  0016D0                     __ptext1:
  1166                           	opt stack 0
  1167  0016D0                     _init:
  1168                           	opt stack 27
  1169                           
  1170                           ;newmain.c: 249: ADCON1 = 0b00001111;
  1171                           
  1172                           ;incstack = 0
  1173  0016D0  0E0F               	movlw	15
  1174  0016D2  6EC1               	movwf	4033,c	;volatile
  1175                           
  1176                           ;newmain.c: 250: CMCON = 0b00000111;
  1177  0016D4  0E07               	movlw	7
  1178  0016D6  6EB4               	movwf	4020,c	;volatile
  1179                           
  1180                           ;newmain.c: 251: CVRCON = 0;
  1181  0016D8  0E00               	movlw	0
  1182  0016DA  6EB5               	movwf	4021,c	;volatile
  1183                           
  1184                           ;newmain.c: 252: UCON = 0;
  1185  0016DC  0E00               	movlw	0
  1186  0016DE  6E6D               	movwf	3949,c	;volatile
  1187                           
  1188                           ;newmain.c: 253: CCP1CON = 0;
  1189  0016E0  0E00               	movlw	0
  1190  0016E2  6EBD               	movwf	4029,c	;volatile
  1191                           
  1192                           ;newmain.c: 254: CCP2CON = 0;
  1193  0016E4  0E00               	movlw	0
  1194  0016E6  6EBA               	movwf	4026,c	;volatile
  1195                           
  1196                           ;newmain.c: 256: LATAbits.LATA4 = 1;
  1197  0016E8  8889               	bsf	3977,4,c	;volatile
  1198                           
  1199                           ;newmain.c: 257: TRISBbits.TRISB1 = 1;
  1200  0016EA  8293               	bsf	3987,1,c	;volatile
  1201                           
  1202                           ;newmain.c: 258: TRISBbits.TRISB0 = 1;
  1203  0016EC  8093               	bsf	3987,0,c	;volatile
  1204                           
  1205                           ;newmain.c: 259: TRISBbits.TRISB2 = 1;
  1206  0016EE  8493               	bsf	3987,2,c	;volatile
  1207                           
  1208                           ;newmain.c: 260: calib = 0;
  1209  0016F0  0E00               	movlw	0
  1210  0016F2  0100               	movlb	0	; () banked
  1211  0016F4  6F96               	movwf	_calib& (0+255),b
  1212  0016F6  0E00               	movlw	0
  1213  0016F8  6F97               	movwf	(_calib+1)& (0+255),b
  1214  0016FA  0E00               	movlw	0
  1215  0016FC  6F98               	movwf	(_calib+2)& (0+255),b
  1216  0016FE  0E00               	movlw	0
  1217  001700  6F99               	movwf	(_calib+3)& (0+255),b
  1218                           
  1219                           ;newmain.c: 261: page = 1;
  1220  001702  0E01               	movlw	1
  1221  001704  6FE4               	movwf	_page& (0+255),b
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;newmain.c: 262: MSdelay(100);
  1225  001706  0E00               	movlw	0
  1226  001708  6E02               	movwf	MSdelay@val+1,c
  1227  00170A  0E64               	movlw	100
  1228  00170C  6E01               	movwf	MSdelay@val,c
  1229  00170E  ECB5  F00B         	call	_MSdelay	;wreg free
  1230                           
  1231                           ;newmain.c: 263: TRISAbits.TRISA5 = 1;
  1232  001712  8A92               	bsf	3986,5,c	;volatile
  1233                           
  1234                           ;newmain.c: 264: TRISAbits.TRISA4 = 0;
  1235  001714  9892               	bcf	3986,4,c	;volatile
  1236                           
  1237                           ;newmain.c: 265: LATAbits.LATA4 = 1;
  1238  001716  8889               	bsf	3977,4,c	;volatile
  1239                           
  1240                           ;newmain.c: 266: USART_Init(9600);
  1241  001718  0E25               	movlw	37
  1242  00171A  6E50               	movwf	USART_Init@baud_rate+1,c
  1243  00171C  0E80               	movlw	128
  1244  00171E  6E4F               	movwf	USART_Init@baud_rate,c
  1245  001720  ECF6  F00A         	call	_USART_Init	;wreg free
  1246                           
  1247                           ;newmain.c: 267: TRISA0 = 1;
  1248  001724  8092               	bsf	3986,0,c	;volatile
  1249                           
  1250                           ;newmain.c: 268: TRISAbits.RA5 = 1;
  1251  001726  8A92               	bsf	3986,5,c	;volatile
  1252                           
  1253                           ;newmain.c: 269: TRISAbits.RA4 = 0;
  1254  001728  9892               	bcf	3986,4,c	;volatile
  1255  00172A  0012               	return		;funcret
  1256  00172C                     __end_of_init:
  1257                           	opt stack 0
  1258                           tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           postdec1	equ	0xFE5
  1265                           fsr1l	equ	0xFE1
  1266                           
  1267 ;; *************** function _USART_Init *****************
  1268 ;; Defined at:
  1269 ;;		line 16 in file "USART.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;  baud_rate       2   78[COMRAM] int 
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;  temp            3   80[COMRAM] float 
  1274 ;; Return value:  Size  Location     Type
  1275 ;;                  1    wreg      void 
  1276 ;; Registers used:
  1277 ;;		wreg, status,2, status,0, cstack
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1283 ;;      Params:         2       0       0       0       0       0       0       0       0
  1284 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1286 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1287 ;;Total ram usage:        5 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; Hardware stack levels required when called:    2
  1290 ;; This function calls:
  1291 ;;		___awtoft
  1292 ;;		___ftadd
  1293 ;;		___ftdiv
  1294 ;;		___fttol
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;;		_init
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text2
  1302  0015EC                     __ptext2:
  1303                           	opt stack 0
  1304  0015EC                     _USART_Init:
  1305                           	opt stack 27
  1306                           
  1307                           ;USART.c: 18: float temp;
  1308                           ;USART.c: 19: TRISCbits.TRISC6 = 0;
  1309                           
  1310                           ;incstack = 0
  1311  0015EC  9C94               	bcf	3988,6,c	;volatile
  1312                           
  1313                           ;USART.c: 20: TRISCbits.TRISC7 = 1;
  1314  0015EE  8E94               	bsf	3988,7,c	;volatile
  1315                           
  1316                           ;USART.c: 21: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  1317  0015F0  C04F  F009         	movff	USART_Init@baud_rate,___awtoft@c
  1318  0015F4  C050  F00A         	movff	USART_Init@baud_rate+1,___awtoft@c+1
  1319  0015F8  ECD2  F00B         	call	___awtoft	;wreg free
  1320  0015FC  C009  F016         	movff	?___awtoft,___ftdiv@f2
  1321  001600  C00A  F017         	movff	?___awtoft+1,___ftdiv@f2+1
  1322  001604  C00B  F018         	movff	?___awtoft+2,___ftdiv@f2+2
  1323  001608  0E24               	movlw	36
  1324  00160A  6E13               	movwf	___ftdiv@f1,c
  1325  00160C  0EF4               	movlw	244
  1326  00160E  6E14               	movwf	___ftdiv@f1+1,c
  1327  001610  0E47               	movlw	71
  1328  001612  6E15               	movwf	___ftdiv@f1+2,c
  1329  001614  ECF5  F008         	call	___ftdiv	;wreg free
  1330  001618  C013  F034         	movff	?___ftdiv,___ftadd@f1
  1331  00161C  C014  F035         	movff	?___ftdiv+1,___ftadd@f1+1
  1332  001620  C015  F036         	movff	?___ftdiv+2,___ftadd@f1+2
  1333  001624  0E00               	movlw	0
  1334  001626  6E37               	movwf	___ftadd@f2,c
  1335  001628  0E80               	movlw	128
  1336  00162A  6E38               	movwf	___ftadd@f2+1,c
  1337  00162C  0EBF               	movlw	191
  1338  00162E  6E39               	movwf	___ftadd@f2+2,c
  1339  001630  EC90  F006         	call	___ftadd	;wreg free
  1340  001634  C034  F051         	movff	?___ftadd,USART_Init@temp
  1341  001638  C035  F052         	movff	?___ftadd+1,USART_Init@temp+1
  1342  00163C  C036  F053         	movff	?___ftadd+2,USART_Init@temp+2
  1343                           
  1344                           ;USART.c: 22: SPBRG=(int)temp;
  1345  001640  C051  F040         	movff	USART_Init@temp,___fttol@f1
  1346  001644  C052  F041         	movff	USART_Init@temp+1,___fttol@f1+1
  1347  001648  C053  F042         	movff	USART_Init@temp+2,___fttol@f1+2
  1348  00164C  EC01  F008         	call	___fttol	;wreg free
  1349  001650  5040               	movf	?___fttol,w,c
  1350  001652  6EAF               	movwf	4015,c	;volatile
  1351                           
  1352                           ;USART.c: 23: TXSTA=0x20;
  1353  001654  0E20               	movlw	32
  1354  001656  6EAC               	movwf	4012,c	;volatile
  1355                           
  1356                           ;USART.c: 24: RCSTA=0x90;
  1357  001658  0E90               	movlw	144
  1358  00165A  6EAB               	movwf	4011,c	;volatile
  1359  00165C  0012               	return		;funcret
  1360  00165E                     __end_of_USART_Init:
  1361                           	opt stack 0
  1362                           tblptru	equ	0xFF8
  1363                           tblptrh	equ	0xFF7
  1364                           tblptrl	equ	0xFF6
  1365                           tablat	equ	0xFF5
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           postdec1	equ	0xFE5
  1369                           fsr1l	equ	0xFE1
  1370                           
  1371 ;; *************** function ___fttol *****************
  1372 ;; Defined at:
  1373 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;  f1              3   63[COMRAM] float 
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  lval            4   73[COMRAM] unsigned long 
  1378 ;;  exp1            1   77[COMRAM] unsigned char 
  1379 ;;  sign1           1   72[COMRAM] unsigned char 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  4   63[COMRAM] long 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1389 ;;      Params:         4       0       0       0       0       0       0       0       0
  1390 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1391 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1392 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1393 ;;Total ram usage:       15 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; This function calls:
  1396 ;;		Nothing
  1397 ;; This function is called by:
  1398 ;;		_main
  1399 ;;		_USART_Init
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text3
  1404  001002                     __ptext3:
  1405                           	opt stack 0
  1406  001002                     ___fttol:
  1407                           	opt stack 28
  1408                           
  1409                           ;incstack = 0
  1410  001002  C042  F044         	movff	___fttol@f1+2,??___fttol
  1411  001006  6A45               	clrf	(??___fttol+1)& (0+255),c
  1412  001008  6A46               	clrf	(??___fttol+2)& (0+255),c
  1413  00100A  3441               	rlcf	___fttol@f1+1,w,c
  1414  00100C  3644               	rlcf	??___fttol& (0+255),f,c
  1415  00100E  E301               	bnc	u1521
  1416  001010  8045               	bsf	(??___fttol+1)& (0+255),0,c
  1417  001012                     u1521:
  1418  001012  5044               	movf	??___fttol,w,c
  1419  001014  6E4E               	movwf	___fttol@exp1,c
  1420  001016  504E               	movf	___fttol@exp1,w,c
  1421  001018  A4D8               	btfss	status,2,c
  1422  00101A  D009               	goto	l744
  1423  00101C  0E00               	movlw	0
  1424  00101E  6E40               	movwf	?___fttol,c
  1425  001020  0E00               	movlw	0
  1426  001022  6E41               	movwf	?___fttol+1,c
  1427  001024  0E00               	movlw	0
  1428  001026  6E42               	movwf	?___fttol+2,c
  1429  001028  0E00               	movlw	0
  1430  00102A  6E43               	movwf	?___fttol+3,c
  1431  00102C  0012               	return	
  1432  00102E                     l744:
  1433  00102E  0E17               	movlw	23
  1434  001030  6E44               	movwf	??___fttol& (0+255),c
  1435  001032  C040  F045         	movff	___fttol@f1,??___fttol+1
  1436  001036  C041  F046         	movff	___fttol@f1+1,??___fttol+2
  1437  00103A  C042  F047         	movff	___fttol@f1+2,??___fttol+3
  1438  00103E  2844               	incf	??___fttol,w,c
  1439  001040  6E48               	movwf	(??___fttol+4)& (0+255),c
  1440  001042  D004               	goto	u1540
  1441  001044                     u1545:
  1442  001044  90D8               	bcf	status,0,c
  1443  001046  3247               	rrcf	??___fttol+3,f,c
  1444  001048  3246               	rrcf	??___fttol+2,f,c
  1445  00104A  3245               	rrcf	??___fttol+1,f,c
  1446  00104C                     u1540:
  1447  00104C  2E48               	decfsz	(??___fttol+4)& (0+255),f,c
  1448  00104E  D7FA               	goto	u1545
  1449  001050  5045               	movf	??___fttol+1,w,c
  1450  001052  6E49               	movwf	___fttol@sign1,c
  1451  001054  8E41               	bsf	___fttol@f1+1,7,c
  1452  001056  0EFF               	movlw	255
  1453  001058  1640               	andwf	___fttol@f1,f,c
  1454  00105A  0EFF               	movlw	255
  1455  00105C  1641               	andwf	___fttol@f1+1,f,c
  1456  00105E  0E00               	movlw	0
  1457  001060  1642               	andwf	___fttol@f1+2,f,c
  1458  001062  5040               	movf	___fttol@f1,w,c
  1459  001064  6E4A               	movwf	___fttol@lval,c
  1460  001066  5041               	movf	___fttol@f1+1,w,c
  1461  001068  6E4B               	movwf	___fttol@lval+1,c
  1462  00106A  5042               	movf	___fttol@f1+2,w,c
  1463  00106C  6E4C               	movwf	___fttol@lval+2,c
  1464  00106E  6A4D               	clrf	___fttol@lval+3,c
  1465  001070  0E8E               	movlw	142
  1466  001072  5E4E               	subwf	___fttol@exp1,f,c
  1467  001074  AE4E               	btfss	___fttol@exp1,7,c
  1468  001076  D016               	goto	l746
  1469  001078  504E               	movf	___fttol@exp1,w,c
  1470  00107A  0A80               	xorlw	128
  1471  00107C  0F8F               	addlw	143
  1472  00107E  B0D8               	btfsc	status,0,c
  1473  001080  D009               	goto	l747
  1474  001082  0E00               	movlw	0
  1475  001084  6E40               	movwf	?___fttol,c
  1476  001086  0E00               	movlw	0
  1477  001088  6E41               	movwf	?___fttol+1,c
  1478  00108A  0E00               	movlw	0
  1479  00108C  6E42               	movwf	?___fttol+2,c
  1480  00108E  0E00               	movlw	0
  1481  001090  6E43               	movwf	?___fttol+3,c
  1482  001092  0012               	return	
  1483  001094                     l747:
  1484  001094  90D8               	bcf	status,0,c
  1485  001096  324D               	rrcf	___fttol@lval+3,f,c
  1486  001098  324C               	rrcf	___fttol@lval+2,f,c
  1487  00109A  324B               	rrcf	___fttol@lval+1,f,c
  1488  00109C  324A               	rrcf	___fttol@lval,f,c
  1489  00109E  3E4E               	incfsz	___fttol@exp1,f,c
  1490  0010A0  D7F9               	goto	l747
  1491  0010A2  D015               	goto	u1580
  1492  0010A4                     l746:
  1493  0010A4  0E17               	movlw	23
  1494  0010A6  644E               	cpfsgt	___fttol@exp1,c
  1495  0010A8  D00F               	goto	l752
  1496  0010AA  0E00               	movlw	0
  1497  0010AC  6E40               	movwf	?___fttol,c
  1498  0010AE  0E00               	movlw	0
  1499  0010B0  6E41               	movwf	?___fttol+1,c
  1500  0010B2  0E00               	movlw	0
  1501  0010B4  6E42               	movwf	?___fttol+2,c
  1502  0010B6  0E00               	movlw	0
  1503  0010B8  6E43               	movwf	?___fttol+3,c
  1504  0010BA  0012               	return	
  1505  0010BC  90D8               	bcf	status,0,c
  1506  0010BE  364A               	rlcf	___fttol@lval,f,c
  1507  0010C0  364B               	rlcf	___fttol@lval+1,f,c
  1508  0010C2  364C               	rlcf	___fttol@lval+2,f,c
  1509  0010C4  364D               	rlcf	___fttol@lval+3,f,c
  1510  0010C6  064E               	decf	___fttol@exp1,f,c
  1511  0010C8                     l752:
  1512  0010C8  504E               	movf	___fttol@exp1,w,c
  1513  0010CA  A4D8               	btfss	status,2,c
  1514  0010CC  D7F7               	goto	l753
  1515  0010CE                     u1580:
  1516  0010CE  5049               	movf	___fttol@sign1,w,c
  1517  0010D0  B4D8               	btfsc	status,2,c
  1518  0010D2  D008               	goto	l755
  1519  0010D4  1E4D               	comf	___fttol@lval+3,f,c
  1520  0010D6  1E4C               	comf	___fttol@lval+2,f,c
  1521  0010D8  1E4B               	comf	___fttol@lval+1,f,c
  1522  0010DA  6C4A               	negf	___fttol@lval,c
  1523  0010DC  0E00               	movlw	0
  1524  0010DE  224B               	addwfc	___fttol@lval+1,f,c
  1525  0010E0  224C               	addwfc	___fttol@lval+2,f,c
  1526  0010E2  224D               	addwfc	___fttol@lval+3,f,c
  1527  0010E4                     l755:
  1528  0010E4  C04A  F040         	movff	___fttol@lval,?___fttol
  1529  0010E8  C04B  F041         	movff	___fttol@lval+1,?___fttol+1
  1530  0010EC  C04C  F042         	movff	___fttol@lval+2,?___fttol+2
  1531  0010F0  C04D  F043         	movff	___fttol@lval+3,?___fttol+3
  1532  0010F4  0012               	return	
  1533  0010F6                     __end_of___fttol:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           postdec1	equ	0xFE5
  1542                           fsr1l	equ	0xFE1
  1543                           status	equ	0xFD8
  1544                           
  1545 ;; *************** function ___awtoft *****************
  1546 ;; Defined at:
  1547 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  c               2    8[COMRAM] int 
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;  sign            1   11[COMRAM] unsigned char 
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  3    8[COMRAM] float 
  1554 ;; Registers used:
  1555 ;;		wreg, status,2, status,0, cstack
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1561 ;;      Params:         3       0       0       0       0       0       0       0       0
  1562 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1564 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1565 ;;Total ram usage:        4 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; Hardware stack levels required when called:    1
  1568 ;; This function calls:
  1569 ;;		___ftpack
  1570 ;; This function is called by:
  1571 ;;		_USART_Init
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           	psect	text4
  1576  0017A4                     __ptext4:
  1577                           	opt stack 0
  1578  0017A4                     ___awtoft:
  1579                           	opt stack 27
  1580                           
  1581                           ;incstack = 0
  1582  0017A4  0E00               	movlw	0
  1583  0017A6  6E0C               	movwf	___awtoft@sign,c
  1584  0017A8  AE0A               	btfss	___awtoft@c+1,7,c
  1585  0017AA  D006               	goto	l625
  1586  0017AC  6C09               	negf	___awtoft@c,c
  1587  0017AE  1E0A               	comf	___awtoft@c+1,f,c
  1588  0017B0  B0D8               	btfsc	status,0,c
  1589  0017B2  2A0A               	incf	___awtoft@c+1,f,c
  1590  0017B4  0E01               	movlw	1
  1591  0017B6  6E0C               	movwf	___awtoft@sign,c
  1592  0017B8                     l625:
  1593  0017B8  C009  F001         	movff	___awtoft@c,___ftpack@arg
  1594  0017BC  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  1595  0017C0  6A03               	clrf	___ftpack@arg+2,c
  1596  0017C2  0E8E               	movlw	142
  1597  0017C4  6E04               	movwf	___ftpack@exp,c
  1598  0017C6  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  1599  0017CA  ECCE  F009         	call	___ftpack	;wreg free
  1600  0017CE  C001  F009         	movff	?___ftpack,?___awtoft
  1601  0017D2  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  1602  0017D6  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  1603  0017DA  0012               	return	
  1604  0017DC                     __end_of___awtoft:
  1605                           	opt stack 0
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           postdec1	equ	0xFE5
  1613                           fsr1l	equ	0xFE1
  1614                           status	equ	0xFD8
  1615                           
  1616 ;; *************** function _calibrate *****************
  1617 ;; Defined at:
  1618 ;;		line 207 in file "newmain.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  i               2   79[COMRAM] int 
  1623 ;;  i               2   77[COMRAM] int 
  1624 ;;  buff           10   67[COMRAM] unsigned char [10]
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1634 ;;      Params:         0       0       0       0       0       0       0       0       0
  1635 ;;      Locals:        14       0       0       0       0       0       0       0       0
  1636 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1637 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1638 ;;Total ram usage:       18 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    3
  1641 ;; This function calls:
  1642 ;;		_MSdelay
  1643 ;;		_ReadCount
  1644 ;;		___aldiv
  1645 ;;		___altoft
  1646 ;;		___ftadd
  1647 ;;		___ftdiv
  1648 ;;		_intToAscci
  1649 ;;		_send_string
  1650 ;; This function is called by:
  1651 ;;		_main
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           	psect	text5
  1656  00085E                     __ptext5:
  1657                           	opt stack 0
  1658  00085E                     _calibrate:
  1659                           	opt stack 27
  1660                           
  1661                           ;newmain.c: 209: char buff[10];
  1662                           ;newmain.c: 210: send_string("Calibrating...");
  1663                           
  1664                           ;incstack = 0
  1665  00085E  0E29               	movlw	low STR_4
  1666  000860  6E07               	movwf	send_string@str,c
  1667  000862  0E08               	movlw	high STR_4
  1668  000864  6E08               	movwf	send_string@str+1,c
  1669  000866  EC2F  F00B         	call	_send_string	;wreg free
  1670                           
  1671                           ;newmain.c: 211: for (int i = 0; i < 100; i++)
  1672  00086A  0E00               	movlw	0
  1673  00086C  6E4F               	movwf	calibrate@i+1,c
  1674  00086E  0E00               	movlw	0
  1675  000870  6E4E               	movwf	calibrate@i,c
  1676  000872                     l2493:
  1677  000872  BE4F               	btfsc	calibrate@i+1,7,c
  1678  000874  D006               	goto	l167
  1679  000876  504F               	movf	calibrate@i+1,w,c
  1680  000878  E134               	bnz	l2511
  1681  00087A  0E64               	movlw	100
  1682  00087C  5C4E               	subwf	calibrate@i,w,c
  1683  00087E  B0D8               	btfsc	status,0,c
  1684  000880  D030               	goto	u1780
  1685  000882                     l167:
  1686                           
  1687                           ;newmain.c: 212: {
  1688                           ;newmain.c: 213: count = ReadCount();
  1689  000882  EC7B  F00A         	call	_ReadCount	;wreg free
  1690  000886  C001  F06A         	movff	?_ReadCount,_count
  1691  00088A  C002  F06B         	movff	?_ReadCount+1,_count+1
  1692  00088E  C003  F06C         	movff	?_ReadCount+2,_count+2
  1693  000892  C004  F06D         	movff	?_ReadCount+3,_count+3
  1694                           
  1695                           ;newmain.c: 214: sample += count;
  1696  000896  0100               	movlb	0	; () banked
  1697  000898  516A               	movf	_count& (0+255),w,b
  1698  00089A  276E               	addwf	_sample& (0+255),f,b
  1699  00089C  516B               	movf	(_count+1)& (0+255),w,b
  1700  00089E  236F               	addwfc	(_sample+1)& (0+255),f,b
  1701  0008A0  516C               	movf	(_count+2)& (0+255),w,b
  1702  0008A2  2370               	addwfc	(_sample+2)& (0+255),f,b
  1703  0008A4  516D               	movf	(_count+3)& (0+255),w,b
  1704  0008A6  2371               	addwfc	(_sample+3)& (0+255),f,b
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;newmain.c: 215: MSdelay(20);
  1708  0008A8  0E00               	movlw	0
  1709  0008AA  6E02               	movwf	MSdelay@val+1,c
  1710  0008AC  0E14               	movlw	20
  1711  0008AE  6E01               	movwf	MSdelay@val,c
  1712  0008B0  ECB5  F00B         	call	_MSdelay	;wreg free
  1713                           
  1714                           ;newmain.c: 216: intToAscci(count, buff);
  1715  0008B4  C06A  F00F         	movff	_count,intToAscci@num
  1716  0008B8  C06B  F010         	movff	_count+1,intToAscci@num+1
  1717  0008BC  C06C  F011         	movff	_count+2,intToAscci@num+2
  1718  0008C0  C06D  F012         	movff	_count+3,intToAscci@num+3
  1719  0008C4  0E44               	movlw	low calibrate@buff
  1720  0008C6  6E13               	movwf	intToAscci@str,c
  1721  0008C8  0E00               	movlw	high calibrate@buff
  1722  0008CA  6E14               	movwf	intToAscci@str+1,c
  1723  0008CC  EC66  F007         	call	_intToAscci	;wreg free
  1724                           
  1725                           ;newmain.c: 217: send_string(buff);
  1726  0008D0  0E44               	movlw	low calibrate@buff
  1727  0008D2  6E07               	movwf	send_string@str,c
  1728  0008D4  0E00               	movlw	high calibrate@buff
  1729  0008D6  6E08               	movwf	send_string@str+1,c
  1730  0008D8  EC2F  F00B         	call	_send_string	;wreg free
  1731  0008DC  4A4E               	infsnz	calibrate@i,f,c
  1732  0008DE  2A4F               	incf	calibrate@i+1,f,c
  1733  0008E0  D7C8               	goto	l2493
  1734  0008E2                     u1780:
  1735  0008E2                     l2511:
  1736                           
  1737                           ;newmain.c: 219: }
  1738                           ;newmain.c: 220: sample /= 100;
  1739  0008E2  C06E  F001         	movff	_sample,___aldiv@dividend
  1740  0008E6  C06F  F002         	movff	_sample+1,___aldiv@dividend+1
  1741  0008EA  C070  F003         	movff	_sample+2,___aldiv@dividend+2
  1742  0008EE  C071  F004         	movff	_sample+3,___aldiv@dividend+3
  1743  0008F2  0E64               	movlw	100
  1744  0008F4  6E05               	movwf	___aldiv@divisor,c
  1745  0008F6  0E00               	movlw	0
  1746  0008F8  6E06               	movwf	___aldiv@divisor+1,c
  1747  0008FA  0E00               	movlw	0
  1748  0008FC  6E07               	movwf	___aldiv@divisor+2,c
  1749  0008FE  0E00               	movlw	0
  1750  000900  6E08               	movwf	___aldiv@divisor+3,c
  1751  000902  EC68  F009         	call	___aldiv	;wreg free
  1752  000906  C001  F06E         	movff	?___aldiv,_sample
  1753  00090A  C002  F06F         	movff	?___aldiv+1,_sample+1
  1754  00090E  C003  F070         	movff	?___aldiv+2,_sample+2
  1755  000912  C004  F071         	movff	?___aldiv+3,_sample+3
  1756                           
  1757                           ;newmain.c: 222: count = 0;
  1758  000916  0E00               	movlw	0
  1759  000918  0100               	movlb	0	; () banked
  1760  00091A  6F6A               	movwf	_count& (0+255),b
  1761  00091C  0E00               	movlw	0
  1762  00091E  6F6B               	movwf	(_count+1)& (0+255),b
  1763  000920  0E00               	movlw	0
  1764  000922  6F6C               	movwf	(_count+2)& (0+255),b
  1765  000924  0E00               	movlw	0
  1766  000926  6F6D               	movwf	(_count+3)& (0+255),b
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;newmain.c: 223: send_string("Put the weight & wait");
  1770  000928  0E01               	movlw	low STR_5
  1771  00092A  6E07               	movwf	send_string@str,c
  1772  00092C  0E08               	movlw	high STR_5
  1773  00092E  6E08               	movwf	send_string@str+1,c
  1774  000930  EC2F  F00B         	call	_send_string	;wreg free
  1775                           
  1776                           ;newmain.c: 224: while (count < 2000)
  1777  000934  D042               	goto	l169
  1778  000936                     
  1779                           ;newmain.c: 225: {
  1780                           ;newmain.c: 226: count = ReadCount();
  1781  000936  EC7B  F00A         	call	_ReadCount	;wreg free
  1782  00093A  C001  F06A         	movff	?_ReadCount,_count
  1783  00093E  C002  F06B         	movff	?_ReadCount+1,_count+1
  1784  000942  C003  F06C         	movff	?_ReadCount+2,_count+2
  1785  000946  C004  F06D         	movff	?_ReadCount+3,_count+3
  1786                           
  1787                           ;newmain.c: 227: count = count - sample ;
  1788  00094A  C06E  F040         	movff	_sample,??_calibrate
  1789  00094E  C06F  F041         	movff	_sample+1,??_calibrate+1
  1790  000952  C070  F042         	movff	_sample+2,??_calibrate+2
  1791  000956  C071  F043         	movff	_sample+3,??_calibrate+3
  1792  00095A  1E40               	comf	??_calibrate,f,c
  1793  00095C  1E41               	comf	??_calibrate+1,f,c
  1794  00095E  1E42               	comf	??_calibrate+2,f,c
  1795  000960  1E43               	comf	??_calibrate+3,f,c
  1796  000962  2A40               	incf	??_calibrate,f,c
  1797  000964  0E00               	movlw	0
  1798  000966  2241               	addwfc	??_calibrate+1,f,c
  1799  000968  2242               	addwfc	??_calibrate+2,f,c
  1800  00096A  2243               	addwfc	??_calibrate+3,f,c
  1801  00096C  0100               	movlb	0	; () banked
  1802  00096E  516A               	movf	_count& (0+255),w,b
  1803  000970  2440               	addwf	??_calibrate,w,c
  1804  000972  6F6A               	movwf	_count& (0+255),b
  1805  000974  516B               	movf	(_count+1)& (0+255),w,b
  1806  000976  2041               	addwfc	??_calibrate+1,w,c
  1807  000978  6F6B               	movwf	(_count+1)& (0+255),b
  1808  00097A  516C               	movf	(_count+2)& (0+255),w,b
  1809  00097C  2042               	addwfc	??_calibrate+2,w,c
  1810  00097E  6F6C               	movwf	(_count+2)& (0+255),b
  1811  000980  516D               	movf	(_count+3)& (0+255),w,b
  1812  000982  2043               	addwfc	??_calibrate+3,w,c
  1813  000984  6F6D               	movwf	(_count+3)& (0+255),b
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;newmain.c: 228: MSdelay(10);
  1817  000986  0E00               	movlw	0
  1818  000988  6E02               	movwf	MSdelay@val+1,c
  1819  00098A  0E0A               	movlw	10
  1820  00098C  6E01               	movwf	MSdelay@val,c
  1821  00098E  ECB5  F00B         	call	_MSdelay	;wreg free
  1822                           
  1823                           ;newmain.c: 229: intToAscci(count, buff);
  1824  000992  C06A  F00F         	movff	_count,intToAscci@num
  1825  000996  C06B  F010         	movff	_count+1,intToAscci@num+1
  1826  00099A  C06C  F011         	movff	_count+2,intToAscci@num+2
  1827  00099E  C06D  F012         	movff	_count+3,intToAscci@num+3
  1828  0009A2  0E44               	movlw	low calibrate@buff
  1829  0009A4  6E13               	movwf	intToAscci@str,c
  1830  0009A6  0E00               	movlw	high calibrate@buff
  1831  0009A8  6E14               	movwf	intToAscci@str+1,c
  1832  0009AA  EC66  F007         	call	_intToAscci	;wreg free
  1833                           
  1834                           ;newmain.c: 230: send_string(buff);
  1835  0009AE  0E44               	movlw	low calibrate@buff
  1836  0009B0  6E07               	movwf	send_string@str,c
  1837  0009B2  0E00               	movlw	high calibrate@buff
  1838  0009B4  6E08               	movwf	send_string@str+1,c
  1839  0009B6  EC2F  F00B         	call	_send_string	;wreg free
  1840  0009BA                     l169:
  1841  0009BA  0100               	movlb	0	; () banked
  1842  0009BC  BF6D               	btfsc	(_count+3)& (0+255),7,b
  1843  0009BE  D7BB               	goto	l170
  1844  0009C0  516D               	movf	(_count+3)& (0+255),w,b
  1845  0009C2  116C               	iorwf	(_count+2)& (0+255),w,b
  1846  0009C4  E106               	bnz	l2529
  1847  0009C6  0ED0               	movlw	208
  1848  0009C8  5D6A               	subwf	_count& (0+255),w,b
  1849  0009CA  0E07               	movlw	7
  1850  0009CC  596B               	subwfb	(_count+1)& (0+255),w,b
  1851  0009CE  A0D8               	btfss	status,0,c
  1852  0009D0  D7B2               	goto	l170
  1853  0009D2                     l2529:
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;newmain.c: 231: }
  1857                           ;newmain.c: 232: MSdelay(2000);
  1858  0009D2  0E07               	movlw	7
  1859  0009D4  6E02               	movwf	MSdelay@val+1,c
  1860  0009D6  0ED0               	movlw	208
  1861  0009D8  6E01               	movwf	MSdelay@val,c
  1862  0009DA  ECB5  F00B         	call	_MSdelay	;wreg free
  1863                           
  1864                           ;newmain.c: 233: send_string("Re-caliberating..");
  1865  0009DE  0E17               	movlw	low STR_6
  1866  0009E0  6E07               	movwf	send_string@str,c
  1867  0009E2  0E08               	movlw	high STR_6
  1868  0009E4  6E08               	movwf	send_string@str+1,c
  1869  0009E6  EC2F  F00B         	call	_send_string	;wreg free
  1870                           
  1871                           ;newmain.c: 234: for (int i = 0; i < 100; i++)
  1872  0009EA  0E00               	movlw	0
  1873  0009EC  6E51               	movwf	calibrate@i_390+1,c
  1874  0009EE  0E00               	movlw	0
  1875  0009F0  6E50               	movwf	calibrate@i_390,c
  1876  0009F2                     l2535:
  1877  0009F2  BE51               	btfsc	calibrate@i_390+1,7,c
  1878  0009F4  D006               	goto	l172
  1879  0009F6  5051               	movf	calibrate@i_390+1,w,c
  1880  0009F8  E15F               	bnz	l2549
  1881  0009FA  0E64               	movlw	100
  1882  0009FC  5C50               	subwf	calibrate@i_390,w,c
  1883  0009FE  B0D8               	btfsc	status,0,c
  1884  000A00  D05B               	goto	u1810
  1885  000A02                     l172:
  1886                           
  1887                           ;newmain.c: 235: {
  1888                           ;newmain.c: 236: count = ReadCount();
  1889  000A02  EC7B  F00A         	call	_ReadCount	;wreg free
  1890  000A06  C001  F06A         	movff	?_ReadCount,_count
  1891  000A0A  C002  F06B         	movff	?_ReadCount+1,_count+1
  1892  000A0E  C003  F06C         	movff	?_ReadCount+2,_count+2
  1893  000A12  C004  F06D         	movff	?_ReadCount+3,_count+3
  1894                           
  1895                           ;newmain.c: 237: val += sample - count;
  1896  000A16  C0B6  F034         	movff	_val,___ftadd@f1
  1897  000A1A  C0B7  F035         	movff	_val+1,___ftadd@f1+1
  1898  000A1E  C0B8  F036         	movff	_val+2,___ftadd@f1+2
  1899  000A22  C06A  F040         	movff	_count,??_calibrate
  1900  000A26  C06B  F041         	movff	_count+1,??_calibrate+1
  1901  000A2A  C06C  F042         	movff	_count+2,??_calibrate+2
  1902  000A2E  C06D  F043         	movff	_count+3,??_calibrate+3
  1903  000A32  1E40               	comf	??_calibrate,f,c
  1904  000A34  1E41               	comf	??_calibrate+1,f,c
  1905  000A36  1E42               	comf	??_calibrate+2,f,c
  1906  000A38  1E43               	comf	??_calibrate+3,f,c
  1907  000A3A  2A40               	incf	??_calibrate,f,c
  1908  000A3C  0E00               	movlw	0
  1909  000A3E  2241               	addwfc	??_calibrate+1,f,c
  1910  000A40  2242               	addwfc	??_calibrate+2,f,c
  1911  000A42  2243               	addwfc	??_calibrate+3,f,c
  1912  000A44  0100               	movlb	0	; () banked
  1913  000A46  516E               	movf	_sample& (0+255),w,b
  1914  000A48  2440               	addwf	??_calibrate,w,c
  1915  000A4A  6E09               	movwf	___altoft@c,c
  1916  000A4C  516F               	movf	(_sample+1)& (0+255),w,b
  1917  000A4E  2041               	addwfc	??_calibrate+1,w,c
  1918  000A50  6E0A               	movwf	___altoft@c+1,c
  1919  000A52  5170               	movf	(_sample+2)& (0+255),w,b
  1920  000A54  2042               	addwfc	??_calibrate+2,w,c
  1921  000A56  6E0B               	movwf	___altoft@c+2,c
  1922  000A58  5171               	movf	(_sample+3)& (0+255),w,b
  1923  000A5A  2043               	addwfc	??_calibrate+3,w,c
  1924  000A5C  6E0C               	movwf	___altoft@c+3,c
  1925  000A5E  ECBA  F00A         	call	___altoft	;wreg free
  1926  000A62  C009  F037         	movff	?___altoft,___ftadd@f2
  1927  000A66  C00A  F038         	movff	?___altoft+1,___ftadd@f2+1
  1928  000A6A  C00B  F039         	movff	?___altoft+2,___ftadd@f2+2
  1929  000A6E  EC90  F006         	call	___ftadd	;wreg free
  1930  000A72  C034  F0B6         	movff	?___ftadd,_val
  1931  000A76  C035  F0B7         	movff	?___ftadd+1,_val+1
  1932  000A7A  C036  F0B8         	movff	?___ftadd+2,_val+2
  1933                           
  1934                           ;newmain.c: 238: MSdelay(20);
  1935  000A7E  0E00               	movlw	0
  1936  000A80  6E02               	movwf	MSdelay@val+1,c
  1937  000A82  0E14               	movlw	20
  1938  000A84  6E01               	movwf	MSdelay@val,c
  1939  000A86  ECB5  F00B         	call	_MSdelay	;wreg free
  1940                           
  1941                           ;newmain.c: 239: intToAscci(count, buff);
  1942  000A8A  C06A  F00F         	movff	_count,intToAscci@num
  1943  000A8E  C06B  F010         	movff	_count+1,intToAscci@num+1
  1944  000A92  C06C  F011         	movff	_count+2,intToAscci@num+2
  1945  000A96  C06D  F012         	movff	_count+3,intToAscci@num+3
  1946  000A9A  0E44               	movlw	low calibrate@buff
  1947  000A9C  6E13               	movwf	intToAscci@str,c
  1948  000A9E  0E00               	movlw	high calibrate@buff
  1949  000AA0  6E14               	movwf	intToAscci@str+1,c
  1950  000AA2  EC66  F007         	call	_intToAscci	;wreg free
  1951                           
  1952                           ;newmain.c: 240: send_string(buff);
  1953  000AA6  0E44               	movlw	low calibrate@buff
  1954  000AA8  6E07               	movwf	send_string@str,c
  1955  000AAA  0E00               	movlw	high calibrate@buff
  1956  000AAC  6E08               	movwf	send_string@str+1,c
  1957  000AAE  EC2F  F00B         	call	_send_string	;wreg free
  1958  000AB2  4A50               	infsnz	calibrate@i_390,f,c
  1959  000AB4  2A51               	incf	calibrate@i_390+1,f,c
  1960  000AB6  D79D               	goto	l2535
  1961  000AB8                     u1810:
  1962  000AB8                     l2549:
  1963                           
  1964                           ;newmain.c: 241: }
  1965                           ;newmain.c: 242: val = val / 100.0;
  1966  000AB8  C0B6  F013         	movff	_val,___ftdiv@f1
  1967  000ABC  C0B7  F014         	movff	_val+1,___ftdiv@f1+1
  1968  000AC0  C0B8  F015         	movff	_val+2,___ftdiv@f1+2
  1969  000AC4  0E00               	movlw	0
  1970  000AC6  6E16               	movwf	___ftdiv@f2,c
  1971  000AC8  0EC8               	movlw	200
  1972  000ACA  6E17               	movwf	___ftdiv@f2+1,c
  1973  000ACC  0E42               	movlw	66
  1974  000ACE  6E18               	movwf	___ftdiv@f2+2,c
  1975  000AD0  ECF5  F008         	call	___ftdiv	;wreg free
  1976  000AD4  C013  F0B6         	movff	?___ftdiv,_val
  1977  000AD8  C014  F0B7         	movff	?___ftdiv+1,_val+1
  1978  000ADC  C015  F0B8         	movff	?___ftdiv+2,_val+2
  1979                           
  1980                           ;newmain.c: 243: val = val / 300.0;
  1981  000AE0  C0B6  F013         	movff	_val,___ftdiv@f1
  1982  000AE4  C0B7  F014         	movff	_val+1,___ftdiv@f1+1
  1983  000AE8  C0B8  F015         	movff	_val+2,___ftdiv@f1+2
  1984  000AEC  0E00               	movlw	0
  1985  000AEE  6E16               	movwf	___ftdiv@f2,c
  1986  000AF0  0E96               	movlw	150
  1987  000AF2  6E17               	movwf	___ftdiv@f2+1,c
  1988  000AF4  0E43               	movlw	67
  1989  000AF6  6E18               	movwf	___ftdiv@f2+2,c
  1990  000AF8  ECF5  F008         	call	___ftdiv	;wreg free
  1991  000AFC  C013  F0B6         	movff	?___ftdiv,_val
  1992  000B00  C014  F0B7         	movff	?___ftdiv+1,_val+1
  1993  000B04  C015  F0B8         	movff	?___ftdiv+2,_val+2
  1994  000B08  0012               	return		;funcret
  1995  000B0A                     __end_of_calibrate:
  1996                           	opt stack 0
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           postinc0	equ	0xFEE
  2002                           wreg	equ	0xFE8
  2003                           postdec1	equ	0xFE5
  2004                           fsr1l	equ	0xFE1
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _send_string *****************
  2008 ;; Defined at:
  2009 ;;		line 3 in file "USART.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  str             2    6[COMRAM] PTR unsigned char 
  2012 ;;		 -> I2CRead@buff(10), STR_7(10), compute@buf(20), STR_6(18), 
  2013 ;;		 -> STR_5(22), calibrate@buff(10), STR_4(15), STR_3(5), 
  2014 ;;		 -> main@buff(10), STR_2(12), STR_1(9), 
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  sndstr_cnt      2   10[COMRAM] int 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2026 ;;      Params:         2       0       0       0       0       0       0       0       0
  2027 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2028 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2029 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2030 ;;Total ram usage:        6 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    2
  2033 ;; This function calls:
  2034 ;;		_txr
  2035 ;; This function is called by:
  2036 ;;		_main
  2037 ;;		_calibrate
  2038 ;;		_compute
  2039 ;;		_I2CRead
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           	psect	text6
  2044  00165E                     __ptext6:
  2045                           	opt stack 0
  2046  00165E                     _send_string:
  2047                           	opt stack 28
  2048                           
  2049                           ;USART.c: 5: int sndstr_cnt =0;
  2050                           
  2051                           ;incstack = 0
  2052  00165E  0E00               	movlw	0
  2053  001660  6E0C               	movwf	send_string@sndstr_cnt+1,c
  2054  001662  0E00               	movlw	0
  2055  001664  6E0B               	movwf	send_string@sndstr_cnt,c
  2056                           
  2057                           ;USART.c: 7: while (str[sndstr_cnt] != 0x00)
  2058  001666  D01A               	goto	l315
  2059  001668                     
  2060                           ;USART.c: 8: {
  2061                           ;USART.c: 9: txr(str[sndstr_cnt]);
  2062  001668  500B               	movf	send_string@sndstr_cnt,w,c
  2063  00166A  2407               	addwf	send_string@str,w,c
  2064  00166C  6E09               	movwf	??_send_string& (0+255),c
  2065  00166E  500C               	movf	send_string@sndstr_cnt+1,w,c
  2066  001670  2008               	addwfc	send_string@str+1,w,c
  2067  001672  6E0A               	movwf	(??_send_string+1)& (0+255),c
  2068  001674  C009  FFF6         	movff	??_send_string,tblptrl
  2069  001678  C00A  FFF7         	movff	??_send_string+1,tblptrh
  2070  00167C  6AF8               	clrf	tblptru,c
  2071  00167E  0E07               	movlw	(high __ramtop+-1)
  2072  001680  64F7               	cpfsgt	tblptrh,c
  2073  001682  D003               	bra	u1637
  2074  001684  0008               	tblrd		*
  2075  001686  50F5               	movf	tablat,w,c
  2076  001688  D005               	bra	u1630
  2077  00168A                     u1637:
  2078  00168A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2079  00168E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2080  001692  50EF               	movf	indf0,w,c
  2081  001694                     u1630:
  2082  001694  EC12  F00C         	call	_txr
  2083                           
  2084                           ;USART.c: 10: sndstr_cnt++;
  2085  001698  4A0B               	infsnz	send_string@sndstr_cnt,f,c
  2086  00169A  2A0C               	incf	send_string@sndstr_cnt+1,f,c
  2087  00169C                     l315:
  2088  00169C  500B               	movf	send_string@sndstr_cnt,w,c
  2089  00169E  2407               	addwf	send_string@str,w,c
  2090  0016A0  6E09               	movwf	??_send_string& (0+255),c
  2091  0016A2  500C               	movf	send_string@sndstr_cnt+1,w,c
  2092  0016A4  2008               	addwfc	send_string@str+1,w,c
  2093  0016A6  6E0A               	movwf	(??_send_string+1)& (0+255),c
  2094  0016A8  C009  FFF6         	movff	??_send_string,tblptrl
  2095  0016AC  C00A  FFF7         	movff	??_send_string+1,tblptrh
  2096  0016B0  6AF8               	clrf	tblptru,c
  2097  0016B2  0E07               	movlw	(high __ramtop+-1)
  2098  0016B4  64F7               	cpfsgt	tblptrh,c
  2099  0016B6  D003               	bra	u1647
  2100  0016B8  0008               	tblrd		*
  2101  0016BA  50F5               	movf	tablat,w,c
  2102  0016BC  D005               	bra	u1640
  2103  0016BE                     u1647:
  2104  0016BE  CFF6 FFE9          	movff	tblptrl,fsr0l
  2105  0016C2  CFF7 FFEA          	movff	tblptrh,fsr0h
  2106  0016C6  50EF               	movf	indf0,w,c
  2107  0016C8                     u1640:
  2108  0016C8  0900               	iorlw	0
  2109  0016CA  B4D8               	btfsc	status,2,c
  2110  0016CC  0012               	return	
  2111  0016CE  D7CC               	goto	l316
  2112  0016D0                     __end_of_send_string:
  2113                           	opt stack 0
  2114                           tblptru	equ	0xFF8
  2115                           tblptrh	equ	0xFF7
  2116                           tblptrl	equ	0xFF6
  2117                           tablat	equ	0xFF5
  2118                           indf0	equ	0xFEF
  2119                           postinc0	equ	0xFEE
  2120                           fsr0h	equ	0xFEA
  2121                           fsr0l	equ	0xFE9
  2122                           wreg	equ	0xFE8
  2123                           postdec1	equ	0xFE5
  2124                           fsr1l	equ	0xFE1
  2125                           status	equ	0xFD8
  2126                           
  2127 ;; *************** function _intToAscci *****************
  2128 ;; Defined at:
  2129 ;;		line 50 in file "USART.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;  num             4   14[COMRAM] long 
  2132 ;;  str             2   18[COMRAM] PTR unsigned char 
  2133 ;;		 -> I2CRead@buff(10), compute@buf(20), calibrate@buff(10), main@buff(10), 
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;  rem             2   20[COMRAM] int 
  2136 ;;  temp_num        4   24[COMRAM] long 
  2137 ;;  counter         2   28[COMRAM] int 
  2138 ;;  tempCount       2   22[COMRAM] int 
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  2   14[COMRAM] PTR unsigned char 
  2141 ;; Registers used:
  2142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2148 ;;      Params:         6       0       0       0       0       0       0       0       0
  2149 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2151 ;;      Totals:        16       0       0       0       0       0       0       0       0
  2152 ;;Total ram usage:       16 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    1
  2155 ;; This function calls:
  2156 ;;		___aldiv
  2157 ;;		___almod
  2158 ;; This function is called by:
  2159 ;;		_main
  2160 ;;		_calibrate
  2161 ;;		_compute
  2162 ;;		_I2CRead
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text7
  2167  000ECC                     __ptext7:
  2168                           	opt stack 0
  2169  000ECC                     _intToAscci:
  2170                           	opt stack 29
  2171                           
  2172                           ;USART.c: 52: long temp_num = num;
  2173                           
  2174                           ;incstack = 0
  2175  000ECC  C00F  F019         	movff	intToAscci@num,intToAscci@temp_num
  2176  000ED0  C010  F01A         	movff	intToAscci@num+1,intToAscci@temp_num+1
  2177  000ED4  C011  F01B         	movff	intToAscci@num+2,intToAscci@temp_num+2
  2178  000ED8  C012  F01C         	movff	intToAscci@num+3,intToAscci@temp_num+3
  2179                           
  2180                           ;USART.c: 53: int counter=0;
  2181  000EDC  0E00               	movlw	0
  2182  000EDE  6E1E               	movwf	intToAscci@counter+1,c
  2183  000EE0  0E00               	movlw	0
  2184  000EE2  6E1D               	movwf	intToAscci@counter,c
  2185                           
  2186                           ;USART.c: 54: int tempCount=0;
  2187  000EE4  0E00               	movlw	0
  2188  000EE6  6E18               	movwf	intToAscci@tempCount+1,c
  2189  000EE8  0E00               	movlw	0
  2190  000EEA  6E17               	movwf	intToAscci@tempCount,c
  2191                           
  2192                           ;USART.c: 55: while(temp_num != 0)
  2193  000EEC  D01C               	goto	l339
  2194  000EEE                     
  2195                           ;USART.c: 56: {
  2196                           ;USART.c: 58: temp_num /= 10;
  2197  000EEE  C019  F001         	movff	intToAscci@temp_num,___aldiv@dividend
  2198  000EF2  C01A  F002         	movff	intToAscci@temp_num+1,___aldiv@dividend+1
  2199  000EF6  C01B  F003         	movff	intToAscci@temp_num+2,___aldiv@dividend+2
  2200  000EFA  C01C  F004         	movff	intToAscci@temp_num+3,___aldiv@dividend+3
  2201  000EFE  0E0A               	movlw	10
  2202  000F00  6E05               	movwf	___aldiv@divisor,c
  2203  000F02  0E00               	movlw	0
  2204  000F04  6E06               	movwf	___aldiv@divisor+1,c
  2205  000F06  0E00               	movlw	0
  2206  000F08  6E07               	movwf	___aldiv@divisor+2,c
  2207  000F0A  0E00               	movlw	0
  2208  000F0C  6E08               	movwf	___aldiv@divisor+3,c
  2209  000F0E  EC68  F009         	call	___aldiv	;wreg free
  2210  000F12  C001  F019         	movff	?___aldiv,intToAscci@temp_num
  2211  000F16  C002  F01A         	movff	?___aldiv+1,intToAscci@temp_num+1
  2212  000F1A  C003  F01B         	movff	?___aldiv+2,intToAscci@temp_num+2
  2213  000F1E  C004  F01C         	movff	?___aldiv+3,intToAscci@temp_num+3
  2214                           
  2215                           ;USART.c: 59: counter++;
  2216  000F22  4A1D               	infsnz	intToAscci@counter,f,c
  2217  000F24  2A1E               	incf	intToAscci@counter+1,f,c
  2218  000F26                     l339:
  2219  000F26  5019               	movf	intToAscci@temp_num,w,c
  2220  000F28  101A               	iorwf	intToAscci@temp_num+1,w,c
  2221  000F2A  101B               	iorwf	intToAscci@temp_num+2,w,c
  2222  000F2C  101C               	iorwf	intToAscci@temp_num+3,w,c
  2223  000F2E  A4D8               	btfss	status,2,c
  2224  000F30  D7DE               	goto	l340
  2225                           
  2226                           ;USART.c: 60: }
  2227                           ;USART.c: 61: if(num<=0)
  2228  000F32  BE12               	btfsc	intToAscci@num+3,7,c
  2229  000F34  D007               	goto	u1710
  2230  000F36  5012               	movf	intToAscci@num+3,w,c
  2231  000F38  1011               	iorwf	intToAscci@num+2,w,c
  2232  000F3A  1010               	iorwf	intToAscci@num+1,w,c
  2233  000F3C  E112               	bnz	l342
  2234  000F3E  040F               	decf	intToAscci@num,w,c
  2235  000F40  B0D8               	btfsc	status,0,c
  2236  000F42  D00F               	goto	l342
  2237  000F44                     u1710:
  2238                           
  2239                           ;USART.c: 62: {
  2240                           ;USART.c: 63: str[0] ='0';
  2241  000F44  C013  FFD9         	movff	intToAscci@str,fsr2l
  2242  000F48  C014  FFDA         	movff	intToAscci@str+1,fsr2h
  2243  000F4C  0E30               	movlw	48
  2244  000F4E  6EDF               	movwf	indf2,c
  2245                           
  2246                           ;USART.c: 64: str[1] =0;
  2247  000F50  EE20 F001          	lfsr	2,1
  2248  000F54  5013               	movf	intToAscci@str,w,c
  2249  000F56  26D9               	addwf	fsr2l,f,c
  2250  000F58  5014               	movf	intToAscci@str+1,w,c
  2251  000F5A  22DA               	addwfc	fsr2h,f,c
  2252  000F5C  0E00               	movlw	0
  2253  000F5E  6EDF               	movwf	indf2,c
  2254                           
  2255                           ;USART.c: 65: return str;
  2256                           ;	Return value of _intToAscci is never used
  2257  000F60  0012               	return	
  2258  000F62                     l342:
  2259                           
  2260                           ;USART.c: 66: }
  2261                           ;USART.c: 67: tempCount = counter;
  2262  000F62  C01D  F017         	movff	intToAscci@counter,intToAscci@tempCount
  2263  000F66  C01E  F018         	movff	intToAscci@counter+1,intToAscci@tempCount+1
  2264                           
  2265                           ;USART.c: 68: while (num != 0)
  2266  000F6A  D03C               	goto	l344
  2267  000F6C                     
  2268                           ;USART.c: 69: {
  2269                           ;USART.c: 70: int rem = num % 10;
  2270  000F6C  C00F  F001         	movff	intToAscci@num,___almod@dividend
  2271  000F70  C010  F002         	movff	intToAscci@num+1,___almod@dividend+1
  2272  000F74  C011  F003         	movff	intToAscci@num+2,___almod@dividend+2
  2273  000F78  C012  F004         	movff	intToAscci@num+3,___almod@dividend+3
  2274  000F7C  0E0A               	movlw	10
  2275  000F7E  6E05               	movwf	___almod@divisor,c
  2276  000F80  0E00               	movlw	0
  2277  000F82  6E06               	movwf	___almod@divisor+1,c
  2278  000F84  0E00               	movlw	0
  2279  000F86  6E07               	movwf	___almod@divisor+2,c
  2280  000F88  0E00               	movlw	0
  2281  000F8A  6E08               	movwf	___almod@divisor+3,c
  2282  000F8C  EC25  F00A         	call	___almod	;wreg free
  2283  000F90  C001  F015         	movff	?___almod,intToAscci@rem
  2284  000F94  C002  F016         	movff	?___almod+1,intToAscci@rem+1
  2285                           
  2286                           ;USART.c: 71: str[--counter] = rem+'0';
  2287  000F98  061D               	decf	intToAscci@counter,f,c
  2288  000F9A  A0D8               	btfss	status,0,c
  2289  000F9C  061E               	decf	intToAscci@counter+1,f,c
  2290  000F9E  501D               	movf	intToAscci@counter,w,c
  2291  000FA0  2413               	addwf	intToAscci@str,w,c
  2292  000FA2  6ED9               	movwf	fsr2l,c
  2293  000FA4  501E               	movf	intToAscci@counter+1,w,c
  2294  000FA6  2014               	addwfc	intToAscci@str+1,w,c
  2295  000FA8  6EDA               	movwf	fsr2h,c
  2296  000FAA  5015               	movf	intToAscci@rem,w,c
  2297  000FAC  0F30               	addlw	48
  2298  000FAE  6EDF               	movwf	indf2,c
  2299                           
  2300                           ;USART.c: 72: num = num/10;
  2301  000FB0  C00F  F001         	movff	intToAscci@num,___aldiv@dividend
  2302  000FB4  C010  F002         	movff	intToAscci@num+1,___aldiv@dividend+1
  2303  000FB8  C011  F003         	movff	intToAscci@num+2,___aldiv@dividend+2
  2304  000FBC  C012  F004         	movff	intToAscci@num+3,___aldiv@dividend+3
  2305  000FC0  0E0A               	movlw	10
  2306  000FC2  6E05               	movwf	___aldiv@divisor,c
  2307  000FC4  0E00               	movlw	0
  2308  000FC6  6E06               	movwf	___aldiv@divisor+1,c
  2309  000FC8  0E00               	movlw	0
  2310  000FCA  6E07               	movwf	___aldiv@divisor+2,c
  2311  000FCC  0E00               	movlw	0
  2312  000FCE  6E08               	movwf	___aldiv@divisor+3,c
  2313  000FD0  EC68  F009         	call	___aldiv	;wreg free
  2314  000FD4  C001  F00F         	movff	?___aldiv,intToAscci@num
  2315  000FD8  C002  F010         	movff	?___aldiv+1,intToAscci@num+1
  2316  000FDC  C003  F011         	movff	?___aldiv+2,intToAscci@num+2
  2317  000FE0  C004  F012         	movff	?___aldiv+3,intToAscci@num+3
  2318  000FE4                     l344:
  2319  000FE4  500F               	movf	intToAscci@num,w,c
  2320  000FE6  1010               	iorwf	intToAscci@num+1,w,c
  2321  000FE8  1011               	iorwf	intToAscci@num+2,w,c
  2322  000FEA  1012               	iorwf	intToAscci@num+3,w,c
  2323  000FEC  A4D8               	btfss	status,2,c
  2324  000FEE  D7BE               	goto	l345
  2325                           
  2326                           ;USART.c: 73: }
  2327                           ;USART.c: 74: str[tempCount] = '\0';
  2328  000FF0  5017               	movf	intToAscci@tempCount,w,c
  2329  000FF2  2413               	addwf	intToAscci@str,w,c
  2330  000FF4  6ED9               	movwf	fsr2l,c
  2331  000FF6  5018               	movf	intToAscci@tempCount+1,w,c
  2332  000FF8  2014               	addwfc	intToAscci@str+1,w,c
  2333  000FFA  6EDA               	movwf	fsr2h,c
  2334  000FFC  0E00               	movlw	0
  2335  000FFE  6EDF               	movwf	indf2,c
  2336  001000  0012               	return	
  2337  001002                     __end_of_intToAscci:
  2338                           	opt stack 0
  2339                           tblptru	equ	0xFF8
  2340                           tblptrh	equ	0xFF7
  2341                           tblptrl	equ	0xFF6
  2342                           tablat	equ	0xFF5
  2343                           indf0	equ	0xFEF
  2344                           postinc0	equ	0xFEE
  2345                           fsr0h	equ	0xFEA
  2346                           fsr0l	equ	0xFE9
  2347                           wreg	equ	0xFE8
  2348                           postdec1	equ	0xFE5
  2349                           fsr1l	equ	0xFE1
  2350                           indf2	equ	0xFDF
  2351                           fsr2h	equ	0xFDA
  2352                           fsr2l	equ	0xFD9
  2353                           status	equ	0xFD8
  2354                           
  2355 ;; *************** function ___almod *****************
  2356 ;; Defined at:
  2357 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  dividend        4    0[COMRAM] long 
  2360 ;;  divisor         4    4[COMRAM] long 
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;  sign            1    9[COMRAM] unsigned char 
  2363 ;;  counter         1    8[COMRAM] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  4    0[COMRAM] long 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2373 ;;      Params:         8       0       0       0       0       0       0       0       0
  2374 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2376 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2377 ;;Total ram usage:       10 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_intToAscci
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text8
  2387  00144A                     __ptext8:
  2388                           	opt stack 0
  2389  00144A                     ___almod:
  2390                           	opt stack 29
  2391                           
  2392                           ;incstack = 0
  2393  00144A  0E00               	movlw	0
  2394  00144C  6E0A               	movwf	___almod@sign,c
  2395  00144E  AE04               	btfss	___almod@dividend+3,7,c
  2396  001450  D00A               	goto	l498
  2397  001452  1E04               	comf	___almod@dividend+3,f,c
  2398  001454  1E03               	comf	___almod@dividend+2,f,c
  2399  001456  1E02               	comf	___almod@dividend+1,f,c
  2400  001458  6C01               	negf	___almod@dividend,c
  2401  00145A  0E00               	movlw	0
  2402  00145C  2202               	addwfc	___almod@dividend+1,f,c
  2403  00145E  2203               	addwfc	___almod@dividend+2,f,c
  2404  001460  2204               	addwfc	___almod@dividend+3,f,c
  2405  001462  0E01               	movlw	1
  2406  001464  6E0A               	movwf	___almod@sign,c
  2407  001466                     l498:
  2408  001466  AE08               	btfss	___almod@divisor+3,7,c
  2409  001468  D008               	goto	l499
  2410  00146A  1E08               	comf	___almod@divisor+3,f,c
  2411  00146C  1E07               	comf	___almod@divisor+2,f,c
  2412  00146E  1E06               	comf	___almod@divisor+1,f,c
  2413  001470  6C05               	negf	___almod@divisor,c
  2414  001472  0E00               	movlw	0
  2415  001474  2206               	addwfc	___almod@divisor+1,f,c
  2416  001476  2207               	addwfc	___almod@divisor+2,f,c
  2417  001478  2208               	addwfc	___almod@divisor+3,f,c
  2418  00147A                     l499:
  2419  00147A  5005               	movf	___almod@divisor,w,c
  2420  00147C  1006               	iorwf	___almod@divisor+1,w,c
  2421  00147E  1007               	iorwf	___almod@divisor+2,w,c
  2422  001480  1008               	iorwf	___almod@divisor+3,w,c
  2423  001482  B4D8               	btfsc	status,2,c
  2424  001484  D024               	goto	l506
  2425  001486  0E01               	movlw	1
  2426  001488  6E09               	movwf	___almod@counter,c
  2427  00148A  D006               	goto	l501
  2428  00148C  90D8               	bcf	status,0,c
  2429  00148E  3605               	rlcf	___almod@divisor,f,c
  2430  001490  3606               	rlcf	___almod@divisor+1,f,c
  2431  001492  3607               	rlcf	___almod@divisor+2,f,c
  2432  001494  3608               	rlcf	___almod@divisor+3,f,c
  2433  001496  2A09               	incf	___almod@counter,f,c
  2434  001498                     l501:
  2435  001498  AE08               	btfss	___almod@divisor+3,7,c
  2436  00149A  D7F8               	goto	l502
  2437  00149C                     u1220:
  2438  00149C  5005               	movf	___almod@divisor,w,c
  2439  00149E  5C01               	subwf	___almod@dividend,w,c
  2440  0014A0  5006               	movf	___almod@divisor+1,w,c
  2441  0014A2  5802               	subwfb	___almod@dividend+1,w,c
  2442  0014A4  5007               	movf	___almod@divisor+2,w,c
  2443  0014A6  5803               	subwfb	___almod@dividend+2,w,c
  2444  0014A8  5008               	movf	___almod@divisor+3,w,c
  2445  0014AA  5804               	subwfb	___almod@dividend+3,w,c
  2446  0014AC  A0D8               	btfss	status,0,c
  2447  0014AE  D008               	goto	l505
  2448  0014B0  5005               	movf	___almod@divisor,w,c
  2449  0014B2  5E01               	subwf	___almod@dividend,f,c
  2450  0014B4  5006               	movf	___almod@divisor+1,w,c
  2451  0014B6  5A02               	subwfb	___almod@dividend+1,f,c
  2452  0014B8  5007               	movf	___almod@divisor+2,w,c
  2453  0014BA  5A03               	subwfb	___almod@dividend+2,f,c
  2454  0014BC  5008               	movf	___almod@divisor+3,w,c
  2455  0014BE  5A04               	subwfb	___almod@dividend+3,f,c
  2456  0014C0                     l505:
  2457  0014C0  90D8               	bcf	status,0,c
  2458  0014C2  3208               	rrcf	___almod@divisor+3,f,c
  2459  0014C4  3207               	rrcf	___almod@divisor+2,f,c
  2460  0014C6  3206               	rrcf	___almod@divisor+1,f,c
  2461  0014C8  3205               	rrcf	___almod@divisor,f,c
  2462  0014CA  2E09               	decfsz	___almod@counter,f,c
  2463  0014CC  D7E7               	goto	u1220
  2464  0014CE                     l506:
  2465  0014CE  500A               	movf	___almod@sign,w,c
  2466  0014D0  B4D8               	btfsc	status,2,c
  2467  0014D2  D008               	goto	l507
  2468  0014D4  1E04               	comf	___almod@dividend+3,f,c
  2469  0014D6  1E03               	comf	___almod@dividend+2,f,c
  2470  0014D8  1E02               	comf	___almod@dividend+1,f,c
  2471  0014DA  6C01               	negf	___almod@dividend,c
  2472  0014DC  0E00               	movlw	0
  2473  0014DE  2202               	addwfc	___almod@dividend+1,f,c
  2474  0014E0  2203               	addwfc	___almod@dividend+2,f,c
  2475  0014E2  2204               	addwfc	___almod@dividend+3,f,c
  2476  0014E4                     l507:
  2477  0014E4  C001  F001         	movff	___almod@dividend,?___almod
  2478  0014E8  C002  F002         	movff	___almod@dividend+1,?___almod+1
  2479  0014EC  C003  F003         	movff	___almod@dividend+2,?___almod+2
  2480  0014F0  C004  F004         	movff	___almod@dividend+3,?___almod+3
  2481  0014F4  0012               	return	
  2482  0014F6                     __end_of___almod:
  2483                           	opt stack 0
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           indf0	equ	0xFEF
  2489                           postinc0	equ	0xFEE
  2490                           fsr0h	equ	0xFEA
  2491                           fsr0l	equ	0xFE9
  2492                           wreg	equ	0xFE8
  2493                           postdec1	equ	0xFE5
  2494                           fsr1l	equ	0xFE1
  2495                           indf2	equ	0xFDF
  2496                           fsr2h	equ	0xFDA
  2497                           fsr2l	equ	0xFD9
  2498                           status	equ	0xFD8
  2499                           
  2500 ;; *************** function ___aldiv *****************
  2501 ;; Defined at:
  2502 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;  dividend        4    0[COMRAM] long 
  2505 ;;  divisor         4    4[COMRAM] long 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  quotient        4   10[COMRAM] long 
  2508 ;;  sign            1    9[COMRAM] unsigned char 
  2509 ;;  counter         1    8[COMRAM] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  4    0[COMRAM] long 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2519 ;;      Params:         8       0       0       0       0       0       0       0       0
  2520 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2521 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2522 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2523 ;;Total ram usage:       14 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		_calibrate
  2529 ;;		_intToAscci
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text9
  2534  0012D0                     __ptext9:
  2535                           	opt stack 0
  2536  0012D0                     ___aldiv:
  2537                           	opt stack 29
  2538                           
  2539                           ;incstack = 0
  2540  0012D0  0E00               	movlw	0
  2541  0012D2  6E0A               	movwf	___aldiv@sign,c
  2542  0012D4  AE08               	btfss	___aldiv@divisor+3,7,c
  2543  0012D6  D00A               	goto	l485
  2544  0012D8  1E08               	comf	___aldiv@divisor+3,f,c
  2545  0012DA  1E07               	comf	___aldiv@divisor+2,f,c
  2546  0012DC  1E06               	comf	___aldiv@divisor+1,f,c
  2547  0012DE  6C05               	negf	___aldiv@divisor,c
  2548  0012E0  0E00               	movlw	0
  2549  0012E2  2206               	addwfc	___aldiv@divisor+1,f,c
  2550  0012E4  2207               	addwfc	___aldiv@divisor+2,f,c
  2551  0012E6  2208               	addwfc	___aldiv@divisor+3,f,c
  2552  0012E8  0E01               	movlw	1
  2553  0012EA  6E0A               	movwf	___aldiv@sign,c
  2554  0012EC                     l485:
  2555  0012EC  AE04               	btfss	___aldiv@dividend+3,7,c
  2556  0012EE  D00A               	goto	l486
  2557  0012F0  1E04               	comf	___aldiv@dividend+3,f,c
  2558  0012F2  1E03               	comf	___aldiv@dividend+2,f,c
  2559  0012F4  1E02               	comf	___aldiv@dividend+1,f,c
  2560  0012F6  6C01               	negf	___aldiv@dividend,c
  2561  0012F8  0E00               	movlw	0
  2562  0012FA  2202               	addwfc	___aldiv@dividend+1,f,c
  2563  0012FC  2203               	addwfc	___aldiv@dividend+2,f,c
  2564  0012FE  2204               	addwfc	___aldiv@dividend+3,f,c
  2565  001300  0E01               	movlw	1
  2566  001302  1A0A               	xorwf	___aldiv@sign,f,c
  2567  001304                     l486:
  2568  001304  0E00               	movlw	0
  2569  001306  6E0B               	movwf	___aldiv@quotient,c
  2570  001308  0E00               	movlw	0
  2571  00130A  6E0C               	movwf	___aldiv@quotient+1,c
  2572  00130C  0E00               	movlw	0
  2573  00130E  6E0D               	movwf	___aldiv@quotient+2,c
  2574  001310  0E00               	movlw	0
  2575  001312  6E0E               	movwf	___aldiv@quotient+3,c
  2576  001314  5005               	movf	___aldiv@divisor,w,c
  2577  001316  1006               	iorwf	___aldiv@divisor+1,w,c
  2578  001318  1007               	iorwf	___aldiv@divisor+2,w,c
  2579  00131A  1008               	iorwf	___aldiv@divisor+3,w,c
  2580  00131C  B4D8               	btfsc	status,2,c
  2581  00131E  D02A               	goto	l493
  2582  001320  0E01               	movlw	1
  2583  001322  6E09               	movwf	___aldiv@counter,c
  2584  001324  D006               	goto	l488
  2585  001326  90D8               	bcf	status,0,c
  2586  001328  3605               	rlcf	___aldiv@divisor,f,c
  2587  00132A  3606               	rlcf	___aldiv@divisor+1,f,c
  2588  00132C  3607               	rlcf	___aldiv@divisor+2,f,c
  2589  00132E  3608               	rlcf	___aldiv@divisor+3,f,c
  2590  001330  2A09               	incf	___aldiv@counter,f,c
  2591  001332                     l488:
  2592  001332  AE08               	btfss	___aldiv@divisor+3,7,c
  2593  001334  D7F8               	goto	l489
  2594  001336                     u1160:
  2595  001336  90D8               	bcf	status,0,c
  2596  001338  360B               	rlcf	___aldiv@quotient,f,c
  2597  00133A  360C               	rlcf	___aldiv@quotient+1,f,c
  2598  00133C  360D               	rlcf	___aldiv@quotient+2,f,c
  2599  00133E  360E               	rlcf	___aldiv@quotient+3,f,c
  2600  001340  5005               	movf	___aldiv@divisor,w,c
  2601  001342  5C01               	subwf	___aldiv@dividend,w,c
  2602  001344  5006               	movf	___aldiv@divisor+1,w,c
  2603  001346  5802               	subwfb	___aldiv@dividend+1,w,c
  2604  001348  5007               	movf	___aldiv@divisor+2,w,c
  2605  00134A  5803               	subwfb	___aldiv@dividend+2,w,c
  2606  00134C  5008               	movf	___aldiv@divisor+3,w,c
  2607  00134E  5804               	subwfb	___aldiv@dividend+3,w,c
  2608  001350  A0D8               	btfss	status,0,c
  2609  001352  D009               	goto	l492
  2610  001354  5005               	movf	___aldiv@divisor,w,c
  2611  001356  5E01               	subwf	___aldiv@dividend,f,c
  2612  001358  5006               	movf	___aldiv@divisor+1,w,c
  2613  00135A  5A02               	subwfb	___aldiv@dividend+1,f,c
  2614  00135C  5007               	movf	___aldiv@divisor+2,w,c
  2615  00135E  5A03               	subwfb	___aldiv@dividend+2,f,c
  2616  001360  5008               	movf	___aldiv@divisor+3,w,c
  2617  001362  5A04               	subwfb	___aldiv@dividend+3,f,c
  2618  001364  800B               	bsf	___aldiv@quotient,0,c
  2619  001366                     l492:
  2620  001366  90D8               	bcf	status,0,c
  2621  001368  3208               	rrcf	___aldiv@divisor+3,f,c
  2622  00136A  3207               	rrcf	___aldiv@divisor+2,f,c
  2623  00136C  3206               	rrcf	___aldiv@divisor+1,f,c
  2624  00136E  3205               	rrcf	___aldiv@divisor,f,c
  2625  001370  2E09               	decfsz	___aldiv@counter,f,c
  2626  001372  D7E1               	goto	u1160
  2627  001374                     l493:
  2628  001374  500A               	movf	___aldiv@sign,w,c
  2629  001376  B4D8               	btfsc	status,2,c
  2630  001378  D008               	goto	l494
  2631  00137A  1E0E               	comf	___aldiv@quotient+3,f,c
  2632  00137C  1E0D               	comf	___aldiv@quotient+2,f,c
  2633  00137E  1E0C               	comf	___aldiv@quotient+1,f,c
  2634  001380  6C0B               	negf	___aldiv@quotient,c
  2635  001382  0E00               	movlw	0
  2636  001384  220C               	addwfc	___aldiv@quotient+1,f,c
  2637  001386  220D               	addwfc	___aldiv@quotient+2,f,c
  2638  001388  220E               	addwfc	___aldiv@quotient+3,f,c
  2639  00138A                     l494:
  2640  00138A  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  2641  00138E  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  2642  001392  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  2643  001396  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  2644  00139A  0012               	return	
  2645  00139C                     __end_of___aldiv:
  2646                           	opt stack 0
  2647                           tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           tblptrl	equ	0xFF6
  2650                           tablat	equ	0xFF5
  2651                           indf0	equ	0xFEF
  2652                           postinc0	equ	0xFEE
  2653                           fsr0h	equ	0xFEA
  2654                           fsr0l	equ	0xFE9
  2655                           wreg	equ	0xFE8
  2656                           postdec1	equ	0xFE5
  2657                           fsr1l	equ	0xFE1
  2658                           indf2	equ	0xFDF
  2659                           fsr2h	equ	0xFDA
  2660                           fsr2l	equ	0xFD9
  2661                           status	equ	0xFD8
  2662                           
  2663 ;; *************** function ___ftdiv *****************
  2664 ;; Defined at:
  2665 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;  f1              3   18[COMRAM] float 
  2668 ;;  f2              3   21[COMRAM] float 
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  f3              3   28[COMRAM] float 
  2671 ;;  sign            1   32[COMRAM] unsigned char 
  2672 ;;  exp             1   31[COMRAM] unsigned char 
  2673 ;;  cntr            1   27[COMRAM] unsigned char 
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  3   18[COMRAM] float 
  2676 ;; Registers used:
  2677 ;;		wreg, status,2, status,0, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2683 ;;      Params:         6       0       0       0       0       0       0       0       0
  2684 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2685 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2686 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2687 ;;Total ram usage:       15 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    1
  2690 ;; This function calls:
  2691 ;;		___ftpack
  2692 ;; This function is called by:
  2693 ;;		_main
  2694 ;;		_calibrate
  2695 ;;		_USART_Init
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text10
  2700  0011EA                     __ptext10:
  2701                           	opt stack 0
  2702  0011EA                     ___ftdiv:
  2703                           	opt stack 27
  2704                           
  2705                           ;incstack = 0
  2706  0011EA  C015  F019         	movff	___ftdiv@f1+2,??___ftdiv
  2707  0011EE  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  2708  0011F0  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  2709  0011F2  3414               	rlcf	___ftdiv@f1+1,w,c
  2710  0011F4  3619               	rlcf	??___ftdiv& (0+255),f,c
  2711  0011F6  E301               	bnc	u1461
  2712  0011F8  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  2713  0011FA                     u1461:
  2714  0011FA  5019               	movf	??___ftdiv,w,c
  2715  0011FC  6E20               	movwf	___ftdiv@exp,c
  2716  0011FE  5020               	movf	___ftdiv@exp,w,c
  2717  001200  A4D8               	btfss	status,2,c
  2718  001202  D007               	goto	l708
  2719  001204  0E00               	movlw	0
  2720  001206  6E13               	movwf	?___ftdiv,c
  2721  001208  0E00               	movlw	0
  2722  00120A  6E14               	movwf	?___ftdiv+1,c
  2723  00120C  0E00               	movlw	0
  2724  00120E  6E15               	movwf	?___ftdiv+2,c
  2725  001210  0012               	return	
  2726  001212                     l708:
  2727  001212  C018  F019         	movff	___ftdiv@f2+2,??___ftdiv
  2728  001216  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  2729  001218  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  2730  00121A  3417               	rlcf	___ftdiv@f2+1,w,c
  2731  00121C  3619               	rlcf	??___ftdiv& (0+255),f,c
  2732  00121E  E301               	bnc	u1481
  2733  001220  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  2734  001222                     u1481:
  2735  001222  5019               	movf	??___ftdiv,w,c
  2736  001224  6E21               	movwf	___ftdiv@sign,c
  2737  001226  5021               	movf	___ftdiv@sign,w,c
  2738  001228  A4D8               	btfss	status,2,c
  2739  00122A  D007               	goto	l710
  2740  00122C  0E00               	movlw	0
  2741  00122E  6E13               	movwf	?___ftdiv,c
  2742  001230  0E00               	movlw	0
  2743  001232  6E14               	movwf	?___ftdiv+1,c
  2744  001234  0E00               	movlw	0
  2745  001236  6E15               	movwf	?___ftdiv+2,c
  2746  001238  0012               	return	
  2747  00123A                     l710:
  2748  00123A  0E00               	movlw	0
  2749  00123C  6E1D               	movwf	___ftdiv@f3,c
  2750  00123E  0E00               	movlw	0
  2751  001240  6E1E               	movwf	___ftdiv@f3+1,c
  2752  001242  0E00               	movlw	0
  2753  001244  6E1F               	movwf	___ftdiv@f3+2,c
  2754  001246  5021               	movf	___ftdiv@sign,w,c
  2755  001248  0F89               	addlw	137
  2756  00124A  5E20               	subwf	___ftdiv@exp,f,c
  2757  00124C  C015  F021         	movff	___ftdiv@f1+2,___ftdiv@sign
  2758  001250  5018               	movf	___ftdiv@f2+2,w,c
  2759  001252  1A21               	xorwf	___ftdiv@sign,f,c
  2760  001254  0E80               	movlw	128
  2761  001256  1621               	andwf	___ftdiv@sign,f,c
  2762  001258  8E14               	bsf	___ftdiv@f1+1,7,c
  2763  00125A  0EFF               	movlw	255
  2764  00125C  1613               	andwf	___ftdiv@f1,f,c
  2765  00125E  0EFF               	movlw	255
  2766  001260  1614               	andwf	___ftdiv@f1+1,f,c
  2767  001262  0E00               	movlw	0
  2768  001264  1615               	andwf	___ftdiv@f1+2,f,c
  2769  001266  8E17               	bsf	___ftdiv@f2+1,7,c
  2770  001268  0EFF               	movlw	255
  2771  00126A  1616               	andwf	___ftdiv@f2,f,c
  2772  00126C  0EFF               	movlw	255
  2773  00126E  1617               	andwf	___ftdiv@f2+1,f,c
  2774  001270  0E00               	movlw	0
  2775  001272  1618               	andwf	___ftdiv@f2+2,f,c
  2776  001274  0E18               	movlw	24
  2777  001276  6E1C               	movwf	___ftdiv@cntr,c
  2778  001278  90D8               	bcf	status,0,c
  2779  00127A  361D               	rlcf	___ftdiv@f3,f,c
  2780  00127C  361E               	rlcf	___ftdiv@f3+1,f,c
  2781  00127E  361F               	rlcf	___ftdiv@f3+2,f,c
  2782  001280  5016               	movf	___ftdiv@f2,w,c
  2783  001282  5C13               	subwf	___ftdiv@f1,w,c
  2784  001284  5017               	movf	___ftdiv@f2+1,w,c
  2785  001286  5814               	subwfb	___ftdiv@f1+1,w,c
  2786  001288  5018               	movf	___ftdiv@f2+2,w,c
  2787  00128A  5815               	subwfb	___ftdiv@f1+2,w,c
  2788  00128C  A0D8               	btfss	status,0,c
  2789  00128E  D007               	goto	l712
  2790  001290  5016               	movf	___ftdiv@f2,w,c
  2791  001292  5E13               	subwf	___ftdiv@f1,f,c
  2792  001294  5017               	movf	___ftdiv@f2+1,w,c
  2793  001296  5A14               	subwfb	___ftdiv@f1+1,f,c
  2794  001298  5018               	movf	___ftdiv@f2+2,w,c
  2795  00129A  5A15               	subwfb	___ftdiv@f1+2,f,c
  2796  00129C  801D               	bsf	___ftdiv@f3,0,c
  2797  00129E                     l712:
  2798  00129E  90D8               	bcf	status,0,c
  2799  0012A0  3613               	rlcf	___ftdiv@f1,f,c
  2800  0012A2  3614               	rlcf	___ftdiv@f1+1,f,c
  2801  0012A4  3615               	rlcf	___ftdiv@f1+2,f,c
  2802  0012A6  2E1C               	decfsz	___ftdiv@cntr,f,c
  2803  0012A8  D7E7               	goto	l711
  2804  0012AA  C01D  F001         	movff	___ftdiv@f3,___ftpack@arg
  2805  0012AE  C01E  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2806  0012B2  C01F  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2807  0012B6  C020  F004         	movff	___ftdiv@exp,___ftpack@exp
  2808  0012BA  C021  F005         	movff	___ftdiv@sign,___ftpack@sign
  2809  0012BE  ECCE  F009         	call	___ftpack	;wreg free
  2810  0012C2  C001  F013         	movff	?___ftpack,?___ftdiv
  2811  0012C6  C002  F014         	movff	?___ftpack+1,?___ftdiv+1
  2812  0012CA  C003  F015         	movff	?___ftpack+2,?___ftdiv+2
  2813  0012CE  0012               	return	
  2814  0012D0                     __end_of___ftdiv:
  2815                           	opt stack 0
  2816                           tblptru	equ	0xFF8
  2817                           tblptrh	equ	0xFF7
  2818                           tblptrl	equ	0xFF6
  2819                           tablat	equ	0xFF5
  2820                           indf0	equ	0xFEF
  2821                           postinc0	equ	0xFEE
  2822                           fsr0h	equ	0xFEA
  2823                           fsr0l	equ	0xFE9
  2824                           wreg	equ	0xFE8
  2825                           postdec1	equ	0xFE5
  2826                           fsr1l	equ	0xFE1
  2827                           indf2	equ	0xFDF
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function ___ftadd *****************
  2833 ;; Defined at:
  2834 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  f1              3   51[COMRAM] float 
  2837 ;;  f2              3   54[COMRAM] float 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  exp1            1   62[COMRAM] unsigned char 
  2840 ;;  exp2            1   61[COMRAM] unsigned char 
  2841 ;;  sign            1   60[COMRAM] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  3   51[COMRAM] float 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2851 ;;      Params:         6       0       0       0       0       0       0       0       0
  2852 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2853 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2854 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2855 ;;Total ram usage:       12 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    1
  2858 ;; This function calls:
  2859 ;;		___ftpack
  2860 ;; This function is called by:
  2861 ;;		_main
  2862 ;;		_calibrate
  2863 ;;		_USART_Init
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text11
  2868  000D20                     __ptext11:
  2869                           	opt stack 0
  2870  000D20                     ___ftadd:
  2871                           	opt stack 27
  2872                           
  2873                           ;incstack = 0
  2874  000D20  C036  F03A         	movff	___ftadd@f1+2,??___ftadd
  2875  000D24  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  2876  000D26  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  2877  000D28  3435               	rlcf	___ftadd@f1+1,w,c
  2878  000D2A  363A               	rlcf	??___ftadd& (0+255),f,c
  2879  000D2C  E301               	bnc	u1251
  2880  000D2E  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  2881  000D30                     u1251:
  2882  000D30  503A               	movf	??___ftadd,w,c
  2883  000D32  6E3F               	movwf	___ftadd@exp1,c
  2884  000D34  C039  F03A         	movff	___ftadd@f2+2,??___ftadd
  2885  000D38  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  2886  000D3A  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  2887  000D3C  3438               	rlcf	___ftadd@f2+1,w,c
  2888  000D3E  363A               	rlcf	??___ftadd& (0+255),f,c
  2889  000D40  E301               	bnc	u1261
  2890  000D42  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  2891  000D44                     u1261:
  2892  000D44  503A               	movf	??___ftadd,w,c
  2893  000D46  6E3E               	movwf	___ftadd@exp2,c
  2894  000D48  503F               	movf	___ftadd@exp1,w,c
  2895  000D4A  B4D8               	btfsc	status,2,c
  2896  000D4C  D00B               	goto	u1290
  2897  000D4E  503E               	movf	___ftadd@exp2,w,c
  2898  000D50  5C3F               	subwf	___ftadd@exp1,w,c
  2899  000D52  B0D8               	btfsc	status,0,c
  2900  000D54  D00E               	goto	l675
  2901  000D56  503F               	movf	___ftadd@exp1,w,c
  2902  000D58  0800               	sublw	0
  2903  000D5A  243E               	addwf	___ftadd@exp2,w,c
  2904  000D5C  6E3A               	movwf	??___ftadd& (0+255),c
  2905  000D5E  0E18               	movlw	24
  2906  000D60  643A               	cpfsgt	??___ftadd,c
  2907  000D62  D007               	goto	l675
  2908  000D64                     u1290:
  2909  000D64  C037  F034         	movff	___ftadd@f2,?___ftadd
  2910  000D68  C038  F035         	movff	___ftadd@f2+1,?___ftadd+1
  2911  000D6C  C039  F036         	movff	___ftadd@f2+2,?___ftadd+2
  2912  000D70  0012               	return	
  2913  000D72                     l675:
  2914  000D72  503E               	movf	___ftadd@exp2,w,c
  2915  000D74  B4D8               	btfsc	status,2,c
  2916  000D76  D00B               	goto	u1320
  2917  000D78  503F               	movf	___ftadd@exp1,w,c
  2918  000D7A  5C3E               	subwf	___ftadd@exp2,w,c
  2919  000D7C  B0D8               	btfsc	status,0,c
  2920  000D7E  D00E               	goto	l679
  2921  000D80  503E               	movf	___ftadd@exp2,w,c
  2922  000D82  0800               	sublw	0
  2923  000D84  243F               	addwf	___ftadd@exp1,w,c
  2924  000D86  6E3A               	movwf	??___ftadd& (0+255),c
  2925  000D88  0E18               	movlw	24
  2926  000D8A  643A               	cpfsgt	??___ftadd,c
  2927  000D8C  D007               	goto	l679
  2928  000D8E                     u1320:
  2929  000D8E  C034  F034         	movff	___ftadd@f1,?___ftadd
  2930  000D92  C035  F035         	movff	___ftadd@f1+1,?___ftadd+1
  2931  000D96  C036  F036         	movff	___ftadd@f1+2,?___ftadd+2
  2932  000D9A  0012               	return	
  2933  000D9C                     l679:
  2934  000D9C  0E06               	movlw	6
  2935  000D9E  6E3D               	movwf	___ftadd@sign,c
  2936  000DA0  BE36               	btfsc	___ftadd@f1+2,7,c
  2937  000DA2  8E3D               	bsf	___ftadd@sign,7,c
  2938  000DA4  BE39               	btfsc	___ftadd@f2+2,7,c
  2939  000DA6  8C3D               	bsf	___ftadd@sign,6,c
  2940  000DA8  8E35               	bsf	___ftadd@f1+1,7,c
  2941  000DAA  0EFF               	movlw	255
  2942  000DAC  1634               	andwf	___ftadd@f1,f,c
  2943  000DAE  0EFF               	movlw	255
  2944  000DB0  1635               	andwf	___ftadd@f1+1,f,c
  2945  000DB2  0E00               	movlw	0
  2946  000DB4  1636               	andwf	___ftadd@f1+2,f,c
  2947  000DB6  8E38               	bsf	___ftadd@f2+1,7,c
  2948  000DB8  0EFF               	movlw	255
  2949  000DBA  1637               	andwf	___ftadd@f2,f,c
  2950  000DBC  0EFF               	movlw	255
  2951  000DBE  1638               	andwf	___ftadd@f2+1,f,c
  2952  000DC0  0E00               	movlw	0
  2953  000DC2  1639               	andwf	___ftadd@f2+2,f,c
  2954  000DC4  503E               	movf	___ftadd@exp2,w,c
  2955  000DC6  5C3F               	subwf	___ftadd@exp1,w,c
  2956  000DC8  B0D8               	btfsc	status,0,c
  2957  000DCA  D01B               	goto	l684
  2958  000DCC                     u1350:
  2959  000DCC  90D8               	bcf	status,0,c
  2960  000DCE  3637               	rlcf	___ftadd@f2,f,c
  2961  000DD0  3638               	rlcf	___ftadd@f2+1,f,c
  2962  000DD2  3639               	rlcf	___ftadd@f2+2,f,c
  2963  000DD4  063E               	decf	___ftadd@exp2,f,c
  2964  000DD6  503F               	movf	___ftadd@exp1,w,c
  2965  000DD8  183E               	xorwf	___ftadd@exp2,w,c
  2966  000DDA  B4D8               	btfsc	status,2,c
  2967  000DDC  D00D               	goto	l689
  2968  000DDE  063D               	decf	___ftadd@sign,f,c
  2969  000DE0  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  2970  000DE4  0E07               	movlw	7
  2971  000DE6  163A               	andwf	??___ftadd,f,c
  2972  000DE8  B4D8               	btfsc	status,2,c
  2973  000DEA  D006               	goto	l689
  2974  000DEC  D7EF               	goto	u1350
  2975  000DEE  90D8               	bcf	status,0,c
  2976  000DF0  3236               	rrcf	___ftadd@f1+2,f,c
  2977  000DF2  3235               	rrcf	___ftadd@f1+1,f,c
  2978  000DF4  3234               	rrcf	___ftadd@f1,f,c
  2979  000DF6  2A3F               	incf	___ftadd@exp1,f,c
  2980  000DF8                     l689:
  2981  000DF8  503E               	movf	___ftadd@exp2,w,c
  2982  000DFA  183F               	xorwf	___ftadd@exp1,w,c
  2983  000DFC  B4D8               	btfsc	status,2,c
  2984  000DFE  D01F               	goto	u1420
  2985  000E00  D7F6               	goto	l690
  2986  000E02                     l684:
  2987  000E02  503F               	movf	___ftadd@exp1,w,c
  2988  000E04  5C3E               	subwf	___ftadd@exp2,w,c
  2989  000E06  B0D8               	btfsc	status,0,c
  2990  000E08  D01A               	goto	u1420
  2991  000E0A                     u1390:
  2992  000E0A  90D8               	bcf	status,0,c
  2993  000E0C  3634               	rlcf	___ftadd@f1,f,c
  2994  000E0E  3635               	rlcf	___ftadd@f1+1,f,c
  2995  000E10  3636               	rlcf	___ftadd@f1+2,f,c
  2996  000E12  063F               	decf	___ftadd@exp1,f,c
  2997  000E14  503F               	movf	___ftadd@exp1,w,c
  2998  000E16  183E               	xorwf	___ftadd@exp2,w,c
  2999  000E18  B4D8               	btfsc	status,2,c
  3000  000E1A  D00D               	goto	l698
  3001  000E1C  063D               	decf	___ftadd@sign,f,c
  3002  000E1E  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  3003  000E22  0E07               	movlw	7
  3004  000E24  163A               	andwf	??___ftadd,f,c
  3005  000E26  B4D8               	btfsc	status,2,c
  3006  000E28  D006               	goto	l698
  3007  000E2A  D7EF               	goto	u1390
  3008  000E2C  90D8               	bcf	status,0,c
  3009  000E2E  3239               	rrcf	___ftadd@f2+2,f,c
  3010  000E30  3238               	rrcf	___ftadd@f2+1,f,c
  3011  000E32  3237               	rrcf	___ftadd@f2,f,c
  3012  000E34  2A3E               	incf	___ftadd@exp2,f,c
  3013  000E36                     l698:
  3014  000E36  503E               	movf	___ftadd@exp2,w,c
  3015  000E38  183F               	xorwf	___ftadd@exp1,w,c
  3016  000E3A  A4D8               	btfss	status,2,c
  3017  000E3C  D7F7               	goto	l699
  3018  000E3E                     u1420:
  3019  000E3E  AE3D               	btfss	___ftadd@sign,7,c
  3020  000E40  D00C               	goto	l701
  3021  000E42  0EFF               	movlw	255
  3022  000E44  1A34               	xorwf	___ftadd@f1,f,c
  3023  000E46  0EFF               	movlw	255
  3024  000E48  1A35               	xorwf	___ftadd@f1+1,f,c
  3025  000E4A  0EFF               	movlw	255
  3026  000E4C  1A36               	xorwf	___ftadd@f1+2,f,c
  3027  000E4E  0E01               	movlw	1
  3028  000E50  2634               	addwf	___ftadd@f1,f,c
  3029  000E52  0E00               	movlw	0
  3030  000E54  2235               	addwfc	___ftadd@f1+1,f,c
  3031  000E56  0E00               	movlw	0
  3032  000E58  2236               	addwfc	___ftadd@f1+2,f,c
  3033  000E5A                     l701:
  3034  000E5A  AC3D               	btfss	___ftadd@sign,6,c
  3035  000E5C  D00C               	goto	l702
  3036  000E5E  0EFF               	movlw	255
  3037  000E60  1A37               	xorwf	___ftadd@f2,f,c
  3038  000E62  0EFF               	movlw	255
  3039  000E64  1A38               	xorwf	___ftadd@f2+1,f,c
  3040  000E66  0EFF               	movlw	255
  3041  000E68  1A39               	xorwf	___ftadd@f2+2,f,c
  3042  000E6A  0E01               	movlw	1
  3043  000E6C  2637               	addwf	___ftadd@f2,f,c
  3044  000E6E  0E00               	movlw	0
  3045  000E70  2238               	addwfc	___ftadd@f2+1,f,c
  3046  000E72  0E00               	movlw	0
  3047  000E74  2239               	addwfc	___ftadd@f2+2,f,c
  3048  000E76                     l702:
  3049  000E76  0E00               	movlw	0
  3050  000E78  6E3D               	movwf	___ftadd@sign,c
  3051  000E7A  5034               	movf	___ftadd@f1,w,c
  3052  000E7C  2637               	addwf	___ftadd@f2,f,c
  3053  000E7E  5035               	movf	___ftadd@f1+1,w,c
  3054  000E80  2238               	addwfc	___ftadd@f2+1,f,c
  3055  000E82  5036               	movf	___ftadd@f1+2,w,c
  3056  000E84  2239               	addwfc	___ftadd@f2+2,f,c
  3057  000E86  AE39               	btfss	___ftadd@f2+2,7,c
  3058  000E88  D00E               	goto	l703
  3059  000E8A  0EFF               	movlw	255
  3060  000E8C  1A37               	xorwf	___ftadd@f2,f,c
  3061  000E8E  0EFF               	movlw	255
  3062  000E90  1A38               	xorwf	___ftadd@f2+1,f,c
  3063  000E92  0EFF               	movlw	255
  3064  000E94  1A39               	xorwf	___ftadd@f2+2,f,c
  3065  000E96  0E01               	movlw	1
  3066  000E98  2637               	addwf	___ftadd@f2,f,c
  3067  000E9A  0E00               	movlw	0
  3068  000E9C  2238               	addwfc	___ftadd@f2+1,f,c
  3069  000E9E  0E00               	movlw	0
  3070  000EA0  2239               	addwfc	___ftadd@f2+2,f,c
  3071  000EA2  0E01               	movlw	1
  3072  000EA4  6E3D               	movwf	___ftadd@sign,c
  3073  000EA6                     l703:
  3074  000EA6  C037  F001         	movff	___ftadd@f2,___ftpack@arg
  3075  000EAA  C038  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  3076  000EAE  C039  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  3077  000EB2  C03F  F004         	movff	___ftadd@exp1,___ftpack@exp
  3078  000EB6  C03D  F005         	movff	___ftadd@sign,___ftpack@sign
  3079  000EBA  ECCE  F009         	call	___ftpack	;wreg free
  3080  000EBE  C001  F034         	movff	?___ftpack,?___ftadd
  3081  000EC2  C002  F035         	movff	?___ftpack+1,?___ftadd+1
  3082  000EC6  C003  F036         	movff	?___ftpack+2,?___ftadd+2
  3083  000ECA  0012               	return	
  3084  000ECC                     __end_of___ftadd:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           indf0	equ	0xFEF
  3091                           postinc0	equ	0xFEE
  3092                           fsr0h	equ	0xFEA
  3093                           fsr0l	equ	0xFE9
  3094                           wreg	equ	0xFE8
  3095                           postdec1	equ	0xFE5
  3096                           fsr1l	equ	0xFE1
  3097                           indf2	equ	0xFDF
  3098                           fsr2h	equ	0xFDA
  3099                           fsr2l	equ	0xFD9
  3100                           status	equ	0xFD8
  3101                           
  3102 ;; *************** function ___altoft *****************
  3103 ;; Defined at:
  3104 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;  c               4    8[COMRAM] long 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;  sign            1   17[COMRAM] unsigned char 
  3109 ;;  exp             1   16[COMRAM] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  3    8[COMRAM] float 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2, status,0, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3119 ;;      Params:         4       0       0       0       0       0       0       0       0
  3120 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3121 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3122 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3123 ;;Total ram usage:       10 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    1
  3126 ;; This function calls:
  3127 ;;		___ftpack
  3128 ;; This function is called by:
  3129 ;;		_main
  3130 ;;		_calibrate
  3131 ;;		_EEPROMReadDouble
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           	psect	text12
  3136  001574                     __ptext12:
  3137                           	opt stack 0
  3138  001574                     ___altoft:
  3139                           	opt stack 28
  3140                           
  3141                           ;incstack = 0
  3142  001574  0E00               	movlw	0
  3143  001576  6E12               	movwf	___altoft@sign,c
  3144  001578  0E8E               	movlw	142
  3145  00157A  6E11               	movwf	___altoft@exp,c
  3146  00157C  AE0C               	btfss	___altoft@c+3,7,c
  3147  00157E  D011               	goto	l514
  3148  001580  1E0C               	comf	___altoft@c+3,f,c
  3149  001582  1E0B               	comf	___altoft@c+2,f,c
  3150  001584  1E0A               	comf	___altoft@c+1,f,c
  3151  001586  6C09               	negf	___altoft@c,c
  3152  001588  0E00               	movlw	0
  3153  00158A  220A               	addwfc	___altoft@c+1,f,c
  3154  00158C  220B               	addwfc	___altoft@c+2,f,c
  3155  00158E  220C               	addwfc	___altoft@c+3,f,c
  3156  001590  0E01               	movlw	1
  3157  001592  6E12               	movwf	___altoft@sign,c
  3158  001594  D006               	goto	l514
  3159  001596  90D8               	bcf	status,0,c
  3160  001598  320C               	rrcf	___altoft@c+3,f,c
  3161  00159A  320B               	rrcf	___altoft@c+2,f,c
  3162  00159C  320A               	rrcf	___altoft@c+1,f,c
  3163  00159E  3209               	rrcf	___altoft@c,f,c
  3164  0015A0  2A11               	incf	___altoft@exp,f,c
  3165  0015A2                     l514:
  3166  0015A2  0E00               	movlw	0
  3167  0015A4  1409               	andwf	___altoft@c,w,c
  3168  0015A6  6E0D               	movwf	??___altoft& (0+255),c
  3169  0015A8  0E00               	movlw	0
  3170  0015AA  140A               	andwf	___altoft@c+1,w,c
  3171  0015AC  6E0E               	movwf	(??___altoft+1)& (0+255),c
  3172  0015AE  0E00               	movlw	0
  3173  0015B0  140B               	andwf	___altoft@c+2,w,c
  3174  0015B2  6E0F               	movwf	(??___altoft+2)& (0+255),c
  3175  0015B4  0EFF               	movlw	255
  3176  0015B6  140C               	andwf	___altoft@c+3,w,c
  3177  0015B8  6E10               	movwf	(??___altoft+3)& (0+255),c
  3178  0015BA  500D               	movf	??___altoft,w,c
  3179  0015BC  100E               	iorwf	??___altoft+1,w,c
  3180  0015BE  100F               	iorwf	??___altoft+2,w,c
  3181  0015C0  1010               	iorwf	??___altoft+3,w,c
  3182  0015C2  A4D8               	btfss	status,2,c
  3183  0015C4  D7E8               	goto	l515
  3184  0015C6  C009  F001         	movff	___altoft@c,___ftpack@arg
  3185  0015CA  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3186  0015CE  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3187  0015D2  C011  F004         	movff	___altoft@exp,___ftpack@exp
  3188  0015D6  C012  F005         	movff	___altoft@sign,___ftpack@sign
  3189  0015DA  ECCE  F009         	call	___ftpack	;wreg free
  3190  0015DE  C001  F009         	movff	?___ftpack,?___altoft
  3191  0015E2  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  3192  0015E6  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  3193  0015EA  0012               	return	
  3194  0015EC                     __end_of___altoft:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           indf0	equ	0xFEF
  3201                           postinc0	equ	0xFEE
  3202                           fsr0h	equ	0xFEA
  3203                           fsr0l	equ	0xFE9
  3204                           wreg	equ	0xFE8
  3205                           postdec1	equ	0xFE5
  3206                           fsr1l	equ	0xFE1
  3207                           indf2	equ	0xFDF
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _ReadCount *****************
  3213 ;; Defined at:
  3214 ;;		line 186 in file "newmain.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;		None
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  Count           4    5[COMRAM] unsigned long 
  3219 ;;  i               1    4[COMRAM] unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  4    0[COMRAM] unsigned long 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3229 ;;      Params:         4       0       0       0       0       0       0       0       0
  3230 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3232 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3233 ;;Total ram usage:        9 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; This function calls:
  3236 ;;		Nothing
  3237 ;; This function is called by:
  3238 ;;		_main
  3239 ;;		_calibrate
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           	psect	text13
  3244  0014F6                     __ptext13:
  3245                           	opt stack 0
  3246  0014F6                     _ReadCount:
  3247                           	opt stack 29
  3248                           
  3249                           ;newmain.c: 188: unsigned long Count;
  3250                           ;newmain.c: 189: unsigned char i;
  3251                           ;newmain.c: 190: TRISAbits.RA5 = 0 ;
  3252                           
  3253                           ;incstack = 0
  3254  0014F6  9A92               	bcf	3986,5,c	;volatile
  3255                           
  3256                           ;newmain.c: 191: LATAbits.LA5 = 1;
  3257  0014F8  8A89               	bsf	3977,5,c	;volatile
  3258                           
  3259                           ;newmain.c: 192: LATAbits.LA4 = 0;
  3260  0014FA  9889               	bcf	3977,4,c	;volatile
  3261                           
  3262                           ;newmain.c: 193: TRISAbits.RA5 = 1;
  3263  0014FC  8A92               	bsf	3986,5,c	;volatile
  3264                           
  3265                           ;newmain.c: 194: Count = 0;
  3266  0014FE  0E00               	movlw	0
  3267  001500  6E06               	movwf	ReadCount@Count,c
  3268  001502  0E00               	movlw	0
  3269  001504  6E07               	movwf	ReadCount@Count+1,c
  3270  001506  0E00               	movlw	0
  3271  001508  6E08               	movwf	ReadCount@Count+2,c
  3272  00150A  0E00               	movlw	0
  3273  00150C  6E09               	movwf	ReadCount@Count+3,c
  3274  00150E  BA80               	btfsc	3968,5,c	;volatile
  3275  001510  D7FE               	goto	l159
  3276                           
  3277                           ;newmain.c: 196: for (i = 0; i < 24; i++) {
  3278  001512  0E00               	movlw	0
  3279  001514  6E05               	movwf	ReadCount@i,c
  3280  001516  D014               	goto	l2381
  3281  001518                     l161:
  3282                           
  3283                           ;newmain.c: 197: LATAbits.LA4 = 1;
  3284  001518  8889               	bsf	3977,4,c	;volatile
  3285                           
  3286                           ;newmain.c: 198: Count = Count << 1;
  3287  00151A  90D8               	bcf	status,0,c
  3288  00151C  3406               	rlcf	ReadCount@Count,w,c
  3289  00151E  6E06               	movwf	ReadCount@Count,c
  3290  001520  3407               	rlcf	ReadCount@Count+1,w,c
  3291  001522  6E07               	movwf	ReadCount@Count+1,c
  3292  001524  3408               	rlcf	ReadCount@Count+2,w,c
  3293  001526  6E08               	movwf	ReadCount@Count+2,c
  3294  001528  3409               	rlcf	ReadCount@Count+3,w,c
  3295  00152A  6E09               	movwf	ReadCount@Count+3,c
  3296                           
  3297                           ;newmain.c: 199: LATAbits.LA4 = 0;
  3298  00152C  9889               	bcf	3977,4,c	;volatile
  3299                           
  3300                           ;newmain.c: 200: if (PORTAbits.RA5) Count++;
  3301  00152E  AA80               	btfss	3968,5,c	;volatile
  3302  001530  D006               	goto	l163
  3303  001532  0E01               	movlw	1
  3304  001534  2606               	addwf	ReadCount@Count,f,c
  3305  001536  0E00               	movlw	0
  3306  001538  2207               	addwfc	ReadCount@Count+1,f,c
  3307  00153A  2208               	addwfc	ReadCount@Count+2,f,c
  3308  00153C  2209               	addwfc	ReadCount@Count+3,f,c
  3309  00153E                     l163:
  3310  00153E  2A05               	incf	ReadCount@i,f,c
  3311  001540                     l2381:
  3312  001540  0E17               	movlw	23
  3313  001542  6405               	cpfsgt	ReadCount@i,c
  3314  001544  D7E9               	goto	l161
  3315                           
  3316                           ;newmain.c: 201: }
  3317                           ;newmain.c: 202: LATAbits.LA4 = 1;
  3318  001546  8889               	bsf	3977,4,c	;volatile
  3319                           
  3320                           ;newmain.c: 203: Count = Count ^ 0x800000;
  3321  001548  0E00               	movlw	0
  3322  00154A  1806               	xorwf	ReadCount@Count,w,c
  3323  00154C  6E06               	movwf	ReadCount@Count,c
  3324  00154E  0E00               	movlw	0
  3325  001550  1807               	xorwf	ReadCount@Count+1,w,c
  3326  001552  6E07               	movwf	ReadCount@Count+1,c
  3327  001554  0E80               	movlw	128
  3328  001556  1808               	xorwf	ReadCount@Count+2,w,c
  3329  001558  6E08               	movwf	ReadCount@Count+2,c
  3330  00155A  0E00               	movlw	0
  3331  00155C  1809               	xorwf	ReadCount@Count+3,w,c
  3332  00155E  6E09               	movwf	ReadCount@Count+3,c
  3333                           
  3334                           ;newmain.c: 204: LATAbits.LA4 = 0;
  3335  001560  9889               	bcf	3977,4,c	;volatile
  3336                           
  3337                           ;newmain.c: 205: return (Count);
  3338  001562  C006  F001         	movff	ReadCount@Count,?_ReadCount
  3339  001566  C007  F002         	movff	ReadCount@Count+1,?_ReadCount+1
  3340  00156A  C008  F003         	movff	ReadCount@Count+2,?_ReadCount+2
  3341  00156E  C009  F004         	movff	ReadCount@Count+3,?_ReadCount+3
  3342  001572  0012               	return	
  3343  001574                     __end_of_ReadCount:
  3344                           	opt stack 0
  3345                           tblptru	equ	0xFF8
  3346                           tblptrh	equ	0xFF7
  3347                           tblptrl	equ	0xFF6
  3348                           tablat	equ	0xFF5
  3349                           indf0	equ	0xFEF
  3350                           postinc0	equ	0xFEE
  3351                           fsr0h	equ	0xFEA
  3352                           fsr0l	equ	0xFE9
  3353                           wreg	equ	0xFE8
  3354                           postdec1	equ	0xFE5
  3355                           fsr1l	equ	0xFE1
  3356                           indf2	equ	0xFDF
  3357                           fsr2h	equ	0xFDA
  3358                           fsr2l	equ	0xFD9
  3359                           status	equ	0xFD8
  3360                           
  3361 ;; *************** function _MSdelay *****************
  3362 ;; Defined at:
  3363 ;;		line 2 in file "delay.c"
  3364 ;; Parameters:    Size  Location     Type
  3365 ;;  val             2    0[COMRAM] unsigned int 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;  j               2    4[COMRAM] unsigned int 
  3368 ;;  i               2    2[COMRAM] unsigned int 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3378 ;;      Params:         2       0       0       0       0       0       0       0       0
  3379 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3381 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3382 ;;Total ram usage:        6 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_main
  3388 ;;		_calibrate
  3389 ;;		_init
  3390 ;;		_I2CStart
  3391 ;;		_I2CRestart
  3392 ;;		_I2CStop
  3393 ;;		_bit_out
  3394 ;;		_LCD_Init
  3395 ;;		_LCD_Command
  3396 ;;		_LCD_Char
  3397 ;;		_LCD_Clear
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text14
  3402  00176A                     __ptext14:
  3403                           	opt stack 0
  3404  00176A                     _MSdelay:
  3405                           	opt stack 29
  3406                           
  3407                           ;delay.c: 4: unsigned int i,j;
  3408                           ;delay.c: 5: for(i=0;i<val;i++)
  3409                           
  3410                           ;incstack = 0
  3411  00176A  0E00               	movlw	0
  3412  00176C  6E04               	movwf	MSdelay@i+1,c
  3413  00176E  0E00               	movlw	0
  3414  001770  6E03               	movwf	MSdelay@i,c
  3415  001772  D00F               	goto	l293
  3416  001774                     
  3417                           ;delay.c: 6: for(j=0;j<165;j++);
  3418  001774  0E00               	movlw	0
  3419  001776  6E06               	movwf	MSdelay@j+1,c
  3420  001778  0E00               	movlw	0
  3421  00177A  6E05               	movwf	MSdelay@j,c
  3422  00177C                     l2333:
  3423  00177C  5006               	movf	MSdelay@j+1,w,c
  3424  00177E  E107               	bnz	l2341
  3425  001780  0EA5               	movlw	165
  3426  001782  5C05               	subwf	MSdelay@j,w,c
  3427  001784  B0D8               	btfsc	status,0,c
  3428  001786  D003               	goto	u1610
  3429  001788  4A05               	infsnz	MSdelay@j,f,c
  3430  00178A  2A06               	incf	MSdelay@j+1,f,c
  3431  00178C  D7F7               	goto	l2333
  3432  00178E                     u1610:
  3433  00178E                     l2341:
  3434  00178E  4A03               	infsnz	MSdelay@i,f,c
  3435  001790  2A04               	incf	MSdelay@i+1,f,c
  3436  001792                     l293:
  3437  001792  5001               	movf	MSdelay@val,w,c
  3438  001794  5C03               	subwf	MSdelay@i,w,c
  3439  001796  5002               	movf	MSdelay@val+1,w,c
  3440  001798  5804               	subwfb	MSdelay@i+1,w,c
  3441  00179A  A0D8               	btfss	status,0,c
  3442  00179C  D7EB               	goto	l294
  3443                           
  3444                           ;delay.c: 7: {
  3445                           ;delay.c: 8: __nop();
  3446  00179E  F000               	nop	
  3447                           
  3448                           ;delay.c: 9: __nop();
  3449  0017A0  F000               	nop	
  3450  0017A2  0012               	return		;funcret
  3451  0017A4                     __end_of_MSdelay:
  3452                           	opt stack 0
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           indf0	equ	0xFEF
  3458                           postinc0	equ	0xFEE
  3459                           fsr0h	equ	0xFEA
  3460                           fsr0l	equ	0xFE9
  3461                           wreg	equ	0xFE8
  3462                           postdec1	equ	0xFE5
  3463                           fsr1l	equ	0xFE1
  3464                           indf2	equ	0xFDF
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function ___ftneg *****************
  3470 ;; Defined at:
  3471 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;  f1              3   48[COMRAM] float 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  3   48[COMRAM] float 
  3478 ;; Registers used:
  3479 ;;		wreg, status,2, status,0
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3485 ;;      Params:         3       0       0       0       0       0       0       0       0
  3486 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3488 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3489 ;;Total ram usage:        3 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; This function calls:
  3492 ;;		Nothing
  3493 ;; This function is called by:
  3494 ;;		_main
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           	psect	text15
  3499  0017DC                     __ptext15:
  3500                           	opt stack 0
  3501  0017DC                     ___ftneg:
  3502                           	opt stack 30
  3503                           
  3504                           ;incstack = 0
  3505  0017DC  5031               	movf	___ftneg@f1,w,c
  3506  0017DE  1032               	iorwf	___ftneg@f1+1,w,c
  3507  0017E0  1033               	iorwf	___ftneg@f1+2,w,c
  3508  0017E2  B4D8               	btfsc	status,2,c
  3509  0017E4  D006               	goto	l734
  3510  0017E6  0E00               	movlw	0
  3511  0017E8  1A31               	xorwf	___ftneg@f1,f,c
  3512  0017EA  0E00               	movlw	0
  3513  0017EC  1A32               	xorwf	___ftneg@f1+1,f,c
  3514  0017EE  0E80               	movlw	128
  3515  0017F0  1A33               	xorwf	___ftneg@f1+2,f,c
  3516  0017F2                     l734:
  3517  0017F2  C031  F031         	movff	___ftneg@f1,?___ftneg
  3518  0017F6  C032  F032         	movff	___ftneg@f1+1,?___ftneg+1
  3519  0017FA  C033  F033         	movff	___ftneg@f1+2,?___ftneg+2
  3520  0017FE  0012               	return		;funcret
  3521  001800                     __end_of___ftneg:
  3522                           	opt stack 0
  3523                           tblptru	equ	0xFF8
  3524                           tblptrh	equ	0xFF7
  3525                           tblptrl	equ	0xFF6
  3526                           tablat	equ	0xFF5
  3527                           indf0	equ	0xFEF
  3528                           postinc0	equ	0xFEE
  3529                           fsr0h	equ	0xFEA
  3530                           fsr0l	equ	0xFE9
  3531                           wreg	equ	0xFE8
  3532                           postdec1	equ	0xFE5
  3533                           fsr1l	equ	0xFE1
  3534                           indf2	equ	0xFDF
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function ___ftmul *****************
  3540 ;; Defined at:
  3541 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  f1              3   33[COMRAM] float 
  3544 ;;  f2              3   36[COMRAM] float 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  f3_as_produc    3   43[COMRAM] unsigned um
  3547 ;;  sign            1   47[COMRAM] unsigned char 
  3548 ;;  cntr            1   46[COMRAM] unsigned char 
  3549 ;;  exp             1   42[COMRAM] unsigned char 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  3   33[COMRAM] float 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3559 ;;      Params:         6       0       0       0       0       0       0       0       0
  3560 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3561 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3562 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3563 ;;Total ram usage:       15 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    1
  3566 ;; This function calls:
  3567 ;;		___ftpack
  3568 ;; This function is called by:
  3569 ;;		_main
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text16
  3574  0010F6                     __ptext16:
  3575                           	opt stack 0
  3576  0010F6                     ___ftmul:
  3577                           	opt stack 29
  3578                           
  3579                           ;incstack = 0
  3580  0010F6  C024  F028         	movff	___ftmul@f1+2,??___ftmul
  3581  0010FA  6A29               	clrf	(??___ftmul+1)& (0+255),c
  3582  0010FC  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  3583  0010FE  3423               	rlcf	___ftmul@f1+1,w,c
  3584  001100  3628               	rlcf	??___ftmul& (0+255),f,c
  3585  001102  E301               	bnc	u1871
  3586  001104  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  3587  001106                     u1871:
  3588  001106  5028               	movf	??___ftmul,w,c
  3589  001108  6E2B               	movwf	___ftmul@exp,c
  3590  00110A  502B               	movf	___ftmul@exp,w,c
  3591  00110C  A4D8               	btfss	status,2,c
  3592  00110E  D007               	goto	l723
  3593  001110  0E00               	movlw	0
  3594  001112  6E22               	movwf	?___ftmul,c
  3595  001114  0E00               	movlw	0
  3596  001116  6E23               	movwf	?___ftmul+1,c
  3597  001118  0E00               	movlw	0
  3598  00111A  6E24               	movwf	?___ftmul+2,c
  3599  00111C  0012               	return	
  3600  00111E                     l723:
  3601  00111E  C027  F028         	movff	___ftmul@f2+2,??___ftmul
  3602  001122  6A29               	clrf	(??___ftmul+1)& (0+255),c
  3603  001124  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  3604  001126  3426               	rlcf	___ftmul@f2+1,w,c
  3605  001128  3628               	rlcf	??___ftmul& (0+255),f,c
  3606  00112A  E301               	bnc	u1891
  3607  00112C  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  3608  00112E                     u1891:
  3609  00112E  5028               	movf	??___ftmul,w,c
  3610  001130  6E30               	movwf	___ftmul@sign,c
  3611  001132  5030               	movf	___ftmul@sign,w,c
  3612  001134  A4D8               	btfss	status,2,c
  3613  001136  D007               	goto	l725
  3614  001138  0E00               	movlw	0
  3615  00113A  6E22               	movwf	?___ftmul,c
  3616  00113C  0E00               	movlw	0
  3617  00113E  6E23               	movwf	?___ftmul+1,c
  3618  001140  0E00               	movlw	0
  3619  001142  6E24               	movwf	?___ftmul+2,c
  3620  001144  0012               	return	
  3621  001146                     l725:
  3622  001146  5030               	movf	___ftmul@sign,w,c
  3623  001148  0F7B               	addlw	123
  3624  00114A  262B               	addwf	___ftmul@exp,f,c
  3625  00114C  C024  F030         	movff	___ftmul@f1+2,___ftmul@sign
  3626  001150  5027               	movf	___ftmul@f2+2,w,c
  3627  001152  1A30               	xorwf	___ftmul@sign,f,c
  3628  001154  0E80               	movlw	128
  3629  001156  1630               	andwf	___ftmul@sign,f,c
  3630  001158  8E23               	bsf	___ftmul@f1+1,7,c
  3631  00115A  8E26               	bsf	___ftmul@f2+1,7,c
  3632  00115C  0EFF               	movlw	255
  3633  00115E  1625               	andwf	___ftmul@f2,f,c
  3634  001160  0EFF               	movlw	255
  3635  001162  1626               	andwf	___ftmul@f2+1,f,c
  3636  001164  0E00               	movlw	0
  3637  001166  1627               	andwf	___ftmul@f2+2,f,c
  3638  001168  0E00               	movlw	0
  3639  00116A  6E2C               	movwf	___ftmul@f3_as_product,c
  3640  00116C  0E00               	movlw	0
  3641  00116E  6E2D               	movwf	___ftmul@f3_as_product+1,c
  3642  001170  0E00               	movlw	0
  3643  001172  6E2E               	movwf	___ftmul@f3_as_product+2,c
  3644  001174  0E07               	movlw	7
  3645  001176  6E2F               	movwf	___ftmul@cntr,c
  3646  001178  A022               	btfss	___ftmul@f1,0,c
  3647  00117A  D006               	goto	l727
  3648  00117C  5025               	movf	___ftmul@f2,w,c
  3649  00117E  262C               	addwf	___ftmul@f3_as_product,f,c
  3650  001180  5026               	movf	___ftmul@f2+1,w,c
  3651  001182  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  3652  001184  5027               	movf	___ftmul@f2+2,w,c
  3653  001186  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  3654  001188                     l727:
  3655  001188  90D8               	bcf	status,0,c
  3656  00118A  3224               	rrcf	___ftmul@f1+2,f,c
  3657  00118C  3223               	rrcf	___ftmul@f1+1,f,c
  3658  00118E  3222               	rrcf	___ftmul@f1,f,c
  3659  001190  90D8               	bcf	status,0,c
  3660  001192  3625               	rlcf	___ftmul@f2,f,c
  3661  001194  3626               	rlcf	___ftmul@f2+1,f,c
  3662  001196  3627               	rlcf	___ftmul@f2+2,f,c
  3663  001198  2E2F               	decfsz	___ftmul@cntr,f,c
  3664  00119A  D7EE               	goto	l726
  3665  00119C  0E09               	movlw	9
  3666  00119E  6E2F               	movwf	___ftmul@cntr,c
  3667  0011A0  A022               	btfss	___ftmul@f1,0,c
  3668  0011A2  D006               	goto	l730
  3669  0011A4  5025               	movf	___ftmul@f2,w,c
  3670  0011A6  262C               	addwf	___ftmul@f3_as_product,f,c
  3671  0011A8  5026               	movf	___ftmul@f2+1,w,c
  3672  0011AA  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  3673  0011AC  5027               	movf	___ftmul@f2+2,w,c
  3674  0011AE  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  3675  0011B0                     l730:
  3676  0011B0  90D8               	bcf	status,0,c
  3677  0011B2  3224               	rrcf	___ftmul@f1+2,f,c
  3678  0011B4  3223               	rrcf	___ftmul@f1+1,f,c
  3679  0011B6  3222               	rrcf	___ftmul@f1,f,c
  3680  0011B8  90D8               	bcf	status,0,c
  3681  0011BA  322E               	rrcf	___ftmul@f3_as_product+2,f,c
  3682  0011BC  322D               	rrcf	___ftmul@f3_as_product+1,f,c
  3683  0011BE  322C               	rrcf	___ftmul@f3_as_product,f,c
  3684  0011C0  2E2F               	decfsz	___ftmul@cntr,f,c
  3685  0011C2  D7EE               	goto	l729
  3686  0011C4  C02C  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3687  0011C8  C02D  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3688  0011CC  C02E  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3689  0011D0  C02B  F004         	movff	___ftmul@exp,___ftpack@exp
  3690  0011D4  C030  F005         	movff	___ftmul@sign,___ftpack@sign
  3691  0011D8  ECCE  F009         	call	___ftpack	;wreg free
  3692  0011DC  C001  F022         	movff	?___ftpack,?___ftmul
  3693  0011E0  C002  F023         	movff	?___ftpack+1,?___ftmul+1
  3694  0011E4  C003  F024         	movff	?___ftpack+2,?___ftmul+2
  3695  0011E8  0012               	return	
  3696  0011EA                     __end_of___ftmul:
  3697                           	opt stack 0
  3698                           tblptru	equ	0xFF8
  3699                           tblptrh	equ	0xFF7
  3700                           tblptrl	equ	0xFF6
  3701                           tablat	equ	0xFF5
  3702                           indf0	equ	0xFEF
  3703                           postinc0	equ	0xFEE
  3704                           fsr0h	equ	0xFEA
  3705                           fsr0l	equ	0xFE9
  3706                           wreg	equ	0xFE8
  3707                           postdec1	equ	0xFE5
  3708                           fsr1l	equ	0xFE1
  3709                           indf2	equ	0xFDF
  3710                           fsr2h	equ	0xFDA
  3711                           fsr2l	equ	0xFD9
  3712                           status	equ	0xFD8
  3713                           
  3714 ;; *************** function ___ftpack *****************
  3715 ;; Defined at:
  3716 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  arg             3    0[COMRAM] unsigned um
  3719 ;;  exp             1    3[COMRAM] unsigned char 
  3720 ;;  sign            1    4[COMRAM] unsigned char 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;		None
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  3    0[COMRAM] float 
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3732 ;;      Params:         5       0       0       0       0       0       0       0       0
  3733 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3734 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3735 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3736 ;;Total ram usage:        8 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; This function calls:
  3739 ;;		Nothing
  3740 ;; This function is called by:
  3741 ;;		___altoft
  3742 ;;		___awtoft
  3743 ;;		___ftadd
  3744 ;;		___ftdiv
  3745 ;;		___ftmul
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           	psect	text17
  3750  00139C                     __ptext17:
  3751                           	opt stack 0
  3752  00139C                     ___ftpack:
  3753                           	opt stack 27
  3754                           
  3755                           ;incstack = 0
  3756  00139C  5004               	movf	___ftpack@exp,w,c
  3757  00139E  B4D8               	btfsc	status,2,c
  3758  0013A0  D005               	goto	u1050
  3759  0013A2  5001               	movf	___ftpack@arg,w,c
  3760  0013A4  1002               	iorwf	___ftpack@arg+1,w,c
  3761  0013A6  1003               	iorwf	___ftpack@arg+2,w,c
  3762  0013A8  A4D8               	btfss	status,2,c
  3763  0013AA  D00C               	goto	l644
  3764  0013AC                     u1050:
  3765  0013AC  0E00               	movlw	0
  3766  0013AE  6E01               	movwf	?___ftpack,c
  3767  0013B0  0E00               	movlw	0
  3768  0013B2  6E02               	movwf	?___ftpack+1,c
  3769  0013B4  0E00               	movlw	0
  3770  0013B6  6E03               	movwf	?___ftpack+2,c
  3771  0013B8  0012               	return	
  3772  0013BA  2A04               	incf	___ftpack@exp,f,c
  3773  0013BC  90D8               	bcf	status,0,c
  3774  0013BE  3203               	rrcf	___ftpack@arg+2,f,c
  3775  0013C0  3202               	rrcf	___ftpack@arg+1,f,c
  3776  0013C2  3201               	rrcf	___ftpack@arg,f,c
  3777  0013C4                     l644:
  3778  0013C4  0E00               	movlw	0
  3779  0013C6  1401               	andwf	___ftpack@arg,w,c
  3780  0013C8  6E06               	movwf	??___ftpack& (0+255),c
  3781  0013CA  0E00               	movlw	0
  3782  0013CC  1402               	andwf	___ftpack@arg+1,w,c
  3783  0013CE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3784  0013D0  0EFE               	movlw	254
  3785  0013D2  1403               	andwf	___ftpack@arg+2,w,c
  3786  0013D4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3787  0013D6  5006               	movf	??___ftpack,w,c
  3788  0013D8  1007               	iorwf	??___ftpack+1,w,c
  3789  0013DA  1008               	iorwf	??___ftpack+2,w,c
  3790  0013DC  B4D8               	btfsc	status,2,c
  3791  0013DE  D00C               	goto	l647
  3792  0013E0  D7EC               	goto	l645
  3793  0013E2  2A04               	incf	___ftpack@exp,f,c
  3794  0013E4  0E01               	movlw	1
  3795  0013E6  2601               	addwf	___ftpack@arg,f,c
  3796  0013E8  0E00               	movlw	0
  3797  0013EA  2202               	addwfc	___ftpack@arg+1,f,c
  3798  0013EC  0E00               	movlw	0
  3799  0013EE  2203               	addwfc	___ftpack@arg+2,f,c
  3800  0013F0  90D8               	bcf	status,0,c
  3801  0013F2  3203               	rrcf	___ftpack@arg+2,f,c
  3802  0013F4  3202               	rrcf	___ftpack@arg+1,f,c
  3803  0013F6  3201               	rrcf	___ftpack@arg,f,c
  3804  0013F8                     l647:
  3805  0013F8  0E00               	movlw	0
  3806  0013FA  1401               	andwf	___ftpack@arg,w,c
  3807  0013FC  6E06               	movwf	??___ftpack& (0+255),c
  3808  0013FE  0E00               	movlw	0
  3809  001400  1402               	andwf	___ftpack@arg+1,w,c
  3810  001402  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3811  001404  0EFF               	movlw	255
  3812  001406  1403               	andwf	___ftpack@arg+2,w,c
  3813  001408  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3814  00140A  5006               	movf	??___ftpack,w,c
  3815  00140C  1007               	iorwf	??___ftpack+1,w,c
  3816  00140E  1008               	iorwf	??___ftpack+2,w,c
  3817  001410  B4D8               	btfsc	status,2,c
  3818  001412  D006               	goto	l650
  3819  001414  D7E6               	goto	l648
  3820  001416  0604               	decf	___ftpack@exp,f,c
  3821  001418  90D8               	bcf	status,0,c
  3822  00141A  3601               	rlcf	___ftpack@arg,f,c
  3823  00141C  3602               	rlcf	___ftpack@arg+1,f,c
  3824  00141E  3603               	rlcf	___ftpack@arg+2,f,c
  3825  001420                     l650:
  3826  001420  BE02               	btfsc	___ftpack@arg+1,7,c
  3827  001422  D003               	goto	u1090
  3828  001424  0E02               	movlw	2
  3829  001426  6004               	cpfslt	___ftpack@exp,c
  3830  001428  D7F6               	goto	l651
  3831  00142A                     u1090:
  3832  00142A  A004               	btfss	___ftpack@exp,0,c
  3833  00142C  9E02               	bcf	___ftpack@arg+1,7,c
  3834  00142E  90D8               	bcf	status,0,c
  3835  001430  3204               	rrcf	___ftpack@exp,f,c
  3836  001432  5004               	movf	___ftpack@exp,w,c
  3837  001434  1203               	iorwf	___ftpack@arg+2,f,c
  3838  001436  5005               	movf	___ftpack@sign,w,c
  3839  001438  A4D8               	btfss	status,2,c
  3840  00143A  8E03               	bsf	___ftpack@arg+2,7,c
  3841  00143C  C001  F001         	movff	___ftpack@arg,?___ftpack
  3842  001440  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  3843  001444  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  3844  001448  0012               	return	
  3845  00144A                     __end_of___ftpack:
  3846                           	opt stack 0
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           indf0	equ	0xFEF
  3852                           postinc0	equ	0xFEE
  3853                           fsr0h	equ	0xFEA
  3854                           fsr0l	equ	0xFE9
  3855                           wreg	equ	0xFE8
  3856                           postdec1	equ	0xFE5
  3857                           fsr1l	equ	0xFE1
  3858                           indf2	equ	0xFDF
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function _USART_newline *****************
  3864 ;; Defined at:
  3865 ;;		line 26 in file "USART.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;		None
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;		None
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      void 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0, cstack
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3879 ;;      Params:         0       0       0       0       0       0       0       0       0
  3880 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3882 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3883 ;;Total ram usage:        0 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    2
  3886 ;; This function calls:
  3887 ;;		_txr
  3888 ;; This function is called by:
  3889 ;;		_main
  3890 ;;		_I2CRead
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           	psect	text18
  3895  00183C                     __ptext18:
  3896                           	opt stack 0
  3897  00183C                     _USART_newline:
  3898                           	opt stack 28
  3899                           
  3900                           ;USART.c: 29: txr(0x0a);
  3901                           
  3902                           ;incstack = 0
  3903  00183C  0E0A               	movlw	10
  3904  00183E  EC12  F00C         	call	_txr
  3905                           
  3906                           ;USART.c: 30: txr(0x0d);
  3907  001842  0E0D               	movlw	13
  3908  001844  EC12  F00C         	call	_txr
  3909  001848  0012               	return		;funcret
  3910  00184A                     __end_of_USART_newline:
  3911                           	opt stack 0
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           indf0	equ	0xFEF
  3917                           postinc0	equ	0xFEE
  3918                           fsr0h	equ	0xFEA
  3919                           fsr0l	equ	0xFE9
  3920                           wreg	equ	0xFE8
  3921                           postdec1	equ	0xFE5
  3922                           fsr1l	equ	0xFE1
  3923                           indf2	equ	0xFDF
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function _txr *****************
  3929 ;; Defined at:
  3930 ;;		line 41 in file "USART.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  temp            1    wreg     unsigned char 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  temp            1    5[COMRAM] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, status,2, status,0, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3944 ;;      Params:         0       0       0       0       0       0       0       0       0
  3945 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3946 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3947 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3948 ;;Total ram usage:        1 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    1
  3951 ;; This function calls:
  3952 ;;		_delay
  3953 ;; This function is called by:
  3954 ;;		_send_string
  3955 ;;		_USART_newline
  3956 ;;		_compute
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text19
  3961  001824                     __ptext19:
  3962                           	opt stack 0
  3963  001824                     _txr:
  3964                           	opt stack 28
  3965                           
  3966                           ;incstack = 0
  3967                           ;txr@temp stored from wreg
  3968  001824  6E06               	movwf	txr@temp,c
  3969  001826                     
  3970                           ;USART.c: 43: while (TXSTAbits.TRMT == 0) {};
  3971  001826  A2AC               	btfss	4012,1,c	;volatile
  3972  001828  D7FE               	goto	l2069
  3973                           
  3974                           ;USART.c: 44: TXREG=temp;
  3975  00182A  C006  FFAD         	movff	txr@temp,4013	;volatile
  3976                           
  3977                           ;USART.c: 45: delay(1000);
  3978  00182E  0E03               	movlw	3
  3979  001830  6E02               	movwf	delay@d+1,c
  3980  001832  0EE8               	movlw	232
  3981  001834  6E01               	movwf	delay@d,c
  3982  001836  EC00  F00C         	call	_delay	;wreg free
  3983  00183A  0012               	return		;funcret
  3984  00183C                     __end_of_txr:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           indf0	equ	0xFEF
  3991                           postinc0	equ	0xFEE
  3992                           fsr0h	equ	0xFEA
  3993                           fsr0l	equ	0xFE9
  3994                           wreg	equ	0xFE8
  3995                           postdec1	equ	0xFE5
  3996                           fsr1l	equ	0xFE1
  3997                           indf2	equ	0xFDF
  3998                           fsr2h	equ	0xFDA
  3999                           fsr2l	equ	0xFD9
  4000                           status	equ	0xFD8
  4001                           
  4002 ;; *************** function _delay *****************
  4003 ;; Defined at:
  4004 ;;		line 32 in file "USART.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;  d               2    0[COMRAM] int 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  i               2    3[COMRAM] int 
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  1    wreg      void 
  4011 ;; Registers used:
  4012 ;;		wreg, status,2, status,0
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4018 ;;      Params:         2       0       0       0       0       0       0       0       0
  4019 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4020 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4021 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4022 ;;Total ram usage:        5 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; This function calls:
  4025 ;;		Nothing
  4026 ;; This function is called by:
  4027 ;;		_txr
  4028 ;;		_bit_in
  4029 ;;		_MCP3421GetValue
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text20
  4034  001800                     __ptext20:
  4035                           	opt stack 0
  4036  001800                     _delay:
  4037                           	opt stack 28
  4038                           
  4039                           ;USART.c: 34: int i;
  4040                           ;USART.c: 35: for(i=0;i<=d;i++)
  4041                           
  4042                           ;incstack = 0
  4043  001800  0E00               	movlw	0
  4044  001802  6E05               	movwf	delay@i+1,c
  4045  001804  0E00               	movlw	0
  4046  001806  6E04               	movwf	delay@i,c
  4047  001808  D002               	goto	l327
  4048  00180A                     
  4049                           ;USART.c: 36: {
  4050  00180A  4A04               	infsnz	delay@i,f,c
  4051  00180C  2A05               	incf	delay@i+1,f,c
  4052  00180E                     l327:
  4053  00180E  5004               	movf	delay@i,w,c
  4054  001810  5C01               	subwf	delay@d,w,c
  4055  001812  5002               	movf	delay@d+1,w,c
  4056  001814  0A80               	xorlw	128
  4057  001816  6E03               	movwf	??_delay& (0+255),c
  4058  001818  5005               	movf	delay@i+1,w,c
  4059  00181A  0A80               	xorlw	128
  4060  00181C  5803               	subwfb	??_delay& (0+255),w,c
  4061  00181E  A0D8               	btfss	status,0,c
  4062  001820  0012               	return	
  4063  001822  D7F3               	goto	l328
  4064  001824                     __end_of_delay:
  4065                           	opt stack 0
  4066                           tblptru	equ	0xFF8
  4067                           tblptrh	equ	0xFF7
  4068                           tblptrl	equ	0xFF6
  4069                           tablat	equ	0xFF5
  4070                           indf0	equ	0xFEF
  4071                           postinc0	equ	0xFEE
  4072                           fsr0h	equ	0xFEA
  4073                           fsr0l	equ	0xFE9
  4074                           wreg	equ	0xFE8
  4075                           postdec1	equ	0xFE5
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           fsr2h	equ	0xFDA
  4079                           fsr2l	equ	0xFD9
  4080                           status	equ	0xFD8
  4081                           tblptru	equ	0xFF8
  4082                           tblptrh	equ	0xFF7
  4083                           tblptrl	equ	0xFF6
  4084                           tablat	equ	0xFF5
  4085                           indf0	equ	0xFEF
  4086                           postinc0	equ	0xFEE
  4087                           fsr0h	equ	0xFEA
  4088                           fsr0l	equ	0xFE9
  4089                           wreg	equ	0xFE8
  4090                           postdec1	equ	0xFE5
  4091                           fsr1l	equ	0xFE1
  4092                           indf2	equ	0xFDF
  4093                           fsr2h	equ	0xFDA
  4094                           fsr2l	equ	0xFD9
  4095                           status	equ	0xFD8
  4096                           
  4097                           	psect	rparam
  4098  0000                     tblptru	equ	0xFF8
  4099                           tblptrh	equ	0xFF7
  4100                           tblptrl	equ	0xFF6
  4101                           tablat	equ	0xFF5
  4102                           indf0	equ	0xFEF
  4103                           postinc0	equ	0xFEE
  4104                           fsr0h	equ	0xFEA
  4105                           fsr0l	equ	0xFE9
  4106                           wreg	equ	0xFE8
  4107                           postdec1	equ	0xFE5
  4108                           fsr1l	equ	0xFE1
  4109                           indf2	equ	0xFDF
  4110                           fsr2h	equ	0xFDA
  4111                           fsr2l	equ	0xFD9
  4112                           status	equ	0xFD8


Data Sizes:
    Strings     91
    Constant    0
    Data        4
    BSS         118
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      95
    BANK0           160     14     133
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    intToAscci@str	PTR unsigned char  size(2) Largest target is 20
		 -> I2CRead@buff(COMRAM[10]), compute@buf(COMRAM[20]), calibrate@buff(COMRAM[10]), main@buff(BANK0[10]), 

    send_string@str	PTR unsigned char  size(2) Largest target is 22
		 -> I2CRead@buff(COMRAM[10]), STR_7(CODE[10]), compute@buf(COMRAM[20]), STR_6(CODE[18]), 
		 -> STR_5(CODE[22]), calibrate@buff(COMRAM[10]), STR_4(CODE[15]), STR_3(CODE[5]), 
		 -> main@buff(BANK0[10]), STR_2(CODE[12]), STR_1(CODE[9]), 

    sp__intToAscci	PTR unsigned char  size(2) Largest target is 20
		 -> I2CRead@buff(COMRAM[10]), compute@buf(COMRAM[20]), calibrate@buff(COMRAM[10]), main@buff(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_USART_Init
    _init->_USART_Init
    _USART_Init->___fttol
    ___fttol->___ftadd
    ___awtoft->___ftpack
    _calibrate->___ftadd
    _send_string->_txr
    _intToAscci->___aldiv
    ___ftdiv->___altoft
    ___ftadd->___ftneg
    ___altoft->___ftpack
    ___ftneg->___ftmul
    ___ftmul->___ftdiv
    _USART_newline->_txr
    _txr->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   60856
                                             83 COMRAM     8     8      0
                                              0 BANK0     14    14      0
                            _MSdelay
                          _ReadCount
                         _USART_Init
                      _USART_newline
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                          _calibrate
                               _init
                         _intToAscci
                        _send_string
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   12533
                            _MSdelay
                         _USART_Init
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           5     3      2   10997
                                             78 COMRAM     5     3      2
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     404
                                             63 COMRAM    15    11      4
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2672
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _calibrate                                           18    18      0   17153
                                             63 COMRAM    18    18      0
                            _MSdelay
                          _ReadCount
                            ___aldiv
                           ___altoft
                            ___ftadd
                            ___ftdiv
                         _intToAscci
                        _send_string
 ---------------------------------------------------------------------------------
 (1) _send_string                                          6     4      2    1374
                                              6 COMRAM     6     4      2
                                _txr
 ---------------------------------------------------------------------------------
 (1) _intToAscci                                          16    10      6    2466
                                             14 COMRAM    16    10      6
                            ___aldiv
                            ___almod
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     448
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3671
                                             18 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4053
                                             51 COMRAM    12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2947
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _ReadCount                                            9     5      4     116
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _MSdelay                                              6     4      2    1536
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftneg                                              3     0      3     121
                                             48 COMRAM     3     0      3
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    3109
                                             33 COMRAM    15     9      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _USART_newline                                        0     0      0     296
                                _txr
 ---------------------------------------------------------------------------------
 (2) _txr                                                  1     1      0     296
                                              5 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MSdelay
   _ReadCount
   _USART_Init
     ___awtoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
   _USART_newline
     _txr
       _delay
   ___altoft
     ___ftpack
   ___ftadd
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftmul
     ___altoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftneg
     ___altoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
   _calibrate
     _MSdelay
     _ReadCount
     ___aldiv
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     _intToAscci
       ___aldiv
       ___almod
     _send_string
       _txr
         _delay
   _init
     _MSdelay
     _USART_Init
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
   _intToAscci
     ___aldiv
     ___almod
   _send_string
     _txr
       _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      E      85       5       83.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5B      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4      20        0.0%
DATA                 0      0      E4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jul 29 16:34:41 2018

           ___altoft@exp 0011                        _b 00D0                        _i 0086  
          _USART_newline 183C            ___altoft@sign 0012                       _b0 00CF  
                     _b1 005E                       _b2 005D                       _b3 00CE  
                     _b4 00CD                       _b5 00CC                       _b6 00CB  
                     _b7 00CA                       _b8 00C9                       _b9 00C8  
            __CFG_BOR$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
           ___ftadd@exp1 003F             ___ftadd@exp2 003E        _deviceAddressRead 00D1  
           ___ftadd@sign 003D                      l151 0B6E                      l152 0BAC  
                    l161 1518                      l170 0936                      l163 153E  
                    l315 169C                      l340 0EEE                      l316 1668  
                    l172 0A02                      l501 1498                      l502 148C  
                    l342 0F62                      l327 180E                      l159 150E  
                    l167 0882                      l328 180A                      l344 0FE4  
                    l505 14C0                      l345 0F6C                      l169 09BA  
                    l514 15A2                      l506 14CE                      l515 1596  
                    l507 14E4                      l339 0F26                      l293 1792  
                    l701 0E5A                      l294 1774                      l702 0E76  
                    l710 123A                      l703 0EA6                      l711 1278  
                    l712 129E                      l625 17B8                      l650 1420  
                    l730 11B0                      l651 1416                      l723 111E  
                    l644 13C4                      l708 1212                      l492 1366  
                    l645 13BA                      l725 1146                      l493 1374  
                    l485 12EC                      l726 1178                      l734 17F2  
                    l494 138A                      l486 1304                      l647 13F8  
                    l727 1188                      l648 13E2                      l488 1332  
                    l752 10C8                      l744 102E                      l729 11A0  
                    l489 1326                      l753 10BC                      l690 0DEE  
                    l498 1466                      l746 10A4                      l675 0D72  
                    l499 147A                      l755 10E4                      l747 1094  
                    l684 0E02                      l679 0D9C                      l689 0DF8  
                    l698 0E36                      l699 0E2C             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _b10 00C7                      _b11 00C6  
                    _b12 00C5                      _b13 00C4                      _b14 00C3  
                    _b15 00C2                      _b16 00C1                      _b17 00C0  
                    _adc 00B9                      _cci 00BA                      _cct 00BB  
                    _lsb 00E0                      _val 00B6                      _ten 007A  
                    _rdy 00BF                      _rez 009E                      _txr 1824  
                    wreg 000FE8             __CFG_LVP$OFF 000000             ___ftdiv@cntr 001C  
           ___ftdiv@sign 0021             __CFG_WDT$OFF 000000                     l2069 1826  
                   l2341 178E                     l2333 177C                     l2511 08E2  
                   l2381 1540                     l2535 09F2                     l2529 09D2  
                   l2549 0AB8                     l2493 0872                     STR_1 084E  
                   STR_2 0838                     STR_3 0857                     STR_4 0829  
                   STR_5 0801                     STR_6 0817                     STR_7 0844  
     _deviceAddressWrite 005F                     ?_txr 0001                     u1050 13AC  
                   u1220 149C                     u1320 0D8E                     u1160 1336  
                   u1090 142A                     u1251 0D30                     u1420 0E3E  
                   u1261 0D44                     _LATA 000F89                     u1350 0DCC  
                   u1521 1012                     u1610 178E                     u1290 0D64  
                   u1540 104C                     u1461 11FA                     u1390 0E0A  
                   u1710 0F44                     u1630 1694                     u1640 16C8  
                   u1481 1222                     u1545 1044                     u1810 0AB8  
                   u1580 10CE                     u1637 168A                     u1647 16BE  
                   u1780 08E2                     u1871 1106                     u1891 112E  
                   _UCON 000F6D                     _ack1 00BE                     _ack2 00BD  
                   _gain 00E3                     _main 0B0A                     _page 00E4  
             ReadCount@i 0005             ___ftpack@arg 0001                     _init 16D0  
                   _rez1 00AE                     _rez2 00AA                     _rez3 00A6  
                   _rez4 00A2             ___ftpack@exp 0004                     _ones 0076  
                   _rezz 009A                     fsr0h 000FEA                     indf0 000FEF  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     start 0000  
        __end_of_MSdelay 17A4            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 002F             ___param_bank 000000             ___ftmul@sign 0030  
         ?_USART_newline 0001             ___fttol@exp1 004E             ___fttol@lval 004A  
                  ??_txr 0006            __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000  
        __end_of___aldiv 139C          __end_of___almod 14F6                    ?_main 0001  
                  ?_init 0001                    _EEADR 000FA9          __end_of___ftadd 0ECC  
        __end_of___ftdiv 12D0                    _CMCON 000FB4          __end_of___ftneg 1800  
        __end_of___ftmul 11EA          __end_of___fttol 10F6                    _LATD0 007C60  
                  _LATD2 007C62                    _RCSTA 000FAB                    _SPBRG 000FAF  
          __CFG_USBDIV$2 000000                    _TRISA 000F92                    _TRISB 000F93  
                  _TXREG 000FAD                    _TXSTA 000FAC            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
                  _calib 0096           __CFG_EBTRB$OFF 000000            ___awtoft@sign 000C  
                  _charr 00B2                    _delay 1800                    _count 006A  
          ___ftpack@sign 0005                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000              ?_USART_Init 004F          __initialization 172C  
           __end_of_main 0D20             __end_of_init 172C            calibrate@buff 0044  
                 ??_main 0054            ___fttol@sign1 0049                   ??_init 0054  
          __activetblptr 000002                   ?_delay 0001                   _ADCON1 000FC1  
       __end_of___altoft 15EC                   _EEDATA 000FA8                   _EECON2 000FA7  
       __end_of___awtoft 17DC         __end_of___ftpack 144A                   _CVRCON 000FB5  
              ??_MSdelay 0003             ?_send_string 0007                   _OSCCON 000FD3  
                 _TRISA0 007C90                   _TRISD0 007CA8       __size_of_ReadCount 007E  
                 _TRISD2 007CAA           send_string@str 0007           __CFG_XINST$OFF 000000  
        ??_USART_newline 0007                ??___aldiv 0009                ??___almod 0009  
              ??___ftadd 003A           __CFG_STVREN$ON 000000                ??___ftdiv 0019  
              ??___ftneg 0034                ??___ftmul 0028                ??___fttol 0044  
                 _gainst 00BC                   delay@d 0001                   delay@i 0004  
                 clear_0 1752                   _sample 006E                   _tx_buf 0060  
  ___ftmul@f3_as_product 002C             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8      __size_of_USART_Init 0072  
             __accesstop 0060  __end_of__initialization 1760               ___altoft@c 0009  
        __CFG_PBADEN$OFF 000000               ___ftadd@f1 0034               ___ftadd@f2 0037  
          ___rparam_used 000001               ___ftdiv@f1 0013               ___ftdiv@f2 0016  
             ___ftdiv@f3 001D               ___ftneg@f1 0031               ___awtoft@c 0009  
             ___ftmul@f1 0022               ___ftmul@f2 0025               ___fttol@f1 0040  
         __pcstackCOMRAM 0001       __size_of_calibrate 02AC             __pidataBANK0 184A  
          __end_of_delay 1824           calibrate@i_390 0050        __end_of_ReadCount 1574  
                ??_delay 0003               __pbssBANK0 0060                  _CCP1CON 000FBD  
                _CCP2CON 000FBA                ?___altoft 0009                ?___awtoft 0009  
              ?___ftpack 0001        __end_of_calibrate 0B0A                  _MSdelay 176A  
        __CFG_VREGEN$OFF 000000     __size_of_send_string 0072               calibrate@i 004E  
           ??_USART_Init 0051                  __Hparam 0000                  __Lparam 0000  
             _intToAscci 0ECC                  ___aldiv 12D0                  ___almod 144A  
                ___ftadd 0D20                  ___ftdiv 11EA                  ___ftneg 17DC  
                ___ftmul 10F6                  ___fttol 1002                  _adc_val 0072  
           __psmallconst 0800               ??___altoft 000D                  __pcinit 172C  
             ??___awtoft 000C               ??___ftpack 0006                  __ramtop 0800  
                __ptext0 0B0A                  __ptext1 16D0                  __ptext2 15EC  
                __ptext3 1002                  __ptext4 17A4                  __ptext5 085E  
                __ptext6 165E                  __ptext7 0ECC                  __ptext8 144A  
                __ptext9 12D0                  _constt3 008A           USART_Init@temp 0051  
           __size_of_txr 0018                  _hundred 007E         ___aldiv@dividend 0001  
                _rezult2 0092                  _rezult3 008E       __end_of_USART_Init 165E  
                main@cnt 00DC     end_of_initialization 1760            __Lmediumconst 0000  
       ___aldiv@quotient 000B                  postdec1 000FE5                  postinc0 000FEE  
  send_string@sndstr_cnt 000B                  txr@temp 0006                _PORTAbits 000F80  
              _PORTBbits 000F81                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94      USART_Init@baud_rate 004F              ___ftdiv@exp 0020  
              _TXSTAbits 000FAC               main@weight 00DE              ?_intToAscci 000F  
            ___ftmul@exp 002B    __end_of_USART_newline 184A      start_initialization 172C  
              _ReadCount 14F6              __end_of_txr 183C              __pdataBANK0 00E0  
       __CFG_LPT1OSC$OFF 000000        __size_of___altoft 0078        __size_of___awtoft 0038  
      __size_of___ftpack 00AE              __pbssCOMRAM 005C            __pcstackBANK0 00D2  
             ?_ReadCount 0001      __size_of_intToAscci 0136                 ?_MSdelay 0001  
              _calibrate 085E      intToAscci@tempCount 0017                __pnvBANK0 00E4  
               ?___aldiv 0001                 ?___almod 0001                 ?___ftadd 0034  
               ?___ftdiv 0013                 ?___ftneg 0031                 ?___ftmul 0022  
               ?___fttol 0040            intToAscci@rem 0015            intToAscci@num 000F  
          intToAscci@str 0013         ___almod@dividend 0001              __smallconst 0800  
         __size_of_delay 0024            ??_send_string 0009                 MSdelay@i 0003  
               MSdelay@j 0005          ___aldiv@divisor 0005          ___aldiv@counter 0009  
             ?_calibrate 0001                 _LATAbits 000F89                 _PIR2bits 000FA1  
       __CFG_WDTPS$32768 000000              ??_ReadCount 0005                copy_data0 1740  
       __size_of_MSdelay 003A               _EECON1bits 000FA6                 __Hrparam 0000  
    __end_of_send_string 16D0             ??_intToAscci 0015                 __Lrparam 0000  
       __size_of___aldiv 00CC         __size_of___almod 00AC         __size_of___ftadd 01AC  
       __size_of___ftdiv 00E6         __size_of___ftneg 0024                 ___altoft 1574  
       __size_of___ftmul 00F4         __size_of___fttol 00F4                 ___awtoft 17A4  
               ___ftpack 139C       intToAscci@temp_num 0019                 __ptext10 11EA  
               __ptext11 0D20                 __ptext20 1800                 __ptext12 1574  
               __ptext13 14F6                 __ptext14 176A                 __ptext15 17DC  
               __ptext16 10F6                 __ptext17 139C                 __ptext18 183C  
               __ptext19 1824       __end_of_intToAscci 1002          ___almod@divisor 0005  
         ReadCount@Count 0006          ___almod@counter 0009              ??_calibrate 0040  
          __size_of_main 0216            __size_of_init 005C               MSdelay@val 0001  
               _thousand 0082                 main@buff 00D2    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2        intToAscci@counter 001D   __size_of_USART_newline 000E  
            _send_string 165E            _configuration 005C             ___aldiv@sign 000A  
     __CFG_FOSC$HSPLL_HS 000000             ___almod@sign 000A               _USART_Init 15EC  
